{"version":3,"file":"ngx-smart-modal.component.d.ts","sources":["ngx-smart-modal.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, OnDestroy, Renderer2, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { NgxSmartModalService } from '../services/ngx-smart-modal.service';\nexport declare class NgxSmartModalComponent implements OnInit, OnDestroy {\n    private _renderer;\n    private _changeDetectorRef;\n    private _ngxSmartModalService;\n    closable: boolean;\n    escapable: boolean;\n    dismissable: boolean;\n    identifier: string;\n    customClass: string;\n    visible: boolean;\n    backdrop: boolean;\n    force: boolean;\n    hideDelay: number;\n    autostart: boolean;\n    target: any;\n    visibleChange: EventEmitter<boolean>;\n    onClose: EventEmitter<any>;\n    onCloseFinished: EventEmitter<any>;\n    onDismiss: EventEmitter<any>;\n    onDismissFinished: EventEmitter<any>;\n    onAnyCloseEvent: EventEmitter<any>;\n    onAnyCloseEventFinished: EventEmitter<any>;\n    onOpen: EventEmitter<any>;\n    onEscape: EventEmitter<any>;\n    onDataAdded: EventEmitter<any>;\n    onDataRemoved: EventEmitter<any>;\n    layerPosition: number;\n    overlayVisible: boolean;\n    openedClass: boolean;\n    private _data;\n    private nsmContent;\n    private nsmDialog;\n    private nsmOverlay;\n    constructor(_renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef, _ngxSmartModalService: NgxSmartModalService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    open(top?: boolean): void;\n    close(): void;\n    dismiss(e: any): void;\n    toggle(top?: boolean): void;\n    addCustomClass(className: string): void;\n    removeCustomClass(className?: string): void;\n    isVisible(): boolean;\n    hasData(): boolean;\n    setData(data: any, force?: boolean): any;\n    getData(): any;\n    removeData(): void;\n    escapeKeyboardEvent: (event: KeyboardEvent) => void;\n    targetPlacement(): void;\n}\n"]}