{"version":3,"file":"ngx-smart-modal.service.d.ts","sources":["ngx-smart-modal.service.d.ts"],"names":[],"mappingssourcesContent":["import { NgxSmartModalComponent } from '../../';\nimport { ModalInstance } from './modal-instance';\nexport declare class NgxSmartModalService {\n    modalStack: ModalInstance[];\n    private debouncer;\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @returns nothing special.\n     */\n    addModal(modalInstance: ModalInstance, force?: boolean): void;\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param id The modal identifier used at creation time.\n     */\n    getModal(id: string): NgxSmartModalComponent;\n    /**\n     * Alias of `getModal` to retrieve a modal instance by its identifier.\n     *\n     * @param id The modal identifier used at creation time.\n     */\n    get(id: string): NgxSmartModalComponent;\n    /**\n     * Open a given modal\n     *\n     * @param id The modal identifier used at creation time.\n     * @param force Tell the modal to open top of all other opened modals\n     */\n    open(id: string, force?: boolean): void;\n    /**\n     * Close a given modal\n     *\n     * @param id The modal identifier used at creation time.\n     */\n    close(id: string): void;\n    /**\n     * Toggles a given modal\n     * If the retrieved modal is opened it closes it, else it opens it.\n     *\n     * @param id The modal identifier used at creation time.\n     * @param force Tell the modal to open top of all other opened modals\n     */\n    toggle(id: string, force?: boolean): void;\n    /**\n     * Retrieve all the created modals.\n     *\n     * @returns an array that contains all modal instances.\n     */\n    getModalStack(): ModalInstance[];\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @returns an array that contains all the opened modals.\n     */\n    getOpenedModals(): ModalInstance[];\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @returns a higher index from all the existing modal instances.\n     */\n    getHigherIndex(): number;\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @returns the number of modal instances.\n     */\n    getModalStackCount(): number;\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param id The modal identifier.\n     * @returns the removed modal instance.\n     */\n    removeModal(id: string): void;\n    /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param data The data you want to associate to the modal.\n     * @param id The modal identifier.\n     * @param force If true, overrides the previous stored data if there was.\n     * @returns true if the given modal exists and the process has been tried, either false.\n     */\n    setModalData(data: any, id: string, force?: boolean): boolean;\n    /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param id The modal identifier used at creation time.\n     * @returns the associated modal data.\n     */\n    getModalData(id: string): any;\n    /**\n     * Reset the data attached to a given modal.\n     *\n     * @param id The modal identifier used at creation time.\n     * @returns the removed data or false if modal doesn't exist.\n     */\n    resetModalData(id: string): any | boolean;\n    /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     */\n    closeLatestModal(): void;\n}\n"]}