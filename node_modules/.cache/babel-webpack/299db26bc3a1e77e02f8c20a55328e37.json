{"ast":null,"code":"import _get from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TemplateRef, Directive, EventEmitter, ContentChild, Input, Output, HostBinding, Component, forwardRef, ContentChildren, QueryList, Host, Optional, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"*\"];\n\nvar _c1 = function _c1(a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    \"vertical\": a0,\n    \"horizontal\": a1,\n    \"small\": a2,\n    \"large-filled\": a3,\n    \"large-filled-symbols\": a4,\n    \"large-empty\": a5,\n    \"large-empty-symbols\": a6\n  };\n};\n\nfunction WizardComponent_aw_wizard_navigation_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"direction\", ctx_r0.navBarDirection)(\"ngClass\", ɵngcc0.ɵɵpureFunction7(2, _c1, ctx_r0.navBarLocation == \"left\", ctx_r0.navBarLocation == \"top\", ctx_r0.navBarLayout == \"small\", ctx_r0.navBarLayout == \"large-filled\", ctx_r0.navBarLayout == \"large-filled-symbols\", ctx_r0.navBarLayout == \"large-empty\", ctx_r0.navBarLayout == \"large-empty-symbols\"));\n  }\n}\n\nfunction WizardComponent_aw_wizard_navigation_bar_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"direction\", ctx_r1.navBarDirection)(\"ngClass\", ɵngcc0.ɵɵpureFunction7(2, _c1, ctx_r1.navBarLocation == \"right\", ctx_r1.navBarLocation == \"bottom\", ctx_r1.navBarLayout == \"small\", ctx_r1.navBarLayout == \"large-filled\", ctx_r1.navBarLayout == \"large-filled-symbols\", ctx_r1.navBarLayout == \"large-empty\", ctx_r1.navBarLayout == \"large-empty-symbols\"));\n  }\n}\n\nvar _c2 = function _c2(a1, a2) {\n  return {\n    \"wizard-steps\": true,\n    \"vertical\": a1,\n    \"horizontal\": a2\n  };\n};\n\nvar _c3 = function _c3(a0) {\n  return {\n    wizardStep: a0\n  };\n};\n\nfunction WizardNavigationBarComponent_li_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n  }\n\n  if (rf & 2) {\n    var step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepTitleTemplate.templateRef)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c3, step_r1));\n  }\n}\n\nfunction WizardNavigationBarComponent_li_1_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.stepTitle);\n  }\n}\n\nfunction WizardNavigationBarComponent_li_1_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n  }\n\n  if (rf & 2) {\n    var step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepSymbolTemplate.templateRef)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c3, step_r1));\n  }\n}\n\nfunction WizardNavigationBarComponent_li_1_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.navigationSymbol.symbol);\n  }\n}\n\nvar _c4 = function _c4(a0, a1, a2, a3, a4, a5) {\n  return {\n    \"current\": a0,\n    \"editing\": a1,\n    \"done\": a2,\n    \"optional\": a3,\n    \"completed\": a4,\n    \"navigable\": a5\n  };\n};\n\nvar _c5 = function _c5(a0) {\n  return {\n    \"font-family\": a0\n  };\n};\n\nfunction WizardNavigationBarComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 2);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(3, WizardNavigationBarComponent_li_1_ng_container_3_Template, 1, 4, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(4, WizardNavigationBarComponent_li_1_ng_container_4_Template, 2, 1, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 6);\n    ɵngcc0.ɵɵtemplate(6, WizardNavigationBarComponent_li_1_ng_container_6_Template, 1, 4, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(7, WizardNavigationBarComponent_li_1_ng_container_7_Template, 2, 1, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var step_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction6(8, _c4, ctx_r0.isCurrent(step_r1), ctx_r0.isEditing(step_r1), ctx_r0.isDone(step_r1), ctx_r0.isOptional(step_r1), ctx_r0.isCompleted(step_r1), ctx_r0.isNavigable(step_r1)));\n    ɵngcc0.ɵɵattribute(\"id\", step_r1.stepId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"awGoToStep\", step_r1);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(15, _c5, step_r1.stepSymbolTemplate ? \"\" : step_r1.navigationSymbol.fontFamily));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepSymbolTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepSymbolTemplate);\n  }\n}\n\nvar WizardStepSymbolDirective =\n/**\n * Constructor\n *\n * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n */\nfunction WizardStepSymbolDirective(templateRef) {\n  _classCallCheck(this, WizardStepSymbolDirective);\n\n  this.templateRef = templateRef;\n};\n\nWizardStepSymbolDirective.ɵfac = function WizardStepSymbolDirective_Factory(t) {\n  return new (t || WizardStepSymbolDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nWizardStepSymbolDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardStepSymbolDirective,\n  selectors: [[\"ng-template\", \"awStepSymbol\", \"\"], [\"ng-template\", \"awWizardStepSymbol\", \"\"]]\n});\n\nWizardStepSymbolDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\nWizardStepSymbolDirective = __decorate([__metadata(\"design:paramtypes\", [TemplateRef])], WizardStepSymbolDirective);\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar WizardStepTitleDirective =\n/**\n * Constructor\n *\n * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n */\nfunction WizardStepTitleDirective(templateRef) {\n  _classCallCheck(this, WizardStepTitleDirective);\n\n  this.templateRef = templateRef;\n};\n\nWizardStepTitleDirective.ɵfac = function WizardStepTitleDirective_Factory(t) {\n  return new (t || WizardStepTitleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nWizardStepTitleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardStepTitleDirective,\n  selectors: [[\"ng-template\", \"awStepTitle\", \"\"], [\"ng-template\", \"awWizardStepTitle\", \"\"]]\n});\n\nWizardStepTitleDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\nWizardStepTitleDirective = __decorate([__metadata(\"design:paramtypes\", [TemplateRef])], WizardStepTitleDirective);\nvar WizardStep_1;\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\n\nvar WizardStep = WizardStep_1 = /*#__PURE__*/function () {\n  function WizardStep() {\n    _classCallCheck(this, WizardStep);\n\n    /**\n     * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n     * Takes effect when `stepSymbolTemplate` is not defined or null.\n     */\n    this.navigationSymbol = {\n      symbol: ''\n    };\n    /**\n     * A boolean describing if the wizard step is currently selected\n     */\n\n    this.selected = false;\n    /**\n     * A boolean describing if the wizard step has been completed\n     */\n\n    this.completed = false;\n    /**\n     * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n     *\n     * Users will typically use `CompletedStepDirective` to set this flag\n     */\n\n    this.initiallyCompleted = false;\n    /**\n     * A boolean describing if the wizard step is being edited after being competed\n     *\n     * This flag can only be true when `selected` is true.\n     */\n\n    this.editing = false;\n    /**\n     * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n     */\n\n    this.defaultSelected = false;\n    /**\n     * A boolean describing if the wizard step is an optional step\n     */\n\n    this.optional = false;\n    /**\n     * A function or boolean deciding, if this step can be entered\n     */\n\n    this.canEnter = true;\n    /**\n     * A function or boolean deciding, if this step can be exited\n     */\n\n    this.canExit = true;\n    /**\n     * This [[EventEmitter]] is called when the step is entered.\n     * The bound method should be used to do initialization work.\n     */\n\n    this.stepEnter = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n\n    this.stepExit = new EventEmitter();\n  }\n  /**\n   * Returns true if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n\n\n  _createClass(WizardStep, [{\n    key: \"enter\",\n\n    /**\n     * A function called when the step is entered\n     *\n     * @param direction The direction in which the step is entered\n     */\n    value: function enter(direction) {\n      this.stepEnter.emit(direction);\n    }\n    /**\n     * A function called when the step is exited\n     *\n     * @param direction The direction in which the step is exited\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit(direction) {\n      this.stepExit.emit(direction);\n    }\n    /**\n     * This method returns true, if this wizard step can be entered from the given direction.\n     * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be entered\n     * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n     * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n     */\n\n  }, {\n    key: \"canEnterStep\",\n    value: function canEnterStep(direction) {\n      return WizardStep_1.canTransitionStep(this.canEnter, direction);\n    }\n    /**\n     * This method returns true, if this wizard step can be exited into given direction.\n     * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be left\n     * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n     * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n     */\n\n  }, {\n    key: \"canExitStep\",\n    value: function canExitStep(direction) {\n      return WizardStep_1.canTransitionStep(this.canExit, direction);\n    }\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return !this.selected;\n    }\n    /**\n     * This method returns true, if this wizard step can be transitioned with a given direction.\n     * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n     *\n     * @param condition A condition variable, deciding if the step can be transitioned\n     * @param direction The direction in which this step should be transitioned\n     * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n     * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n     */\n\n  }], [{\n    key: \"canTransitionStep\",\n    value: function canTransitionStep(condition, direction) {\n      if (typeof condition === typeof true) {\n        return Promise.resolve(condition);\n      } else if (condition instanceof Function) {\n        return Promise.resolve(condition(direction));\n      } else {\n        return Promise.reject(new Error(\"Input value '\".concat(condition, \"' is neither a boolean nor a function\")));\n      }\n    }\n  }]);\n\n  return WizardStep;\n}();\n\nWizardStep.ɵfac = function WizardStep_Factory(t) {\n  return new (t || WizardStep)();\n};\n\nWizardStep.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardStep,\n  contentQueries: function WizardStep_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepTitleDirective, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepSymbolDirective, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepTitleTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepSymbolTemplate = _t.first);\n    }\n  },\n  hostVars: 1,\n  hostBindings: function WizardStep_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"hidden\", ctx.hidden);\n    }\n  },\n  inputs: {\n    navigationSymbol: \"navigationSymbol\",\n    canEnter: \"canEnter\",\n    canExit: \"canExit\",\n    stepId: \"stepId\",\n    stepTitle: \"stepTitle\"\n  },\n  outputs: {\n    stepEnter: \"stepEnter\",\n    stepExit: \"stepExit\"\n  }\n});\n\n__decorate([ContentChild(WizardStepTitleDirective), __metadata(\"design:type\", WizardStepTitleDirective)], WizardStep.prototype, \"stepTitleTemplate\", void 0);\n\n__decorate([ContentChild(WizardStepSymbolDirective), __metadata(\"design:type\", WizardStepSymbolDirective)], WizardStep.prototype, \"stepSymbolTemplate\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], WizardStep.prototype, \"stepId\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], WizardStep.prototype, \"stepTitle\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], WizardStep.prototype, \"navigationSymbol\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], WizardStep.prototype, \"canEnter\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], WizardStep.prototype, \"canExit\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], WizardStep.prototype, \"stepEnter\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], WizardStep.prototype, \"stepExit\", void 0);\n\n__decorate([HostBinding('hidden'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [])], WizardStep.prototype, \"hidden\", null);\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\n\n\nvar WizardCompletionStep = /*#__PURE__*/function (_WizardStep) {\n  _inherits(WizardCompletionStep, _WizardStep);\n\n  var _super = _createSuper(WizardCompletionStep);\n\n  function WizardCompletionStep() {\n    var _this;\n\n    _classCallCheck(this, WizardCompletionStep);\n\n    _this = _super.apply(this, arguments);\n    /**\n     * @inheritDoc\n     */\n\n    _this.stepExit = new EventEmitter();\n    /**\n     * @inheritDoc\n     */\n\n    _this.canExit = false;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(WizardCompletionStep, [{\n    key: \"enter\",\n    value: function enter(direction) {\n      this.completed = true;\n      this.stepEnter.emit(direction);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit(direction) {\n      // set this completion step as incomplete (unless it happens to be initiallyCompleted)\n      this.completed = this.initiallyCompleted;\n      this.stepExit.emit(direction);\n    }\n  }]);\n\n  return WizardCompletionStep;\n}(WizardStep);\n\nWizardCompletionStep.ɵfac = function WizardCompletionStep_Factory(t) {\n  return ɵWizardCompletionStep_BaseFactory(t || WizardCompletionStep);\n};\n\nWizardCompletionStep.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardCompletionStep,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar WizardCompletionStepComponent_1;\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar WizardCompletionStepComponent = WizardCompletionStepComponent_1 = /*#__PURE__*/function (_WizardCompletionStep) {\n  _inherits(WizardCompletionStepComponent, _WizardCompletionStep);\n\n  var _super2 = _createSuper(WizardCompletionStepComponent);\n\n  function WizardCompletionStepComponent() {\n    _classCallCheck(this, WizardCompletionStepComponent);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return WizardCompletionStepComponent;\n}(WizardCompletionStep);\n\nWizardCompletionStepComponent.ɵfac = function WizardCompletionStepComponent_Factory(t) {\n  return ɵWizardCompletionStepComponent_BaseFactory(t || WizardCompletionStepComponent);\n};\n\nWizardCompletionStepComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: WizardCompletionStepComponent,\n  selectors: [[\"aw-wizard-completion-step\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(function () {\n      return WizardCompletionStepComponent_1;\n    })\n  }, {\n    provide: WizardCompletionStep,\n    useExisting: forwardRef(function () {\n      return WizardCompletionStepComponent_1;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function WizardCompletionStepComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\n\nvar MovingDirection;\n\n(function (MovingDirection) {\n  /**\n   * A forward step transition\n   */\n  MovingDirection[MovingDirection[\"Forwards\"] = 0] = \"Forwards\";\n  /**\n   * A backward step transition\n   */\n\n  MovingDirection[MovingDirection[\"Backwards\"] = 1] = \"Backwards\";\n  /**\n   * No step transition was done\n   */\n\n  MovingDirection[MovingDirection[\"Stay\"] = 2] = \"Stay\";\n})(MovingDirection || (MovingDirection = {}));\n/**\n * Base implementation of [[NavigationMode]]\n *\n * Note: Built-in [[NavigationMode]] classes should be stateless, allowing the library user to easily create\n * an instance of a particular [[NavigationMode]] class and pass it to `<aw-wizard [navigationMode]=\"...\">`.\n *\n * @author Marc Arndt\n */\n\n\nvar BaseNavigationMode = /*#__PURE__*/function () {\n  function BaseNavigationMode() {\n    _classCallCheck(this, BaseNavigationMode);\n  }\n\n  _createClass(BaseNavigationMode, [{\n    key: \"canGoToStep\",\n\n    /**\n     * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n     *\n     * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n     * Navigation by navigation bar is governed by [[isNavigable]].\n     *\n     * In this implementation, a destination wizard step can be entered if:\n     * - it exists\n     * - the current step can be exited in the direction of the destination step\n     * - the destination step can be entered in the direction from the current step\n     *\n     * Subclasses can impose additional restrictions, see [[canTransitionToStep]].\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination step\n     * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and `false` otherwise\n     */\n    value: function canGoToStep(wizard, destinationIndex) {\n      var _this2 = this;\n\n      var hasStep = wizard.hasStep(destinationIndex);\n      var movingDirection = wizard.getMovingDirection(destinationIndex);\n\n      var canExitCurrentStep = function canExitCurrentStep(previous) {\n        return previous && wizard.currentStep.canExitStep(movingDirection);\n      };\n\n      var canEnterDestinationStep = function canEnterDestinationStep(previous) {\n        return previous && wizard.getStepAtIndex(destinationIndex).canEnterStep(movingDirection);\n      };\n\n      var canTransitionToStep = function canTransitionToStep(previous) {\n        return previous && _this2.canTransitionToStep(wizard, destinationIndex);\n      };\n\n      return Promise.resolve(hasStep).then(canTransitionToStep) // Apply user-defined checks at the end.  They can involve user interaction\n      // which is better to be avoided if navigation mode does not actually allow the transition\n      // (`canTransitionToStep` returns `false`).\n      .then(canExitCurrentStep).then(canEnterDestinationStep);\n    }\n    /**\n     * Imposes additional restrictions for `canGoToStep` in current navigation mode.\n     *\n     * The base implementation allows transition iff the given step is navigable from the navigation bar (see `isNavigable`).\n     * However, in some navigation modes `canTransitionToStep` can be more relaxed to allow navigation to certain steps\n     * by previous/next buttons, but not using the navigation bar.\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination step\n     * @returns `true`, if the destination step can be transitioned to and `false` otherwise\n     */\n\n  }, {\n    key: \"canTransitionToStep\",\n    value: function canTransitionToStep(wizard, destinationIndex) {\n      return this.isNavigable(wizard, destinationIndex);\n    }\n    /**\n     * Tries to transition to the wizard step, as denoted by the given destination index.\n     *\n     * When entering the destination step, the following actions are done:\n     * - the old current step is set as completed\n     * - the old current step is set as unselected\n     * - the old current step is exited\n     * - the destination step is set as selected\n     * - the destination step is entered\n     *\n     * When the destination step couldn't be entered, the following actions are done:\n     * - the current step is exited and entered in the direction `MovingDirection.Stay`\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination wizard step, which should be entered\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n\n  }, {\n    key: \"goToStep\",\n    value: function goToStep(wizard, destinationIndex, preFinalize, postFinalize) {\n      var _this3 = this;\n\n      this.canGoToStep(wizard, destinationIndex).then(function (navigationAllowed) {\n        if (navigationAllowed) {\n          // the current step can be exited in the given direction\n          var movingDirection = wizard.getMovingDirection(destinationIndex);\n          /* istanbul ignore if */\n\n          if (preFinalize) {\n            preFinalize.emit();\n          } // leave current step\n\n\n          wizard.currentStep.completed = true;\n          wizard.currentStep.exit(movingDirection);\n          wizard.currentStep.editing = false;\n          wizard.currentStep.selected = false;\n\n          _this3.transition(wizard, destinationIndex); // remember if the next step is already completed before entering it to properly set `editing` flag\n\n\n          var wasCompleted = wizard.completed || wizard.currentStep.completed; // go to next step\n\n          wizard.currentStep.enter(movingDirection);\n          wizard.currentStep.selected = true;\n\n          if (wasCompleted) {\n            wizard.currentStep.editing = true;\n          }\n          /* istanbul ignore if */\n\n\n          if (postFinalize) {\n            postFinalize.emit();\n          }\n        } else {\n          // if the current step can't be left, reenter the current step\n          wizard.currentStep.exit(MovingDirection.Stay);\n          wizard.currentStep.enter(MovingDirection.Stay);\n        }\n      });\n    }\n    /**\n     * Transitions the wizard to the given step index.\n     *\n     * Can perform additional actions in particular navigation mode implementations.\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination wizard step\n     */\n\n  }, {\n    key: \"transition\",\n    value: function transition(wizard, destinationIndex) {\n      wizard.currentStepIndex = destinationIndex;\n    }\n    /**\n     * Resets the state of this wizard.\n     *\n     * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n     * In addition the whole wizard is set as incomplete.\n     *\n     * @param wizard The wizard component to operate on\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(wizard) {\n      this.ensureCanReset(wizard); // reset the step internal state\n\n      wizard.wizardSteps.forEach(function (step) {\n        step.completed = step.initiallyCompleted;\n        step.selected = false;\n        step.editing = false;\n      }); // set the first step as the current step\n\n      wizard.currentStepIndex = wizard.defaultStepIndex;\n      wizard.currentStep.selected = true;\n      wizard.currentStep.enter(MovingDirection.Forwards);\n    }\n    /**\n     * Checks if wizard configuration allows to perform reset.\n     *\n     * A check failure is indicated by throwing an `Error` with the message discribing the discovered misconfiguration issue.\n     *\n     * Can include additional checks in particular navigation mode implementations.\n     *\n     * @param wizard The wizard component to operate on\n     * @throws An `Error` is thrown, if a micconfiguration issue is discovered.\n     */\n\n  }, {\n    key: \"ensureCanReset\",\n    value: function ensureCanReset(wizard) {\n      // the wizard doesn't contain a step with the default step index\n      if (!wizard.hasStep(wizard.defaultStepIndex)) {\n        throw new Error(\"The wizard doesn't contain a step with index \".concat(wizard.defaultStepIndex));\n      }\n    }\n  }]);\n\n  return BaseNavigationMode;\n}();\n/**\n * The default navigation mode used by [[WizardComponent]] and [[NavigationModeDirective]].\n *\n * It is parameterized with two navigation policies passed to constructor:\n *\n * - [[navigateBackward]] policy controls whether wizard steps before the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"deny\"`\n *\n * - [[navigateForward]] policy controls whether wizard steps after the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - `\"visited\"` -- a step is navigable iff it was already visited before\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"allow\"`\n */\n\n\nvar ConfigurableNavigationMode = /*#__PURE__*/function (_BaseNavigationMode) {\n  _inherits(ConfigurableNavigationMode, _BaseNavigationMode);\n\n  var _super3 = _createSuper(ConfigurableNavigationMode);\n\n  /**\n   * Constructor\n   *\n   * @param navigateBackward Controls whether wizard steps before the current step are navigable\n   * @param navigateForward Controls whether wizard steps before the current step are navigable\n   */\n  function ConfigurableNavigationMode() {\n    var _this4;\n\n    var navigateBackward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var navigateForward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, ConfigurableNavigationMode);\n\n    _this4 = _super3.call(this);\n    _this4.navigateBackward = navigateBackward;\n    _this4.navigateForward = navigateForward;\n    _this4.navigateBackward = _this4.navigateBackward || 'allow';\n    _this4.navigateForward = _this4.navigateForward || 'deny';\n    return _this4;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(ConfigurableNavigationMode, [{\n    key: \"canTransitionToStep\",\n    value: function canTransitionToStep(wizard, destinationIndex) {\n      // if the destination step can be navigated to using the navigation bar,\n      // it should be accessible with [goToStep] as well\n      if (this.isNavigable(wizard, destinationIndex)) {\n        return true;\n      } // navigation with [goToStep] is permitted if all previous steps\n      // to the destination step have been completed or are optional\n\n\n      return wizard.wizardSteps.filter(function (step, index) {\n        return index < destinationIndex && index !== wizard.currentStepIndex;\n      }).every(function (step) {\n        return step.completed || step.optional;\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"transition\",\n    value: function transition(wizard, destinationIndex) {\n      if (this.navigateForward === 'deny') {\n        // set all steps after the destination step to incomplete\n        wizard.wizardSteps.filter(function (step, index) {\n          return wizard.currentStepIndex > destinationIndex && index > destinationIndex;\n        }).forEach(function (step) {\n          return step.completed = false;\n        });\n      }\n\n      _get(_getPrototypeOf(ConfigurableNavigationMode.prototype), \"transition\", this).call(this, wizard, destinationIndex);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"isNavigable\",\n    value: function isNavigable(wizard, destinationIndex) {\n      // Check if the destination step can be navigated to\n      var destinationStep = wizard.getStepAtIndex(destinationIndex);\n\n      if (destinationStep instanceof WizardCompletionStep) {\n        // A completion step can only be entered, if all previous steps have been completed, are optional, or selected\n        var previousStepsCompleted = wizard.wizardSteps.filter(function (step, index) {\n          return index < destinationIndex;\n        }).every(function (step) {\n          return step.completed || step.optional || step.selected;\n        });\n\n        if (!previousStepsCompleted) {\n          return false;\n        }\n      } // Apply navigation pocicies\n\n\n      if (destinationIndex < wizard.currentStepIndex) {\n        // If the destination step is before current, apply the `navigateBackward` policy\n        switch (this.navigateBackward) {\n          case 'allow':\n            return true;\n\n          case 'deny':\n            return false;\n\n          default:\n            throw new Error(\"Invalid value for navigateBackward: \".concat(this.navigateBackward));\n        }\n      } else if (destinationIndex > wizard.currentStepIndex) {\n        // If the destination step is after current, apply the `navigateForward` policy\n        switch (this.navigateForward) {\n          case 'allow':\n            return true;\n\n          case 'deny':\n            return false;\n\n          case 'visited':\n            return destinationStep.completed;\n\n          default:\n            throw new Error(\"Invalid value for navigateForward: \".concat(this.navigateForward));\n        }\n      } else {\n        // Re-entering the current step is not allowed\n        return false;\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"ensureCanReset\",\n    value: function ensureCanReset(wizard) {\n      _get(_getPrototypeOf(ConfigurableNavigationMode.prototype), \"ensureCanReset\", this).call(this, wizard); // the default step is a completion step and the wizard contains more than one step\n\n\n      var defaultWizardStep = wizard.getStepAtIndex(wizard.defaultStepIndex);\n      var defaultCompletionStep = defaultWizardStep instanceof WizardCompletionStep;\n\n      if (defaultCompletionStep && wizard.wizardSteps.length !== 1) {\n        throw new Error(\"The default step index \".concat(wizard.defaultStepIndex, \" references a completion step\"));\n      }\n    }\n  }]);\n\n  return ConfigurableNavigationMode;\n}(BaseNavigationMode);\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar WizardComponent = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   */\n  function WizardComponent() {\n    _classCallCheck(this, WizardComponent);\n\n    /**\n     * The location of the navigation bar inside the wizard.\n     * This location can be either top, bottom, left or right\n     */\n    this.navBarLocation = 'top';\n    /**\n     * The layout of the navigation bar inside the wizard.\n     * The layout can be either small, large-filled, large-empty or large-symbols\n     */\n\n    this.navBarLayout = 'small';\n    /**\n     * The direction in which the steps inside the navigation bar should be shown.\n     * The direction can be either `left-to-right` or `right-to-left`\n     */\n\n    this.navBarDirection = 'left-to-right';\n    this._defaultStepIndex = 0;\n    /**\n     * True, if the navigation bar shouldn't be used for navigating\n     */\n\n    this.disableNavigationBar = false;\n    /**\n     * The navigation mode used to navigate inside the wizard\n     *\n     * For outside access, use the [[navigation]] getter.\n     */\n\n    this._navigation = new ConfigurableNavigationMode();\n    /**\n     * An array representation of all wizard steps belonging to this model\n     *\n     * For outside access, use the [[wizardSteps]] getter.\n     */\n\n    this._wizardSteps = [];\n    /**\n     * The index of the currently visible and selected step inside the wizardSteps QueryList.\n     * If this wizard contains no steps, currentStepIndex is -1\n     *\n     * Note: Do not modify this field directly.  Instead, use navigation methods:\n     * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n     */\n\n    this.currentStepIndex = -1;\n  }\n  /**\n   * The initially selected step, represented by its index\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   */\n\n\n  _createClass(WizardComponent, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * Initialization work\n     */\n    value: function ngAfterContentInit() {\n      var _this5 = this;\n\n      // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n      this.wizardStepsQueryList.changes.subscribe(function (changedWizardSteps) {\n        _this5.updateWizardSteps(changedWizardSteps.toArray());\n      }); // initialize the model\n\n      this.updateWizardSteps(this.wizardStepsQueryList.toArray()); // finally reset the whole wizard component\n\n      setTimeout(function () {\n        return _this5.reset();\n      });\n    }\n    /**\n     * The WizardStep object belonging to the currently visible and selected step.\n     * The currentStep is always the currently selected wizard step.\n     * The currentStep can be either completed, if it was visited earlier,\n     * or not completed, if it is visited for the first time or its state is currently out of date.\n     *\n     * If this wizard contains no steps, currentStep is null\n     */\n\n  }, {\n    key: \"updateWizardSteps\",\n\n    /**\n     * Updates the wizard steps to the new array\n     *\n     * @param wizardSteps The updated wizard steps\n     */\n    value: function updateWizardSteps(wizardSteps) {\n      // the wizard is currently not in the initialization phase\n      if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n        this.currentStepIndex = wizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n      }\n\n      this._wizardSteps = wizardSteps;\n    }\n    /**\n     * The navigation mode used to navigate inside the wizard\n     */\n\n  }, {\n    key: \"hasStep\",\n\n    /**\n     * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n     *\n     * @param stepIndex The to be checked index of a step inside this wizard\n     * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n     */\n    value: function hasStep(stepIndex) {\n      return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n    }\n    /**\n     * Checks if this wizard has a previous step, compared to the current step\n     *\n     * @returns True if this wizard has a previous step before the current step\n     */\n\n  }, {\n    key: \"hasPreviousStep\",\n    value: function hasPreviousStep() {\n      return this.hasStep(this.currentStepIndex - 1);\n    }\n    /**\n     * Checks if this wizard has a next step, compared to the current step\n     *\n     * @returns True if this wizard has a next step after the current step\n     */\n\n  }, {\n    key: \"hasNextStep\",\n    value: function hasNextStep() {\n      return this.hasStep(this.currentStepIndex + 1);\n    }\n    /**\n     * Checks if this wizard is currently inside its last step\n     *\n     * @returns True if the wizard is currently inside its last step\n     */\n\n  }, {\n    key: \"isLastStep\",\n    value: function isLastStep() {\n      return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n    }\n    /**\n     * Finds the [[WizardStep]] at the given index `stepIndex`.\n     * If no [[WizardStep]] exists at the given index an Error is thrown\n     *\n     * @param stepIndex The given index\n     * @returns The found [[WizardStep]] at the given index `stepIndex`\n     * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n     */\n\n  }, {\n    key: \"getStepAtIndex\",\n    value: function getStepAtIndex(stepIndex) {\n      if (!this.hasStep(stepIndex)) {\n        throw new Error(\"Expected a known step, but got stepIndex: \".concat(stepIndex, \".\"));\n      }\n\n      return this.wizardSteps[stepIndex];\n    }\n    /**\n     * Finds the index of the step with the given `stepId`.\n     * If no step with the given `stepId` exists, `-1` is returned\n     *\n     * @param stepId The given step id\n     * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n     */\n\n  }, {\n    key: \"getIndexOfStepWithId\",\n    value: function getIndexOfStepWithId(stepId) {\n      return this.wizardSteps.findIndex(function (step) {\n        return step.stepId === stepId;\n      });\n    }\n    /**\n     * Finds the index of the given [[WizardStep]] `step`.\n     * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n     *\n     * @param step The given [[WizardStep]]\n     * @returns The found index of `step` or `-1` if the step is not included in the wizard\n     */\n\n  }, {\n    key: \"getIndexOfStep\",\n    value: function getIndexOfStep(step) {\n      return this.wizardSteps.indexOf(step);\n    }\n    /**\n     * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n     *\n     * @param destinationStep The given destination step\n     * @returns The calculated [[MovingDirection]]\n     */\n\n  }, {\n    key: \"getMovingDirection\",\n    value: function getMovingDirection(destinationStep) {\n      var movingDirection;\n\n      if (destinationStep > this.currentStepIndex) {\n        movingDirection = MovingDirection.Forwards;\n      } else if (destinationStep < this.currentStepIndex) {\n        movingDirection = MovingDirection.Backwards;\n      } else {\n        movingDirection = MovingDirection.Stay;\n      }\n\n      return movingDirection;\n    }\n    /**\n     * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n     *\n     * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n     * Navigation by navigation bar is governed by [[isNavigable]].\n     *\n     * @param destinationIndex The index of the destination step\n     * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n     */\n\n  }, {\n    key: \"canGoToStep\",\n    value: function canGoToStep(destinationIndex) {\n      return this.navigation.canGoToStep(this, destinationIndex);\n    }\n    /**\n     * Tries to transition to the wizard step, as denoted by the given destination index.\n     *\n     * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n     * The [[canGoToStep]] method will be called automatically.\n     *\n     * @param destinationIndex The index of the destination wizard step, which should be entered\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n\n  }, {\n    key: \"goToStep\",\n    value: function goToStep(destinationIndex, preFinalize, postFinalize) {\n      return this.navigation.goToStep(this, destinationIndex, preFinalize, postFinalize);\n    }\n    /**\n     * Tries to transition the wizard to the previous step\n     *\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n\n  }, {\n    key: \"goToPreviousStep\",\n    value: function goToPreviousStep(preFinalize, postFinalize) {\n      return this.navigation.goToStep(this, this.currentStepIndex - 1, preFinalize, postFinalize);\n    }\n    /**\n     * Tries to transition the wizard to the next step\n     *\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n\n  }, {\n    key: \"goToNextStep\",\n    value: function goToNextStep(preFinalize, postFinalize) {\n      return this.navigation.goToStep(this, this.currentStepIndex + 1, preFinalize, postFinalize);\n    }\n    /**\n     * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n     *\n     * @param destinationIndex The index of the destination step\n     * @returns True if the step can be navigated to, false otherwise\n     */\n\n  }, {\n    key: \"isNavigable\",\n    value: function isNavigable(destinationIndex) {\n      return this.navigation.isNavigable(this, destinationIndex);\n    }\n    /**\n     * Resets the state of this wizard.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.navigation.reset(this);\n    }\n  }, {\n    key: \"defaultStepIndex\",\n    get: function get() {\n      // This value can be either:\n      // - the index of a wizard step with a `selected` directive, or\n      // - the default step index, set in the [[WizardComponent]]\n      var foundDefaultStep = this.wizardSteps.find(function (step) {\n        return step.defaultSelected;\n      });\n\n      if (foundDefaultStep) {\n        return this.getIndexOfStep(foundDefaultStep);\n      } else {\n        return this._defaultStepIndex;\n      }\n    },\n    set: function set(defaultStepIndex) {\n      this._defaultStepIndex = defaultStepIndex;\n    }\n    /**\n     * Returns true if this wizard uses a horizontal orientation.\n     * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n     *\n     * @returns True if this wizard uses a horizontal orientation\n     */\n\n  }, {\n    key: \"horizontalOrientation\",\n    get: function get() {\n      return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n    }\n    /**\n     * Returns true if this wizard uses a vertical orientation.\n     * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n     *\n     * @returns True if this wizard uses a vertical orientation\n     */\n\n  }, {\n    key: \"verticalOrientation\",\n    get: function get() {\n      return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n    }\n  }, {\n    key: \"currentStep\",\n    get: function get() {\n      if (this.hasStep(this.currentStepIndex)) {\n        return this.wizardSteps[this.currentStepIndex];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * The completeness of the wizard.\n     * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n     */\n\n  }, {\n    key: \"completed\",\n    get: function get() {\n      return this.wizardSteps.every(function (step) {\n        return step.completed || step.optional;\n      });\n    }\n    /**\n     * An array representation of all wizard steps belonging to this model\n     */\n\n  }, {\n    key: \"wizardSteps\",\n    get: function get() {\n      return this._wizardSteps;\n    }\n  }, {\n    key: \"navigation\",\n    get: function get() {\n      return this._navigation;\n    }\n    /**\n     * Updates the navigation mode for this wizard component\n     *\n     * @param navigation The updated navigation mode\n     */\n    ,\n    set: function set(navigation) {\n      this._navigation = navigation;\n    }\n  }]);\n\n  return WizardComponent;\n}();\n\nWizardComponent.ɵfac = function WizardComponent_Factory(t) {\n  return new (t || WizardComponent)();\n};\n\nWizardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: WizardComponent,\n  selectors: [[\"aw-wizard\"]],\n  contentQueries: function WizardComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStep, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wizardStepsQueryList = _t);\n    }\n  },\n  hostVars: 4,\n  hostBindings: function WizardComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"horizontal\", ctx.horizontalOrientation)(\"vertical\", ctx.verticalOrientation);\n    }\n  },\n  inputs: {\n    navBarLocation: \"navBarLocation\",\n    navBarLayout: \"navBarLayout\",\n    navBarDirection: \"navBarDirection\",\n    disableNavigationBar: \"disableNavigationBar\",\n    defaultStepIndex: \"defaultStepIndex\"\n  },\n  ngContentSelectors: _c0,\n  decls: 4,\n  vars: 6,\n  consts: [[3, \"direction\", \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"], [3, \"direction\", \"ngClass\"]],\n  template: function WizardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, WizardComponent_aw_wizard_navigation_bar_0_Template, 1, 10, \"aw-wizard-navigation-bar\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, WizardComponent_aw_wizard_navigation_bar_3_Template, 1, 10, \"aw-wizard-navigation-bar\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"left\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx.navBarLocation == \"left\" || ctx.navBarLocation == \"right\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"bottom\"));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"bottom\" || ctx.navBarLocation == \"right\");\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, ɵngcc1.NgClass, WizardNavigationBarComponent];\n  },\n  encapsulation: 2\n});\n\n__decorate([ContentChildren(WizardStep, {\n  descendants: true\n}), __metadata(\"design:type\", QueryList)], WizardComponent.prototype, \"wizardStepsQueryList\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], WizardComponent.prototype, \"navBarLocation\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], WizardComponent.prototype, \"navBarLayout\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], WizardComponent.prototype, \"navBarDirection\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], WizardComponent.prototype, \"defaultStepIndex\", null);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], WizardComponent.prototype, \"disableNavigationBar\", void 0);\n\n__decorate([HostBinding('class.horizontal'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [])], WizardComponent.prototype, \"horizontalOrientation\", null);\n\n__decorate([HostBinding('class.vertical'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [])], WizardComponent.prototype, \"verticalOrientation\", null);\n\nWizardComponent = __decorate([__metadata(\"design:paramtypes\", [])], WizardComponent);\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar WizardNavigationBarComponent = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param wizard The state the wizard currently resides in\n   */\n  function WizardNavigationBarComponent(wizard) {\n    _classCallCheck(this, WizardNavigationBarComponent);\n\n    this.wizard = wizard;\n    /**\n     * The direction in which the wizard steps should be shown in the navigation bar.\n     * This value can be either `left-to-right` or `right-to-left`\n     */\n\n    this.direction = 'left-to-right';\n  }\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n\n\n  _createClass(WizardNavigationBarComponent, [{\n    key: \"isCurrent\",\n\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `current`\n     */\n    value: function isCurrent(wizardStep) {\n      return wizardStep.selected;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `editing`\n     */\n\n  }, {\n    key: \"isEditing\",\n    value: function isEditing(wizardStep) {\n      return wizardStep.editing;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `done`\n     */\n\n  }, {\n    key: \"isDone\",\n    value: function isDone(wizardStep) {\n      return wizardStep.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `optional`\n     */\n\n  }, {\n    key: \"isOptional\",\n    value: function isOptional(wizardStep) {\n      return wizardStep.optional;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.\n     *\n     * The `completed` class is only applied to completion steps.\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `completed`\n     */\n\n  }, {\n    key: \"isCompleted\",\n    value: function isCompleted(wizardStep) {\n      return wizardStep instanceof WizardCompletionStep && this.wizard.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n     * A wizard step can be navigated to if:\n     * - the step is currently not selected\n     * - the navigation bar isn't disabled\n     * - the navigation mode allows navigation to the step\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as navigable\n     */\n\n  }, {\n    key: \"isNavigable\",\n    value: function isNavigable(wizardStep) {\n      return !wizardStep.selected && !this.wizard.disableNavigationBar && this.wizard.isNavigable(this.wizard.getIndexOfStep(wizardStep));\n    }\n  }, {\n    key: \"wizardSteps\",\n    get: function get() {\n      switch (this.direction) {\n        case 'right-to-left':\n          return this.wizard.wizardSteps.slice().reverse();\n\n        case 'left-to-right':\n        default:\n          return this.wizard.wizardSteps;\n      }\n    }\n    /**\n     * Returns the number of wizard steps, that need to be displaced in the navigation bar\n     *\n     * @returns The number of wizard steps to be displayed\n     */\n\n  }, {\n    key: \"numberOfWizardSteps\",\n    get: function get() {\n      return this.wizard.wizardSteps.length;\n    }\n  }]);\n\n  return WizardNavigationBarComponent;\n}();\n\nWizardNavigationBarComponent.ɵfac = function WizardNavigationBarComponent_Factory(t) {\n  return new (t || WizardNavigationBarComponent)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\n\nWizardNavigationBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: WizardNavigationBarComponent,\n  selectors: [[\"aw-wizard-navigation-bar\"]],\n  inputs: {\n    direction: \"direction\"\n  },\n  decls: 2,\n  vars: 4,\n  consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"awGoToStep\"], [1, \"label\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"step-indicator\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function WizardNavigationBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ul\");\n      ɵngcc0.ɵɵtemplate(1, WizardNavigationBarComponent_li_1_Template, 8, 17, \"li\", 0);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMapInterpolate1(\"steps-indicator steps-\", ctx.numberOfWizardSteps, \"\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.wizardSteps);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgForOf, ɵngcc1.NgClass, GoToStepDirective, ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgTemplateOutlet];\n  },\n  encapsulation: 2\n});\n\nWizardNavigationBarComponent.ctorParameters = function () {\n  return [{\n    type: WizardComponent\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], WizardNavigationBarComponent.prototype, \"direction\", void 0);\n\nWizardNavigationBarComponent = __decorate([__metadata(\"design:paramtypes\", [WizardComponent])], WizardNavigationBarComponent);\nvar WizardStepComponent_1;\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar WizardStepComponent = WizardStepComponent_1 = /*#__PURE__*/function (_WizardStep2) {\n  _inherits(WizardStepComponent, _WizardStep2);\n\n  var _super4 = _createSuper(WizardStepComponent);\n\n  function WizardStepComponent() {\n    _classCallCheck(this, WizardStepComponent);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return WizardStepComponent;\n}(WizardStep);\n\nWizardStepComponent.ɵfac = function WizardStepComponent_Factory(t) {\n  return ɵWizardStepComponent_BaseFactory(t || WizardStepComponent);\n};\n\nWizardStepComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: WizardStepComponent,\n  selectors: [[\"aw-wizard-step\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(function () {\n      return WizardStepComponent_1;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function WizardStepComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar EnableBackLinksDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  function EnableBackLinksDirective(completionStep) {\n    _classCallCheck(this, EnableBackLinksDirective);\n\n    this.completionStep = completionStep;\n    /**\n     * This EventEmitter is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n\n    this.stepExit = new EventEmitter();\n  }\n  /**\n   * Initialization work\n   */\n\n\n  _createClass(EnableBackLinksDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.completionStep.canExit = true;\n      this.completionStep.stepExit = this.stepExit;\n    }\n  }]);\n\n  return EnableBackLinksDirective;\n}();\n\nEnableBackLinksDirective.ɵfac = function EnableBackLinksDirective_Factory(t) {\n  return new (t || EnableBackLinksDirective)(ɵngcc0.ɵɵdirectiveInject(WizardCompletionStep, 1));\n};\n\nEnableBackLinksDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: EnableBackLinksDirective,\n  selectors: [[\"\", \"awEnableBackLinks\", \"\"]],\n  outputs: {\n    stepExit: \"stepExit\"\n  }\n});\n\nEnableBackLinksDirective.ctorParameters = function () {\n  return [{\n    type: WizardCompletionStep,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\n__decorate([Output(), __metadata(\"design:type\", Object)], EnableBackLinksDirective.prototype, \"stepExit\", void 0);\n\nEnableBackLinksDirective = __decorate([__param(0, Host()), __metadata(\"design:paramtypes\", [WizardCompletionStep])], EnableBackLinksDirective);\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\n\nfunction isStepId(value) {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\n\n\nfunction isStepIndex(value) {\n  return value.hasOwnProperty('stepIndex');\n}\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\n\n\nfunction isStepOffset(value) {\n  return value.hasOwnProperty('stepOffset');\n}\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar GoToStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  function GoToStepDirective(wizard, wizardStep) {\n    _classCallCheck(this, GoToStepDirective);\n\n    this.wizard = wizard;\n    this.wizardStep = wizardStep;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n\n\n  _createClass(GoToStepDirective, [{\n    key: \"onClick\",\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     */\n    value: function onClick() {\n      this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n    }\n  }, {\n    key: \"finalize\",\n    get: function get() {\n      return this.preFinalize;\n    }\n    /**\n     * A convenience name for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    ,\n    set: function set(emitter) {\n      /* istanbul ignore next */\n      this.preFinalize = emitter;\n    }\n    /**\n     * Returns the destination step of this directive as an absolute step index inside the wizard\n     *\n     * @returns The index of the destination step\n     * @throws If `targetStep` is of an unknown type an `Error` is thrown\n     */\n\n  }, {\n    key: \"destinationStep\",\n    get: function get() {\n      var destinationStep;\n\n      if (isStepIndex(this.targetStep)) {\n        destinationStep = this.targetStep.stepIndex;\n      } else if (isStepId(this.targetStep)) {\n        destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);\n      } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n        destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n      } else if (this.targetStep instanceof WizardStep) {\n        destinationStep = this.wizard.getIndexOfStep(this.targetStep);\n      } else {\n        throw new Error(\"Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId\");\n      }\n\n      return destinationStep;\n    }\n  }]);\n\n  return GoToStepDirective;\n}();\n\nGoToStepDirective.ɵfac = function GoToStepDirective_Factory(t) {\n  return new (t || GoToStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent), ɵngcc0.ɵɵdirectiveInject(WizardStep, 8));\n};\n\nGoToStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GoToStepDirective,\n  selectors: [[\"\", \"awGoToStep\", \"\"]],\n  hostBindings: function GoToStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function GoToStepDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  inputs: {\n    targetStep: [\"awGoToStep\", \"targetStep\"]\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\n\nGoToStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardComponent\n  }, {\n    type: WizardStep,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], GoToStepDirective.prototype, \"preFinalize\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], GoToStepDirective.prototype, \"postFinalize\", void 0);\n\n__decorate([Input('awGoToStep'), __metadata(\"design:type\", Object)], GoToStepDirective.prototype, \"targetStep\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter), __metadata(\"design:paramtypes\", [EventEmitter])], GoToStepDirective.prototype, \"finalize\", null);\n\n__decorate([HostListener('click'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GoToStepDirective.prototype, \"onClick\", null);\n\nGoToStepDirective = __decorate([__param(1, Optional()), __metadata(\"design:paramtypes\", [WizardComponent, WizardStep])], GoToStepDirective);\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar NextStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  function NextStepDirective(wizard) {\n    _classCallCheck(this, NextStepDirective);\n\n    this.wizard = wizard;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n\n\n  _createClass(NextStepDirective, [{\n    key: \"onClick\",\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     */\n    value: function onClick() {\n      this.wizard.goToNextStep(this.preFinalize, this.postFinalize);\n    }\n  }, {\n    key: \"finalize\",\n    get: function get() {\n      return this.preFinalize;\n    }\n    /**\n     * A convenience name for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    ,\n    set: function set(emitter) {\n      /* istanbul ignore next */\n      this.preFinalize = emitter;\n    }\n  }]);\n\n  return NextStepDirective;\n}();\n\nNextStepDirective.ɵfac = function NextStepDirective_Factory(t) {\n  return new (t || NextStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\n\nNextStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NextStepDirective,\n  selectors: [[\"\", \"awNextStep\", \"\"]],\n  hostBindings: function NextStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function NextStepDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\n\nNextStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardComponent\n  }];\n};\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], NextStepDirective.prototype, \"preFinalize\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], NextStepDirective.prototype, \"postFinalize\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter), __metadata(\"design:paramtypes\", [EventEmitter])], NextStepDirective.prototype, \"finalize\", null);\n\n__decorate([HostListener('click'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], NextStepDirective.prototype, \"onClick\", null);\n\nNextStepDirective = __decorate([__metadata(\"design:paramtypes\", [WizardComponent])], NextStepDirective);\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar OptionalStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  function OptionalStepDirective(wizardStep) {\n    _classCallCheck(this, OptionalStepDirective);\n\n    this.wizardStep = wizardStep; // tslint:disable-next-line:no-input-rename\n\n    this.optional = true;\n  }\n  /**\n   * Initialization work\n   */\n\n\n  _createClass(OptionalStepDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n      this.wizardStep.optional = this.optional || this.optional === '';\n    }\n  }]);\n\n  return OptionalStepDirective;\n}();\n\nOptionalStepDirective.ɵfac = function OptionalStepDirective_Factory(t) {\n  return new (t || OptionalStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1));\n};\n\nOptionalStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: OptionalStepDirective,\n  selectors: [[\"\", \"awOptionalStep\", \"\"]],\n  inputs: {\n    optional: [\"awOptionalStep\", \"optional\"]\n  }\n});\n\nOptionalStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardStep,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\n__decorate([Input('awOptionalStep'), __metadata(\"design:type\", Object)], OptionalStepDirective.prototype, \"optional\", void 0);\n\nOptionalStepDirective = __decorate([__param(0, Host()), __metadata(\"design:paramtypes\", [WizardStep])], OptionalStepDirective);\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar PreviousStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  function PreviousStepDirective(wizard) {\n    _classCallCheck(this, PreviousStepDirective);\n\n    this.wizard = wizard;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n\n\n  _createClass(PreviousStepDirective, [{\n    key: \"onClick\",\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the previous step\n     */\n    value: function onClick() {\n      this.wizard.goToPreviousStep(this.preFinalize, this.postFinalize);\n    }\n  }, {\n    key: \"finalize\",\n    get: function get() {\n      return this.preFinalize;\n    }\n    /**\n     * A convenience field for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    ,\n    set: function set(emitter) {\n      /* istanbul ignore next */\n      this.preFinalize = emitter;\n    }\n  }]);\n\n  return PreviousStepDirective;\n}();\n\nPreviousStepDirective.ɵfac = function PreviousStepDirective_Factory(t) {\n  return new (t || PreviousStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\n\nPreviousStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: PreviousStepDirective,\n  selectors: [[\"\", \"awPreviousStep\", \"\"]],\n  hostBindings: function PreviousStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function PreviousStepDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\n\nPreviousStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardComponent\n  }];\n};\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], PreviousStepDirective.prototype, \"preFinalize\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], PreviousStepDirective.prototype, \"postFinalize\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter), __metadata(\"design:paramtypes\", [EventEmitter])], PreviousStepDirective.prototype, \"finalize\", null);\n\n__decorate([HostListener('click'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], PreviousStepDirective.prototype, \"onClick\", null);\n\nPreviousStepDirective = __decorate([__metadata(\"design:paramtypes\", [WizardComponent])], PreviousStepDirective);\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar ResetWizardDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   */\n  function ResetWizardDirective(wizard) {\n    _classCallCheck(this, ResetWizardDirective);\n\n    this.wizard = wizard;\n    /**\n     * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n     */\n\n    this.finalize = new EventEmitter();\n  }\n  /**\n   * Resets the wizard\n   */\n\n\n  _createClass(ResetWizardDirective, [{\n    key: \"onClick\",\n    value: function onClick() {\n      // do some optional cleanup work\n      this.finalize.emit(); // reset the wizard to its initial state\n\n      this.wizard.reset();\n    }\n  }]);\n\n  return ResetWizardDirective;\n}();\n\nResetWizardDirective.ɵfac = function ResetWizardDirective_Factory(t) {\n  return new (t || ResetWizardDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\n\nResetWizardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ResetWizardDirective,\n  selectors: [[\"\", \"awResetWizard\", \"\"]],\n  hostBindings: function ResetWizardDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ResetWizardDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  outputs: {\n    finalize: \"finalize\"\n  }\n});\n\nResetWizardDirective.ctorParameters = function () {\n  return [{\n    type: WizardComponent\n  }];\n};\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], ResetWizardDirective.prototype, \"finalize\", void 0);\n\n__decorate([HostListener('click'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ResetWizardDirective.prototype, \"onClick\", null);\n\nResetWizardDirective = __decorate([__metadata(\"design:paramtypes\", [WizardComponent])], ResetWizardDirective);\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar SelectedStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  function SelectedStepDirective(wizardStep) {\n    _classCallCheck(this, SelectedStepDirective);\n\n    this.wizardStep = wizardStep;\n  }\n  /**\n   * Initialization work\n   */\n\n\n  _createClass(SelectedStepDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.wizardStep.defaultSelected = true;\n    }\n  }]);\n\n  return SelectedStepDirective;\n}();\n\nSelectedStepDirective.ɵfac = function SelectedStepDirective_Factory(t) {\n  return new (t || SelectedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1));\n};\n\nSelectedStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SelectedStepDirective,\n  selectors: [[\"\", \"awSelectedStep\", \"\"]]\n});\n\nSelectedStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardStep,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\nSelectedStepDirective = __decorate([__param(0, Host()), __metadata(\"design:paramtypes\", [WizardStep])], SelectedStepDirective);\nvar WizardCompletionStepDirective_1;\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar WizardCompletionStepDirective = WizardCompletionStepDirective_1 = /*#__PURE__*/function (_WizardCompletionStep2) {\n  _inherits(WizardCompletionStepDirective, _WizardCompletionStep2);\n\n  var _super5 = _createSuper(WizardCompletionStepDirective);\n\n  function WizardCompletionStepDirective() {\n    _classCallCheck(this, WizardCompletionStepDirective);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return WizardCompletionStepDirective;\n}(WizardCompletionStep);\n\nWizardCompletionStepDirective.ɵfac = function WizardCompletionStepDirective_Factory(t) {\n  return ɵWizardCompletionStepDirective_BaseFactory(t || WizardCompletionStepDirective);\n};\n\nWizardCompletionStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardCompletionStepDirective,\n  selectors: [[\"\", \"awWizardCompletionStep\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(function () {\n      return WizardCompletionStepDirective_1;\n    })\n  }, {\n    provide: WizardCompletionStep,\n    useExisting: forwardRef(function () {\n      return WizardCompletionStepDirective_1;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar WizardStepDirective_1;\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n\nvar WizardStepDirective = WizardStepDirective_1 = /*#__PURE__*/function (_WizardStep3) {\n  _inherits(WizardStepDirective, _WizardStep3);\n\n  var _super6 = _createSuper(WizardStepDirective);\n\n  function WizardStepDirective() {\n    _classCallCheck(this, WizardStepDirective);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return WizardStepDirective;\n}(WizardStep);\n\nWizardStepDirective.ɵfac = function WizardStepDirective_Factory(t) {\n  return ɵWizardStepDirective_BaseFactory(t || WizardStepDirective);\n};\n\nWizardStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardStepDirective,\n  selectors: [[\"\", \"awWizardStep\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(function () {\n      return WizardStepDirective_1;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/**\n * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.\n *\n * There are several usage options:\n *\n * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ```\n *\n * ### Option 2. Pass in a custom navigation mode\n *\n * ```typescript\n * import { BaseNavigationMode } from 'angular-archwizard'\n *\n * class CustomNavigationMode extends BaseNavigationMode {\n *\n *   // ...\n * }\n * ```\n *\n * ```typescript\n * @Component({\n *   // ...\n * })\n * class MyComponent {\n *\n *   navigationMode = new CustomNavigationMode();\n * }\n * ```\n *\n * ```html\n * <aw-wizard [awNavigationMode]=\"navigationMode\">...</aw-wizard>\n * ```\n *\n * ### Additional Notes\n *\n * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs\n *\n * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without\n *   any inputs or parameters causes the wizard to use the default \"strict\" navigation mode equivalent to\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ````\n */\n\nvar NavigationModeDirective = /*#__PURE__*/function () {\n  function NavigationModeDirective(wizard) {\n    _classCallCheck(this, NavigationModeDirective);\n\n    this.wizard = wizard;\n  }\n\n  _createClass(NavigationModeDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.wizard.navigation = this.getNavigationMode();\n    }\n  }, {\n    key: \"getNavigationMode\",\n    value: function getNavigationMode() {\n      if (this.awNavigationMode) {\n        return this.awNavigationMode;\n      }\n\n      return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);\n    }\n  }]);\n\n  return NavigationModeDirective;\n}();\n\nNavigationModeDirective.ɵfac = function NavigationModeDirective_Factory(t) {\n  return new (t || NavigationModeDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\n\nNavigationModeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NavigationModeDirective,\n  selectors: [[\"\", \"awNavigationMode\", \"\"]],\n  inputs: {\n    awNavigationMode: \"awNavigationMode\",\n    navigateBackward: \"navigateBackward\",\n    navigateForward: \"navigateForward\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nNavigationModeDirective.ctorParameters = function () {\n  return [{\n    type: WizardComponent\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], NavigationModeDirective.prototype, \"awNavigationMode\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], NavigationModeDirective.prototype, \"navigateBackward\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], NavigationModeDirective.prototype, \"navigateForward\", void 0);\n\nNavigationModeDirective = __decorate([__metadata(\"design:paramtypes\", [WizardComponent])], NavigationModeDirective);\n/**\n * The `awCompletedStep` directive can be used to make a wizard step initially completed.\n *\n * Initially completed steps are shown as completed when the wizard is presented to the user.\n *\n * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awCompletedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * An optional boolean condition can be specified:\n *\n * ```html\n * <aw-wizard-step [awCompletedStep]=\"shouldBeCompleted\">\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"First step\" [awCompletedStep]=\"firstStepPrefilled\">\n *     ...\n * </aw-wizard-step>\n * ```\n */\n\nvar CompletedStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]\n   */\n  function CompletedStepDirective(wizardStep) {\n    _classCallCheck(this, CompletedStepDirective);\n\n    this.wizardStep = wizardStep; // tslint:disable-next-line:no-input-rename\n\n    this.initiallyCompleted = true;\n  }\n  /**\n   * Initialization work\n   */\n\n\n  _createClass(CompletedStepDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n      this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted === '';\n    }\n  }]);\n\n  return CompletedStepDirective;\n}();\n\nCompletedStepDirective.ɵfac = function CompletedStepDirective_Factory(t) {\n  return new (t || CompletedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1));\n};\n\nCompletedStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CompletedStepDirective,\n  selectors: [[\"\", \"awCompletedStep\", \"\"]],\n  inputs: {\n    initiallyCompleted: [\"awCompletedStep\", \"initiallyCompleted\"]\n  }\n});\n\nCompletedStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardStep,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\n__decorate([Input('awCompletedStep'), __metadata(\"design:type\", Object)], CompletedStepDirective.prototype, \"initiallyCompleted\", void 0);\n\nCompletedStepDirective = __decorate([__param(0, Host()), __metadata(\"design:paramtypes\", [WizardStep])], CompletedStepDirective);\nvar ArchwizardModule_1;\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n\nvar ArchwizardModule = ArchwizardModule_1 = /*#__PURE__*/function () {\n  function ArchwizardModule() {\n    _classCallCheck(this, ArchwizardModule);\n  }\n\n  _createClass(ArchwizardModule, null, [{\n    key: \"forRoot\",\n\n    /* istanbul ignore next */\n    value: function forRoot() {\n      return {\n        ngModule: ArchwizardModule_1,\n        providers: [// Nothing here yet\n        ]\n      };\n    }\n  }]);\n\n  return ArchwizardModule;\n}();\n\nArchwizardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ArchwizardModule\n});\nArchwizardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ArchwizardModule_Factory(t) {\n    return new (t || ArchwizardModule)();\n  },\n  imports: [[CommonModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardStepSymbolDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardStepTitleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardStep, [{\n    type: Directive\n  }], function () {\n    return [];\n  }, {\n    navigationSymbol: [{\n      type: Input\n    }],\n    canEnter: [{\n      type: Input\n    }],\n    canExit: [{\n      type: Input\n    }],\n    stepEnter: [{\n      type: Output\n    }],\n    stepExit: [{\n      type: Output\n    }],\n    hidden: [{\n      type: HostBinding,\n      args: ['hidden']\n    }],\n    stepTitleTemplate: [{\n      type: ContentChild,\n      args: [WizardStepTitleDirective]\n    }],\n    stepSymbolTemplate: [{\n      type: ContentChild,\n      args: [WizardStepSymbolDirective]\n    }],\n    stepId: [{\n      type: Input\n    }],\n    stepTitle: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ɵWizardCompletionStep_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStep);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardCompletionStep, [{\n    type: Directive\n  }], null, null);\n})();\n\nvar ɵWizardCompletionStepComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardCompletionStepComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-completion-step',\n      template: \"<ng-content></ng-content>\\n\",\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(function () {\n          return WizardCompletionStepComponent_1;\n        })\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(function () {\n          return WizardCompletionStepComponent_1;\n        })\n      }]\n    }]\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard',\n      template: \"<aw-wizard-navigation-bar\\n  [direction]=\\\"navBarDirection\\\"\\n  *ngIf=\\\"navBarLocation == 'top' || navBarLocation == 'left'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation == 'left',\\n    'horizontal': navBarLocation == 'top',\\n    'small': navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\\n<div [ngClass]=\\\"{\\n  'wizard-steps': true,\\n  'vertical': navBarLocation == 'left' || navBarLocation == 'right',\\n  'horizontal': navBarLocation == 'top' || navBarLocation == 'bottom'\\n}\\\">\\n  <ng-content></ng-content>\\n</div>\\n\\n<aw-wizard-navigation-bar\\n  [direction]=\\\"navBarDirection\\\"\\n  *ngIf=\\\"navBarLocation == 'bottom' || navBarLocation == 'right'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation == 'right',\\n    'horizontal': navBarLocation == 'bottom',\\n    'small': navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\"\n    }]\n  }], function () {\n    return [];\n  }, {\n    navBarLocation: [{\n      type: Input\n    }],\n    navBarLayout: [{\n      type: Input\n    }],\n    navBarDirection: [{\n      type: Input\n    }],\n    disableNavigationBar: [{\n      type: Input\n    }],\n    defaultStepIndex: [{\n      type: Input\n    }],\n    horizontalOrientation: [{\n      type: HostBinding,\n      args: ['class.horizontal']\n    }],\n    verticalOrientation: [{\n      type: HostBinding,\n      args: ['class.vertical']\n    }],\n    wizardStepsQueryList: [{\n      type: ContentChildren,\n      args: [WizardStep, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardNavigationBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-navigation-bar',\n      template: \"<ul class=\\\"steps-indicator steps-{{numberOfWizardSteps}}\\\">\\n  <li [attr.id]=\\\"step.stepId\\\" *ngFor=\\\"let step of wizardSteps\\\" [ngClass]=\\\"{\\n        'current': isCurrent(step),\\n        'editing': isEditing(step),\\n        'done': isDone(step),\\n        'optional': isOptional(step),\\n        'completed': isCompleted(step),\\n        'navigable': isNavigable(step)\\n  }\\\">\\n    <a [awGoToStep]=\\\"step\\\">\\n      <div class=\\\"label\\\">\\n        <ng-container *ngIf=\\\"step.stepTitleTemplate\\\" [ngTemplateOutlet]=\\\"step.stepTitleTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepTitleTemplate\\\">{{step.stepTitle}}</ng-container>\\n      </div>\\n      <div class=\\\"step-indicator\\\"\\n        [ngStyle]=\\\"{ 'font-family': step.stepSymbolTemplate ? '' : step.navigationSymbol.fontFamily }\\\">\\n        <ng-container *ngIf=\\\"step.stepSymbolTemplate\\\" [ngTemplateOutlet]=\\\"step.stepSymbolTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepSymbolTemplate\\\">{{step.navigationSymbol.symbol}}</ng-container>\\n      </div>\\n    </a>\\n  </li>\\n</ul>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    direction: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ɵWizardStepComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardStepComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardStepComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-step',\n      template: \"<ng-content></ng-content>\\n\",\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(function () {\n          return WizardStepComponent_1;\n        })\n      }]\n    }]\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(EnableBackLinksDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awEnableBackLinks]'\n    }]\n  }], function () {\n    return [{\n      type: WizardCompletionStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    stepExit: [{\n      type: Output\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GoToStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awGoToStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }, {\n      type: WizardStep,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    targetStep: [{\n      type: Input,\n      args: ['awGoToStep']\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NextStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awNextStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(OptionalStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awOptionalStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    optional: [{\n      type: Input,\n      args: ['awOptionalStep']\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PreviousStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awPreviousStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ResetWizardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awResetWizard]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    finalize: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SelectedStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awSelectedStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, null);\n})();\n\nvar ɵWizardCompletionStepDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepDirective);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardCompletionStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awWizardCompletionStep]',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(function () {\n          return WizardCompletionStepDirective_1;\n        })\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(function () {\n          return WizardCompletionStepDirective_1;\n        })\n      }]\n    }]\n  }], null, null);\n})();\n\nvar ɵWizardStepDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardStepDirective);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(WizardStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awWizardStep]',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(function () {\n          return WizardStepDirective_1;\n        })\n      }]\n    }]\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NavigationModeDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awNavigationMode]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    awNavigationMode: [{\n      type: Input\n    }],\n    navigateBackward: [{\n      type: Input\n    }],\n    navigateForward: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CompletedStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awCompletedStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    initiallyCompleted: [{\n      type: Input,\n      args: ['awCompletedStep']\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ArchwizardModule, {\n    declarations: function declarations() {\n      return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ArchwizardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective],\n      imports: [CommonModule],\n      exports: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective]\n    }]\n  }], null, null);\n})(); // export the components\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ArchwizardModule, BaseNavigationMode, CompletedStepDirective, ConfigurableNavigationMode, EnableBackLinksDirective, GoToStepDirective, MovingDirection, NavigationModeDirective, NextStepDirective, OptionalStepDirective, PreviousStepDirective, ResetWizardDirective, SelectedStepDirective, WizardCompletionStep, WizardCompletionStepComponent, WizardCompletionStepDirective, WizardComponent, WizardNavigationBarComponent, WizardStep, WizardStepComponent, WizardStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, isStepId, isStepIndex, isStepOffset };","map":{"version":3,"sources":["ng:/angular-archwizard/lib/directives/wizard-step-symbol.directive.ts","ng:/angular-archwizard/lib/directives/wizard-step-title.directive.ts","ng:/angular-archwizard/lib/util/wizard-step.interface.ts","ng:/angular-archwizard/lib/util/wizard-completion-step.interface.ts","ng:/angular-archwizard/lib/components/wizard-completion-step.component.ts","ng:/angular-archwizard/lib/util/moving-direction.enum.ts","ng:/angular-archwizard/lib/navigation/base-navigation-mode.interface.ts","ng:/angular-archwizard/lib/navigation/configurable-navigation-mode.ts","ng:/angular-archwizard/lib/components/wizard.component.ts","ng:/angular-archwizard/lib/components/wizard-navigation-bar.component.ts","ng:/angular-archwizard/lib/components/wizard-step.component.ts","ng:/angular-archwizard/lib/directives/enable-back-links.directive.ts","ng:/angular-archwizard/lib/util/step-id.interface.ts","ng:/angular-archwizard/lib/util/step-index.interface.ts","ng:/angular-archwizard/lib/util/step-offset.interface.ts","ng:/angular-archwizard/lib/directives/go-to-step.directive.ts","ng:/angular-archwizard/lib/directives/next-step.directive.ts","ng:/angular-archwizard/lib/directives/optional-step.directive.ts","ng:/angular-archwizard/lib/directives/previous-step.directive.ts","ng:/angular-archwizard/lib/directives/reset-wizard.directive.ts","ng:/angular-archwizard/lib/directives/selected-step.directive.ts","ng:/angular-archwizard/lib/directives/wizard-completion-step.directive.ts","ng:/angular-archwizard/lib/directives/wizard-step.directive.ts","ng:/angular-archwizard/lib/directives/navigation-mode.directive.ts","ng:/angular-archwizard/lib/directives/completed-step.directive.ts","ng:/angular-archwizard/lib/archwizard.module.ts","ng:/angular-archwizard/index.ts","ng:/angular-archwizard/angular-archwizard.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\n@Directive({\n  selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n})\nexport class WizardStepSymbolDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) {\n  }\n}\n","import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n})\nexport class WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) {\n  }\n}\n","import { ContentChild, EventEmitter, HostBinding, Input, Output, Directive } from '@angular/core';\nimport {WizardStepSymbolDirective} from '../directives/wizard-step-symbol.directive';\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\nimport {MovingDirection} from './moving-direction.enum';\nimport {NavigationSymbol} from './navigation-symbol.interface';\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\n@Directive()\nexport abstract class WizardStep {\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is then shown inside the navigation bar.\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\n   */\n  @ContentChild(WizardStepTitleDirective)\n  public stepTitleTemplate: WizardStepTitleDirective;\n\n  /**\n   * A step symbol property that, if defined, overrides `navigationSymbol`.\n   * Allows to display arbitrary content as a step symbol instead of plain text.\n   */\n  @ContentChild(WizardStepSymbolDirective)\n  public stepSymbolTemplate: WizardStepSymbolDirective;\n\n  /**\n   * A step id, unique to the step\n   */\n  @Input()\n  public stepId: string;\n\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n   */\n  @Input()\n  public stepTitle: string;\n\n  /**\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n   * Takes effect when `stepSymbolTemplate` is not defined or null.\n   */\n  @Input()\n  public navigationSymbol: NavigationSymbol = {symbol: ''};\n\n  /**\n   * A boolean describing if the wizard step is currently selected\n   */\n  public selected = false;\n\n  /**\n   * A boolean describing if the wizard step has been completed\n   */\n  public completed = false;\n\n  /**\n   * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n   *\n   * Users will typically use `CompletedStepDirective` to set this flag\n   */\n  public initiallyCompleted = false;\n\n  /**\n   * A boolean describing if the wizard step is being edited after being competed\n   *\n   * This flag can only be true when `selected` is true.\n   */\n  public editing = false;\n\n  /**\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n   */\n  public defaultSelected = false;\n\n  /**\n   * A boolean describing if the wizard step is an optional step\n   */\n  public optional = false;\n\n  /**\n   * A function or boolean deciding, if this step can be entered\n   */\n  @Input()\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * A function or boolean deciding, if this step can be exited\n   */\n  @Input()\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * This [[EventEmitter]] is called when the step is entered.\n   * The bound method should be used to do initialization work.\n   */\n  @Output()\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * This [[EventEmitter]] is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * Returns true if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  @HostBinding('hidden')\n  public get hidden(): boolean {\n    return !this.selected;\n  }\n\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\n                                     ((direction: MovingDirection) => Promise<boolean>) |\n                                     boolean,\n                                   direction: MovingDirection): Promise<boolean> {\n    if (typeof(condition) === typeof(true)) {\n      return Promise.resolve(condition as boolean);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  public enter(direction: MovingDirection): void {\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  public exit(direction: MovingDirection) {\n    this.stepExit.emit(direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\n","import {EventEmitter, Directive} from '@angular/core';\nimport {WizardStep} from './wizard-step.interface';\nimport {MovingDirection} from './moving-direction.enum';\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\n@Directive()\nexport abstract class WizardCompletionStep extends WizardStep {\n  /**\n   * @inheritDoc\n   */\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * @inheritDoc\n   */\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\n\n  /**\n   * @inheritDoc\n   */\n  public enter(direction: MovingDirection): void {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public exit(direction: MovingDirection): void {\n    // set this completion step as incomplete (unless it happens to be initiallyCompleted)\n    this.completed = this.initiallyCompleted;\n    this.stepExit.emit(direction);\n  }\n}\n","import {Component, forwardRef} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-completion-step',\n  templateUrl: 'wizard-completion-step.component.html',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\n  ]\n})\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\n}\n","/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\nexport enum MovingDirection {\n  /**\n   * A forward step transition\n   */\n  Forwards,\n  /**\n   * A backward step transition\n   */\n  Backwards,\n  /**\n   * No step transition was done\n   */\n  Stay\n}\n","import {EventEmitter} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * Base implementation of [[NavigationMode]]\n *\n * Note: Built-in [[NavigationMode]] classes should be stateless, allowing the library user to easily create\n * an instance of a particular [[NavigationMode]] class and pass it to `<aw-wizard [navigationMode]=\"...\">`.\n *\n * @author Marc Arndt\n */\nexport abstract class BaseNavigationMode implements NavigationMode {\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * In this implementation, a destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - the destination step can be entered in the direction from the current step\n   *\n   * Subclasses can impose additional restrictions, see [[canTransitionToStep]].\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  public canGoToStep(wizard: WizardComponent, destinationIndex: number): Promise<boolean> {\n    const hasStep = wizard.hasStep(destinationIndex);\n\n    const movingDirection = wizard.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous && wizard.currentStep.canExitStep(movingDirection);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous && wizard.getStepAtIndex(destinationIndex).canEnterStep(movingDirection);\n    };\n\n    const canTransitionToStep = (previous: boolean) => {\n      return previous && this.canTransitionToStep(wizard, destinationIndex);\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canTransitionToStep)\n      // Apply user-defined checks at the end.  They can involve user interaction\n      // which is better to be avoided if navigation mode does not actually allow the transition\n      // (`canTransitionToStep` returns `false`).\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep);\n  }\n\n  /**\n   * Imposes additional restrictions for `canGoToStep` in current navigation mode.\n   *\n   * The base implementation allows transition iff the given step is navigable from the navigation bar (see `isNavigable`).\n   * However, in some navigation modes `canTransitionToStep` can be more relaxed to allow navigation to certain steps\n   * by previous/next buttons, but not using the navigation bar.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  protected canTransitionToStep(wizard: WizardComponent, destinationIndex: number): boolean {\n    return this.isNavigable(wizard, destinationIndex);\n  }\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToStep(\n    wizard: WizardComponent,\n    destinationIndex: number,\n    preFinalize?: EventEmitter<void>,\n    postFinalize?: EventEmitter<void>): void {\n\n    this.canGoToStep(wizard, destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = wizard.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        wizard.currentStep.completed = true;\n        wizard.currentStep.exit(movingDirection);\n        wizard.currentStep.editing = false;\n        wizard.currentStep.selected = false;\n\n        this.transition(wizard, destinationIndex);\n\n        // remember if the next step is already completed before entering it to properly set `editing` flag\n        const wasCompleted = wizard.completed || wizard.currentStep.completed;\n\n        // go to next step\n        wizard.currentStep.enter(movingDirection);\n        wizard.currentStep.selected = true;\n        if (wasCompleted) {\n          wizard.currentStep.editing = true;\n        }\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        wizard.currentStep.exit(MovingDirection.Stay);\n        wizard.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  /**\n   * Transitions the wizard to the given step index.\n   *\n   * Can perform additional actions in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step\n   */\n  protected transition(wizard: WizardComponent, destinationIndex: number): void {\n    wizard.currentStepIndex = destinationIndex;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public abstract isNavigable(WizardComponent: WizardComponent, destinationIndex: number): boolean;\n\n  /**\n   * Resets the state of this wizard.\n   *\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete.\n   *\n   * @param wizard The wizard component to operate on\n   */\n  public reset(wizard: WizardComponent): void {\n    this.ensureCanReset(wizard);\n\n    // reset the step internal state\n    wizard.wizardSteps.forEach(step => {\n      step.completed = step.initiallyCompleted;\n      step.selected = false;\n      step.editing = false;\n    });\n\n    // set the first step as the current step\n    wizard.currentStepIndex = wizard.defaultStepIndex;\n    wizard.currentStep.selected = true;\n    wizard.currentStep.enter(MovingDirection.Forwards);\n  }\n\n  /**\n   * Checks if wizard configuration allows to perform reset.\n   *\n   * A check failure is indicated by throwing an `Error` with the message discribing the discovered misconfiguration issue.\n   *\n   * Can include additional checks in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @throws An `Error` is thrown, if a micconfiguration issue is discovered.\n   */\n  protected ensureCanReset(wizard: WizardComponent): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!wizard.hasStep(wizard.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${wizard.defaultStepIndex}`);\n    }\n  }\n}\n","import {BaseNavigationMode} from './base-navigation-mode.interface';\nimport {WizardComponent} from '../components/wizard.component';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The default navigation mode used by [[WizardComponent]] and [[NavigationModeDirective]].\n *\n * It is parameterized with two navigation policies passed to constructor:\n *\n * - [[navigateBackward]] policy controls whether wizard steps before the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"deny\"`\n *\n * - [[navigateForward]] policy controls whether wizard steps after the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - `\"visited\"` -- a step is navigable iff it was already visited before\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"allow\"`\n */\nexport class ConfigurableNavigationMode extends BaseNavigationMode {\n\n  /**\n   * Constructor\n   *\n   * @param navigateBackward Controls whether wizard steps before the current step are navigable\n   * @param navigateForward Controls whether wizard steps before the current step are navigable\n   */\n  constructor(\n    private navigateBackward: 'allow'|'deny'|null = null,\n    private navigateForward: 'allow'|'deny'|'visited'|null = null,\n  ) {\n    super();\n    this.navigateBackward = this.navigateBackward || 'allow';\n    this.navigateForward = this.navigateForward || 'deny';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected canTransitionToStep(wizard: WizardComponent, destinationIndex: number): boolean {\n    // if the destination step can be navigated to using the navigation bar,\n    // it should be accessible with [goToStep] as well\n    if (this.isNavigable(wizard, destinationIndex)) {\n      return true;\n    }\n\n    // navigation with [goToStep] is permitted if all previous steps\n    // to the destination step have been completed or are optional\n    return wizard.wizardSteps\n        .filter((step, index) => index < destinationIndex && index !== wizard.currentStepIndex)\n        .every(step => step.completed || step.optional);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected transition(wizard: WizardComponent, destinationIndex: number): void {\n    if (this.navigateForward === 'deny') {\n      // set all steps after the destination step to incomplete\n      wizard.wizardSteps\n        .filter((step, index) => wizard.currentStepIndex > destinationIndex && index > destinationIndex)\n        .forEach(step => step.completed = false);\n    }\n\n    super.transition(wizard, destinationIndex);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isNavigable(wizard: WizardComponent, destinationIndex: number): boolean {\n    // Check if the destination step can be navigated to\n    const destinationStep = wizard.getStepAtIndex(destinationIndex);\n    if (destinationStep instanceof WizardCompletionStep) {\n      // A completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      const previousStepsCompleted = wizard.wizardSteps\n        .filter((step, index) => index < destinationIndex)\n        .every(step => step.completed || step.optional || step.selected);\n      if (!previousStepsCompleted) {\n        return false;\n      }\n    }\n\n    // Apply navigation pocicies\n    if (destinationIndex < wizard.currentStepIndex) {\n      // If the destination step is before current, apply the `navigateBackward` policy\n      switch (this.navigateBackward) {\n        case 'allow': return true;\n        case 'deny': return false;\n        default:\n          throw new Error(`Invalid value for navigateBackward: ${this.navigateBackward}`);\n      }\n    } else if (destinationIndex > wizard.currentStepIndex) {\n      // If the destination step is after current, apply the `navigateForward` policy\n      switch (this.navigateForward) {\n        case 'allow': return true;\n        case 'deny': return false;\n        case 'visited': return destinationStep.completed;\n        default:\n          throw new Error(`Invalid value for navigateForward: ${this.navigateForward}`);\n      }\n    } else {\n      // Re-entering the current step is not allowed\n      return false;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected ensureCanReset(wizard: WizardComponent): void {\n    super.ensureCanReset(wizard);\n\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultWizardStep = wizard.getStepAtIndex(wizard.defaultStepIndex);\n    const defaultCompletionStep = defaultWizardStep instanceof WizardCompletionStep;\n    if (defaultCompletionStep && wizard.wizardSteps.length !== 1) {\n      throw new Error(`The default step index ${wizard.defaultStepIndex} references a completion step`);\n    }\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  QueryList,\n  EventEmitter,\n} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {ConfigurableNavigationMode} from '../navigation/configurable-navigation-mode';\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard',\n  templateUrl: 'wizard.component.html',\n})\nexport class WizardComponent implements AfterContentInit {\n  /**\n   * A QueryList containing all [[WizardStep]]s inside this wizard\n   */\n  @ContentChildren(WizardStep, { descendants: true })\n  public wizardStepsQueryList: QueryList<WizardStep>;\n\n  /**\n   * The location of the navigation bar inside the wizard.\n   * This location can be either top, bottom, left or right\n   */\n  @Input()\n  public navBarLocation = 'top';\n\n  /**\n   * The layout of the navigation bar inside the wizard.\n   * The layout can be either small, large-filled, large-empty or large-symbols\n   */\n  @Input()\n  public navBarLayout = 'small';\n\n  /**\n   * The direction in which the steps inside the navigation bar should be shown.\n   * The direction can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public navBarDirection = 'left-to-right';\n\n  /**\n   * The initially selected step, represented by its index\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   */\n  @Input()\n  public get defaultStepIndex(): number {\n    // This value can be either:\n    // - the index of a wizard step with a `selected` directive, or\n    // - the default step index, set in the [[WizardComponent]]\n\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  }\n  public set defaultStepIndex(defaultStepIndex: number) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n  private _defaultStepIndex = 0;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  @Input()\n  public disableNavigationBar = false;\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   *\n   * For outside access, use the [[navigation]] getter.\n   */\n  private _navigation: NavigationMode = new ConfigurableNavigationMode();\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   *\n   * For outside access, use the [[wizardSteps]] getter.\n   */\n  private _wizardSteps: WizardStep[] = [];\n\n  /**\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\n   * If this wizard contains no steps, currentStepIndex is -1\n   *\n   * Note: Do not modify this field directly.  Instead, use navigation methods:\n   * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n   */\n  public currentStepIndex = -1;\n\n  /**\n   * Constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  @HostBinding('class.horizontal')\n  public get horizontalOrientation(): boolean {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  @HostBinding('class.vertical')\n  public get verticalOrientation(): boolean {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngAfterContentInit(): void {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardStepsQueryList.changes.subscribe(changedWizardSteps => {\n      this.updateWizardSteps(changedWizardSteps.toArray());\n    });\n\n    // initialize the model\n    this.updateWizardSteps(this.wizardStepsQueryList.toArray());\n\n    // finally reset the whole wizard component\n    setTimeout(() => this.reset());\n  }\n\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  public get currentStep(): WizardStep {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  public get completed(): boolean {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  public get wizardSteps(): WizardStep[] {\n    return this._wizardSteps;\n  }\n\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param wizardSteps The updated wizard steps\n   */\n  private updateWizardSteps(wizardSteps: WizardStep[]): void {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = wizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n\n    this._wizardSteps = wizardSteps;\n  }\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  public get navigation(): NavigationMode {\n    return this._navigation;\n  }\n\n  /**\n   * Updates the navigation mode for this wizard component\n   *\n   * @param navigation The updated navigation mode\n   */\n  public set navigation(navigation: NavigationMode) {\n    this._navigation = navigation;\n  }\n\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  public hasStep(stepIndex: number): boolean {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  public hasPreviousStep(): boolean {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  public hasNextStep(): boolean {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  public isLastStep(): boolean {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  public getStepAtIndex(stepIndex: number): WizardStep {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n\n    return this.wizardSteps[stepIndex];\n  }\n\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  public getIndexOfStepWithId(stepId: string): number {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  public getIndexOfStep(step: WizardStep): number {\n    return this.wizardSteps.indexOf(step);\n  }\n\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  public getMovingDirection(destinationStep: number): MovingDirection {\n    let movingDirection: MovingDirection;\n\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n\n    return movingDirection;\n  }\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  public canGoToStep(destinationIndex: number): Promise<boolean> {\n    return this.navigation.canGoToStep(this, destinationIndex);\n  }\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n   * The [[canGoToStep]] method will be called automatically.\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, destinationIndex, preFinalize, postFinalize);\n  }\n\n  /**\n   * Tries to transition the wizard to the previous step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, this.currentStepIndex - 1, preFinalize, postFinalize);\n  }\n\n  /**\n   * Tries to transition the wizard to the next step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, this.currentStepIndex + 1, preFinalize, postFinalize);\n  }\n\n  /**\n   * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  public isNavigable(destinationIndex: number): boolean {\n    return this.navigation.isNavigable(this, destinationIndex);\n  }\n\n  /**\n   * Resets the state of this wizard.\n   */\n  public reset(): void {\n    this.navigation.reset(this);\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardComponent} from './wizard.component';\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-navigation-bar',\n  templateUrl: 'wizard-navigation-bar.component.html',\n})\nexport class WizardNavigationBarComponent {\n  /**\n   * The direction in which the wizard steps should be shown in the navigation bar.\n   * This value can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public direction = 'left-to-right';\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state the wizard currently resides in\n   */\n  constructor(public wizard: WizardComponent) {\n  }\n\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps(): Array<WizardStep> {\n    switch (this.direction) {\n      case 'right-to-left':\n        return this.wizard.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizard.wizardSteps;\n    }\n  }\n\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps(): number {\n    return this.wizard.wizardSteps.length;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `current`\n   */\n  public isCurrent(wizardStep: WizardStep): boolean {\n    return wizardStep.selected;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `editing`\n   */\n  public isEditing(wizardStep: WizardStep): boolean {\n    return wizardStep.editing;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `done`\n   */\n  public isDone(wizardStep: WizardStep): boolean {\n    return wizardStep.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `optional`\n   */\n  public isOptional(wizardStep: WizardStep): boolean {\n    return wizardStep.optional;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.\n   *\n   * The `completed` class is only applied to completion steps.\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `completed`\n   */\n  public isCompleted(wizardStep: WizardStep): boolean {\n    return wizardStep instanceof WizardCompletionStep && this.wizard.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  public isNavigable(wizardStep: WizardStep): boolean {\n    return !wizardStep.selected && !this.wizard.disableNavigationBar &&\n      this.wizard.isNavigable(this.wizard.getIndexOfStep(wizardStep));\n  }\n}\n","import {Component, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-step',\n  templateUrl: 'wizard-step.component.html',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\n  ]\n})\nexport class WizardStepComponent extends WizardStep {\n}\n","import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awEnableBackLinks]'\n})\nexport class EnableBackLinksDirective implements OnInit {\n  /**\n   * This EventEmitter is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(@Host() private completionStep: WizardCompletionStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\n","import {WizardStep} from './wizard-step.interface';\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n */\nexport interface StepId {\n  /**\n   * The id of the destination step\n   */\n  stepId: string;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nexport function isStepId(value: any): value is StepId {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n","/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n */\nexport interface StepIndex {\n  /**\n   * The index of the destination step\n   */\n  stepIndex: number;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nexport function isStepIndex(value: any): value is StepIndex {\n  return value.hasOwnProperty('stepIndex');\n}\n","/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n */\nexport interface StepOffset {\n  /**\n   * The offset to the destination step\n   */\n  stepOffset: number;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nexport function isStepOffset(value: any): value is StepOffset {\n  return value.hasOwnProperty('stepOffset');\n}\n","import {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {isStepId, StepId} from '../util/step-id.interface';\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awGoToStep]'\n})\nexport class GoToStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n  /**\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\n   * or a step index as a number or string\n   */\n    // tslint:disable-next-line:no-input-rename\n  @Input('awGoToStep')\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\n\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(private wizard: WizardComponent, @Optional() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  public get destinationStep(): number {\n    let destinationStep: number;\n\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizard.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n\n    return destinationStep;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  @HostListener('click')\n  public onClick(): void {\n    this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awNextStep]'\n})\nexport class NextStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  @HostListener('click')\n  public onClick(): void {\n    this.wizard.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, Host, Input, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awOptionalStep]'\n})\nexport class OptionalStepDirective implements OnInit {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('awOptionalStep')\n  public optional = true;\n\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n    this.wizardStep.optional = this.optional || this.optional as any === '';\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awPreviousStep]'\n})\nexport class PreviousStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  @HostListener('click')\n  public onClick(): void {\n    this.wizard.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awResetWizard]'\n})\nexport class ResetWizardDirective {\n  /**\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n   */\n  @Output()\n  public finalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * Resets the wizard\n   */\n  @HostListener('click')\n  public onClick(): void {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.wizard.reset();\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awSelectedStep]'\n})\nexport class SelectedStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    this.wizardStep.defaultSelected = true;\n  }\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardCompletionStep]',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective)}\n  ]\n})\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardStep]',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective)}\n  ]\n})\nexport class WizardStepDirective extends WizardStep {\n}\n","import {Directive, Input, OnChanges, SimpleChanges} from '@angular/core';\n\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {ConfigurableNavigationMode} from '../navigation/configurable-navigation-mode';\nimport {WizardComponent} from '../components/wizard.component';\n\n\n/**\n * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.\n *\n * There are several usage options:\n *\n * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ```\n *\n * ### Option 2. Pass in a custom navigation mode\n *\n * ```typescript\n * import { BaseNavigationMode } from 'angular-archwizard'\n *\n * class CustomNavigationMode extends BaseNavigationMode {\n *\n *   // ...\n * }\n * ```\n *\n * ```typescript\n * @Component({\n *   // ...\n * })\n * class MyComponent {\n *\n *   navigationMode = new CustomNavigationMode();\n * }\n * ```\n *\n * ```html\n * <aw-wizard [awNavigationMode]=\"navigationMode\">...</aw-wizard>\n * ```\n *\n * ### Additional Notes\n *\n * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs\n *\n * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without\n *   any inputs or parameters causes the wizard to use the default \"strict\" navigation mode equivalent to\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ````\n */\n@Directive({\n  selector: '[awNavigationMode]',\n})\nexport class NavigationModeDirective implements OnChanges {\n\n  /**\n   * Custom navigation mode instance (optional).\n   */\n  @Input()\n  public awNavigationMode: NavigationMode|null;\n\n  /**\n   * A parameter for the default navigation mode.  Controls whether wizard steps before the current step are navigable:\n   *\n   * - `navigateBackward=\"deny\"` -- the steps are not navigable\n   * - `navigateBackward=\"allow\"` -- the steps are navigable\n   */\n  @Input()\n  public navigateBackward: 'allow'|'deny'|null;\n\n  /**\n   * A parameter for the default navigation mode.  Controls whether wizard steps after the current step are navigable:\n   *\n   * - `navigateForward=\"deny\"` -- the steps are not navigable\n   * - `navigateForward=\"allow\"` -- the steps are navigable\n   * - `navigateForward=\"visited\"` -- a step is navigable iff it was already visited before\n   */\n  @Input()\n  public navigateForward: 'allow'|'deny'|'visited'|null;\n\n  constructor(private wizard: WizardComponent) { }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    this.wizard.navigation = this.getNavigationMode();\n  }\n\n  private getNavigationMode(): NavigationMode {\n    if (this.awNavigationMode) {\n      return this.awNavigationMode;\n    }\n    return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);\n  }\n\n}\n","import {Directive, Host, Input, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awCompletedStep` directive can be used to make a wizard step initially completed.\r\n *\r\n * Initially completed steps are shown as completed when the wizard is presented to the user.\r\n *\r\n * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step awCompletedStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * An optional boolean condition can be specified:\r\n *\r\n * ```html\r\n * <aw-wizard-step [awCompletedStep]=\"shouldBeCompleted\">\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"First step\" [awCompletedStep]=\"firstStepPrefilled\">\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n */\r\n@Directive({\r\n  selector: '[awCompletedStep]'\r\n})\r\nexport class CompletedStepDirective implements OnInit {\r\n\r\n  // tslint:disable-next-line:no-input-rename\r\n  @Input('awCompletedStep')\r\n  public initiallyCompleted = true;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  public ngOnInit(): void {\r\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\r\n    this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted as any === '';\r\n  }\r\n}\r\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\nimport {WizardStepComponent} from './components/wizard-step.component';\nimport {WizardComponent} from './components/wizard.component';\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\nimport {GoToStepDirective} from './directives/go-to-step.directive';\nimport {NextStepDirective} from './directives/next-step.directive';\nimport {OptionalStepDirective} from './directives/optional-step.directive';\nimport {PreviousStepDirective} from './directives/previous-step.directive';\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\nimport {SelectedStepDirective} from './directives/selected-step.directive';\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\nimport {WizardStepSymbolDirective} from './directives/wizard-step-symbol.directive';\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\nimport {WizardStepDirective} from './directives/wizard-step.directive';\nimport {NavigationModeDirective} from './directives/navigation-mode.directive';\nimport {CompletedStepDirective} from './directives/completed-step.directive';\n\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n@NgModule({\n  declarations: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepSymbolDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective,\n    NavigationModeDirective,\n    CompletedStepDirective,\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepSymbolDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective,\n    NavigationModeDirective,\n    CompletedStepDirective,\n  ]\n})\nexport class ArchwizardModule {\n  /* istanbul ignore next */\n  public static forRoot(): ModuleWithProviders<ArchwizardModule> {\n    return {\n      ngModule: ArchwizardModule,\n      providers: [\n        // Nothing here yet\n      ]\n    };\n  }\n}\n","// export the components\nexport {WizardCompletionStepComponent} from './lib/components/wizard-completion-step.component';\nexport {WizardNavigationBarComponent} from './lib/components/wizard-navigation-bar.component';\nexport {WizardStepComponent} from './lib/components/wizard-step.component';\nexport {WizardComponent} from './lib/components/wizard.component';\n\n// export the directives\nexport {EnableBackLinksDirective} from './lib/directives/enable-back-links.directive';\nexport {GoToStepDirective} from './lib/directives/go-to-step.directive';\nexport {NextStepDirective} from './lib/directives/next-step.directive';\nexport {OptionalStepDirective} from './lib/directives/optional-step.directive';\nexport {PreviousStepDirective} from './lib/directives/previous-step.directive';\nexport {ResetWizardDirective} from './lib/directives/reset-wizard.directive';\nexport {SelectedStepDirective} from './lib/directives/selected-step.directive';\nexport {WizardCompletionStepDirective} from './lib/directives/wizard-completion-step.directive';\nexport {WizardStepDirective} from './lib/directives/wizard-step.directive';\nexport {WizardStepTitleDirective} from './lib/directives/wizard-step-title.directive';\nexport {NavigationModeDirective} from './lib/directives/navigation-mode.directive';\nexport {CompletedStepDirective} from './lib/directives/completed-step.directive';\nexport {WizardStepSymbolDirective} from './lib/directives/wizard-step-symbol.directive';\n\n// export the navigation classes\nexport {NavigationMode} from './lib/navigation/navigation-mode.interface';\nexport {ConfigurableNavigationMode} from './lib/navigation/configurable-navigation-mode';\nexport {BaseNavigationMode} from './lib/navigation/base-navigation-mode.interface';\n\n// export the utility functions\nexport {MovingDirection} from './lib/util/moving-direction.enum';\nexport {NavigationSymbol} from './lib/util/navigation-symbol.interface';\nexport {StepId, isStepId} from './lib/util/step-id.interface';\nexport {StepIndex, isStepIndex} from './lib/util/step-index.interface';\nexport {StepOffset, isStepOffset} from './lib/util/step-offset.interface';\nexport {WizardCompletionStep} from './lib/util/wizard-completion-step.interface';\nexport {WizardStep} from './lib/util/wizard-step.interface';\n\n// export the module\nexport {ArchwizardModule} from './lib/archwizard.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}