{"ast":null,"code":"import _get from \"D:/Sitemym/frontend04/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:/Sitemym/frontend04/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:/Sitemym/frontend04/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/Sitemym/frontend04/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"D:/Sitemym/frontend04/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Sitemym/frontend04/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Input, Output, ViewChild, Injectable, NgZone, Component, forwardRef, Injector, Renderer2, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\nimport * as Éµngcc0 from '@angular/core';\nvar _c0 = [\"captchaWrapperElem\"];\nvar _c1 = [\"captchaScriptElem\"];\n\nvar BaseReCaptchaComponent = /*@__PURE__*/function () {\n  var BaseReCaptchaComponent = /*#__PURE__*/function () {\n    /**\n     * @protected\n     * @param {?} renderer\n     * @param {?} zone\n     * @param {?} injector\n     * @param {?} scriptService\n     */\n    function BaseReCaptchaComponent(renderer, zone, injector, scriptService) {\n      _classCallCheck(this, BaseReCaptchaComponent);\n\n      this.renderer = renderer;\n      this.zone = zone;\n      this.injector = injector;\n      this.scriptService = scriptService;\n      /**\n       * Prefix of the captcha element\n       */\n\n      this.captchaElemPrefix = 'ngx_captcha_id_';\n      /**\n       * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\n       */\n\n      this.useGlobalDomain = false;\n      /**\n       * Type\n       */\n\n      this.type = 'image';\n      /**\n       * Tab index\n       */\n\n      this.tabIndex = 0;\n      /**\n       * Called when captcha receives successful response.\n       * Captcha response token is passed to event.\n       */\n\n      this.success = new EventEmitter();\n      /**\n       * Called when captcha is loaded. Event receives id of the captcha\n       */\n\n      this.load = new EventEmitter();\n      /**\n       * Called when captcha is reset.\n       */\n\n      this.reset = new EventEmitter();\n      /**\n       * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\n       */\n\n      this.ready = new EventEmitter();\n      /**\n       * Error callback\n       */\n\n      this.error = new EventEmitter();\n      /**\n       * Expired callback\n       */\n\n      this.expire = new EventEmitter();\n      /**\n       * Indicates if captcha should be set on load\n       */\n\n      this.setupAfterLoad = false;\n      /**\n       * If enabled, captcha will reset after receiving success response. This is useful\n       * when invisible captcha need to be resolved multiple times on same page\n       */\n\n      this.resetCaptchaAfterSuccess = false;\n      /**\n       * Indicates if captcha is loaded\n       */\n\n      this.isLoaded = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(BaseReCaptchaComponent, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        this.control = this.injector.get(NgControl).control;\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // cleanup scripts if language changed because they need to be reloaded\n        if (changes && changes.hl) {\n          // cleanup scripts when language changes\n          if (!changes.hl.firstChange && changes.hl.currentValue !== changes.hl.previousValue) {\n            this.scriptService.cleanup();\n          }\n        }\n\n        if (changes && changes.useGlobalDomain) {\n          // cleanup scripts when domain changes\n          if (!changes.useGlobalDomain.firstChange && changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue) {\n            this.scriptService.cleanup();\n          }\n        }\n\n        this.setupComponent();\n      }\n      /**\n       * Gets captcha response as per reCaptcha docs\n       * @return {?}\n       */\n\n    }, {\n      key: \"getResponse\",\n      value: function getResponse() {\n        return this.reCaptchaApi.getResponse(this.captchaId);\n      }\n      /**\n       * Gets Id of captcha widget\n       * @return {?}\n       */\n\n    }, {\n      key: \"getCaptchaId\",\n      value: function getCaptchaId() {\n        return this.captchaId;\n      }\n      /**\n       * Resets captcha\n       * @return {?}\n       */\n\n    }, {\n      key: \"resetCaptcha\",\n      value: function resetCaptcha() {\n        var _this = this;\n\n        this.zone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          // reset captcha using Google js api\n          _this.reCaptchaApi.reset(); // required due to forms\n\n\n          _this.onChange(undefined);\n\n          _this.onTouched(undefined); // trigger reset event\n\n\n          _this.reset.next();\n        });\n      }\n      /**\n       * Gets last submitted captcha response\n       * @return {?}\n       */\n\n    }, {\n      key: \"getCurrentResponse\",\n      value: function getCurrentResponse() {\n        return this.currentResponse;\n      }\n      /**\n       * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\n       * @return {?}\n       */\n\n    }, {\n      key: \"reloadCaptcha\",\n      value: function reloadCaptcha() {\n        this.setupComponent();\n      }\n      /**\n       * @protected\n       * @param {?} captchaElemId\n       * @return {?}\n       */\n\n    }, {\n      key: \"ensureCaptchaElem\",\n      value: function ensureCaptchaElem(captchaElemId) {\n        /** @type {?} */\n        var captchaElem = document.getElementById(captchaElemId);\n\n        if (!captchaElem) {\n          throw Error(\"Captcha element with id '\".concat(captchaElemId, \"' was not found\"));\n        } // assign captcha alem\n\n\n        this.captchaElem = captchaElem;\n      }\n      /**\n       * Responsible for instantiating captcha element\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"renderReCaptcha\",\n      value: function renderReCaptcha() {\n        var _this2 = this;\n\n        // run outside angular zone due to timeout issues when testing\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\n        this.zone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this2.captchaId = _this2.reCaptchaApi.render(_this2.captchaElemId, _this2.getCaptchaProperties());\n\n          _this2.ready.next();\n        });\n      }\n      /**\n       * Called when captcha receives response\n       * @protected\n       * @param {?} callback Callback\n       * @return {?}\n       */\n\n    }, {\n      key: \"handleCallback\",\n      value: function handleCallback(callback) {\n        var _this3 = this;\n\n        this.currentResponse = callback;\n        this.success.next(callback);\n        this.zone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this3.onChange(callback);\n\n          _this3.onTouched(callback);\n        });\n\n        if (this.resetCaptchaAfterSuccess) {\n          this.resetCaptcha();\n        }\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"getPseudoUniqueNumber\",\n      value: function getPseudoUniqueNumber() {\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"setupComponent\",\n      value: function setupComponent() {\n        var _this4 = this;\n\n        // captcha specific setup\n        this.captchaSpecificSetup(); // create captcha wrapper\n\n        this.createAndSetCaptchaElem();\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit',\n        /**\n        * @param {?} grecaptcha\n        * @return {?}\n        */\n        function (grecaptcha) {\n          _this4.onloadCallback(grecaptcha);\n        }, this.hl);\n      }\n      /**\n       * Called when google's recaptcha script is ready\n       * @private\n       * @param {?} grecapcha\n       * @return {?}\n       */\n\n    }, {\n      key: \"onloadCallback\",\n      value: function onloadCallback(grecapcha) {\n        // assign reference to reCaptcha Api once its loaded\n        this.reCaptchaApi = grecapcha;\n\n        if (!this.reCaptchaApi) {\n          throw Error(\"ReCaptcha Api was not initialized correctly\");\n        } // loaded flag\n\n\n        this.isLoaded = true; // fire load event\n\n        this.load.next(); // render captcha\n\n        this.renderReCaptcha(); // setup component if it was flagged as such\n\n        if (this.setupAfterLoad) {\n          this.setupAfterLoad = false;\n          this.setupComponent();\n        }\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"generateNewElemId\",\n      value: function generateNewElemId() {\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"createAndSetCaptchaElem\",\n      value: function createAndSetCaptchaElem() {\n        // generate new captcha id\n        this.captchaElemId = this.generateNewElemId();\n\n        if (!this.captchaElemId) {\n          throw Error(\"Captcha elem Id is not set\");\n        } // remove old html\n\n\n        this.captchaWrapperElem.nativeElement.innerHTML = ''; // create new wrapper for captcha\n\n        /** @type {?} */\n\n        var newElem = this.renderer.createElement('div');\n        newElem.id = this.captchaElemId;\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem); // update captcha elem\n\n        this.ensureCaptchaElem(this.captchaElemId);\n      }\n      /**\n       * To be aligned with the ControlValueAccessor interface we need to implement this method\n       * However as we don't want to update the recaptcha, this doesn't need to be implemented\n       * @param {?} obj\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(obj) {}\n      /**\n       * This method helps us tie together recaptcha and our formControl values\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n      /**\n       * At some point we might be interested whether the user has touched our component\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * Handles error callback\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"handleErrorCallback\",\n      value: function handleErrorCallback() {\n        var _this5 = this;\n\n        this.zone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this5.onChange(undefined);\n\n          _this5.onTouched(undefined);\n        });\n        this.error.next();\n      }\n      /**\n       * Handles expired callback\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"handleExpireCallback\",\n      value: function handleExpireCallback() {\n        this.expire.next(); // reset captcha on expire callback\n\n        this.resetCaptcha();\n      }\n    }]);\n\n    return BaseReCaptchaComponent;\n  }();\n\n  BaseReCaptchaComponent.Éµfac = function BaseReCaptchaComponent_Factory(t) {\n    Éµngcc0.ÉµÉµinvalidFactory();\n  };\n\n  BaseReCaptchaComponent.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: BaseReCaptchaComponent,\n    viewQuery: function BaseReCaptchaComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµviewQuery(_c0, true);\n        Éµngcc0.ÉµÉµviewQuery(_c1, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.captchaScriptElem = _t.first);\n      }\n    },\n    inputs: {\n      useGlobalDomain: \"useGlobalDomain\",\n      type: \"type\",\n      tabIndex: \"tabIndex\",\n      siteKey: \"siteKey\",\n      hl: \"hl\"\n    },\n    outputs: {\n      success: \"success\",\n      load: \"load\",\n      reset: \"reset\",\n      ready: \"ready\",\n      error: \"error\",\n      expire: \"expire\"\n    },\n    features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return BaseReCaptchaComponent;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\n\n\nvar ReCaptchaType = /*@__PURE__*/function () {\n  var ReCaptchaType = {\n    InvisibleReCaptcha: 0,\n    ReCaptcha2: 1\n  };\n  ReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';\n  ReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';\n  return ReCaptchaType;\n}();\n\nvar ScriptService = /*@__PURE__*/function () {\n  var ScriptService = /*#__PURE__*/function () {\n    /**\n     * @param {?} zone\n     */\n    function ScriptService(zone) {\n      _classCallCheck(this, ScriptService);\n\n      this.zone = zone;\n      /**\n       * Name of the global google recaptcha script\n       */\n\n      this.windowGrecaptcha = 'grecaptcha';\n      /**\n       * Name of the global callback\n       */\n\n      this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\n      this.globalDomain = 'recaptcha.net';\n      this.defaultDomain = 'google.com';\n    }\n    /**\n     * @param {?} useGlobalDomain\n     * @param {?} render\n     * @param {?} onLoad\n     * @param {?=} language\n     * @return {?}\n     */\n\n\n    _createClass(ScriptService, [{\n      key: \"registerCaptchaScript\",\n      value: function registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\n        var _this6 = this;\n\n        if (this.grecaptchaScriptLoaded()) {\n          // recaptcha script is already loaded\n          // just call the callback\n          this.zone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            onLoad(window[_this6.windowGrecaptcha]);\n          });\n          return;\n        } // we need to patch the callback through global variable, otherwise callback is not accessible\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\n\n\n        window[this.windowOnLoadCallbackProperty] =\n        /** @type {?} */\n\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.zone.run(onLoad.bind(_this6, window[_this6.windowGrecaptcha]));\n        }; // prepare script elem\n\n        /** @type {?} */\n\n\n        var scriptElem = document.createElement('script');\n        scriptElem.innerHTML = '';\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\n        scriptElem.async = true;\n        scriptElem.defer = true; // add script to header\n\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"cleanup\",\n      value: function cleanup() {\n        window[this.windowOnLoadCallbackProperty] = undefined;\n        window[this.windowGrecaptcha] = undefined;\n      }\n      /**\n       * Indicates if google recaptcha script is available and ready to be used\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"grecaptchaScriptLoaded\",\n      value: function grecaptchaScriptLoaded() {\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\n          return true;\n        }\n\n        return false;\n      }\n      /**\n       * Gets language param used in script url\n       * @private\n       * @param {?=} hl\n       * @return {?}\n       */\n\n    }, {\n      key: \"getLanguageParam\",\n      value: function getLanguageParam(hl) {\n        if (!hl) {\n          return '';\n        }\n\n        return \"&hl=\".concat(hl);\n      }\n      /**\n       * Url to google api script\n       * @private\n       * @param {?} useGlobalDomain\n       * @param {?} render\n       * @param {?=} language\n       * @return {?}\n       */\n\n    }, {\n      key: \"getCaptchaScriptUrl\",\n      value: function getCaptchaScriptUrl(useGlobalDomain, render, language) {\n        /** @type {?} */\n        var domain = useGlobalDomain ? this.globalDomain : this.defaultDomain; // tslint:disable-next-line:max-line-length\n\n        return \"https://www.\".concat(domain, \"/recaptcha/api.js?onload=\").concat(this.windowOnLoadCallbackProperty, \"&render=\").concat(render).concat(this.getLanguageParam(language));\n      }\n    }]);\n\n    return ScriptService;\n  }();\n\n  ScriptService.Éµfac = function ScriptService_Factory(t) {\n    return new (t || ScriptService)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone));\n  };\n\n  ScriptService.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n    token: ScriptService,\n    factory: ScriptService.Éµfac\n  });\n  return ScriptService;\n}();\n\nvar InvisibleReCaptchaComponent = /*@__PURE__*/function () {\n  var InvisibleReCaptchaComponent = /*#__PURE__*/function (_BaseReCaptchaCompone) {\n    _inherits(InvisibleReCaptchaComponent, _BaseReCaptchaCompone);\n\n    var _super = _createSuper(InvisibleReCaptchaComponent);\n\n    /**\n     * @param {?} renderer\n     * @param {?} zone\n     * @param {?} injector\n     * @param {?} scriptService\n     */\n    function InvisibleReCaptchaComponent(renderer, zone, injector, scriptService) {\n      var _this7;\n\n      _classCallCheck(this, InvisibleReCaptchaComponent);\n\n      _this7 = _super.call(this, renderer, zone, injector, scriptService);\n      _this7.renderer = renderer;\n      _this7.zone = zone;\n      _this7.injector = injector;\n      _this7.scriptService = scriptService;\n      /**\n       * This size representing invisible captcha\n       */\n\n      _this7.size = 'invisible';\n      /**\n       * Theme\n       */\n\n      _this7.theme = 'light';\n      /**\n       * Badge\n       */\n\n      _this7.badge = 'bottomright';\n      _this7.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\n      return _this7;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _createClass(InvisibleReCaptchaComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(InvisibleReCaptchaComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n      }\n      /**\n       * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\n       * @return {?}\n       */\n\n    }, {\n      key: \"execute\",\n      value: function execute() {\n        var _this8 = this;\n\n        // execute captcha\n        this.zone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.reCaptchaApi.execute(_this8.captchaId);\n        });\n      }\n      /**\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"captchaSpecificSetup\",\n      value: function captchaSpecificSetup() {}\n      /**\n       * Gets reCaptcha properties\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"getCaptchaProperties\",\n      value: function getCaptchaProperties() {\n        var _this9 = this;\n\n        return {\n          'sitekey': this.siteKey,\n          'callback':\n          /**\n          * @param {?} response\n          * @return {?}\n          */\n          function callback(response) {\n            return _this9.zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return _this9.handleCallback(response);\n            });\n          },\n          'expired-callback':\n          /**\n          * @return {?}\n          */\n          function expiredCallback() {\n            return _this9.zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return _this9.handleExpireCallback();\n            });\n          },\n          'error-callback':\n          /**\n          * @return {?}\n          */\n          function errorCallback() {\n            return _this9.zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return _this9.handleErrorCallback();\n            });\n          },\n          'badge': this.badge,\n          'type': this.type,\n          'tabindex': this.tabIndex,\n          'size': this.size,\n          'theme': this.theme\n        };\n      }\n    }]);\n\n    return InvisibleReCaptchaComponent;\n  }(BaseReCaptchaComponent);\n\n  InvisibleReCaptchaComponent.Éµfac = function InvisibleReCaptchaComponent_Factory(t) {\n    return new (t || InvisibleReCaptchaComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Injector), Éµngcc0.ÉµÉµdirectiveInject(ScriptService));\n  };\n\n  InvisibleReCaptchaComponent.Éµcmp = /*@__PURE__*/Éµngcc0.ÉµÉµdefineComponent({\n    type: InvisibleReCaptchaComponent,\n    selectors: [[\"ngx-invisible-recaptcha\"]],\n    inputs: {\n      theme: \"theme\",\n      badge: \"badge\",\n      hl: \"hl\"\n    },\n    features: [/*@__PURE__*/Éµngcc0.ÉµÉµProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: /*@__PURE__*/forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return InvisibleReCaptchaComponent;\n      }),\n      multi: true\n    }]), Éµngcc0.ÉµÉµInheritDefinitionFeature, Éµngcc0.ÉµÉµNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"captchaWrapperElem\", \"\"]],\n    template: function InvisibleReCaptchaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµelement(0, \"div\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return InvisibleReCaptchaComponent;\n}();\n\nvar ReCaptcha2Component = /*@__PURE__*/function () {\n  var ReCaptcha2Component = /*#__PURE__*/function (_BaseReCaptchaCompone2) {\n    _inherits(ReCaptcha2Component, _BaseReCaptchaCompone2);\n\n    var _super2 = _createSuper(ReCaptcha2Component);\n\n    /**\n     * @param {?} renderer\n     * @param {?} zone\n     * @param {?} injector\n     * @param {?} scriptService\n     */\n    function ReCaptcha2Component(renderer, zone, injector, scriptService) {\n      var _this10;\n\n      _classCallCheck(this, ReCaptcha2Component);\n\n      _this10 = _super2.call(this, renderer, zone, injector, scriptService);\n      _this10.renderer = renderer;\n      _this10.zone = zone;\n      _this10.injector = injector;\n      _this10.scriptService = scriptService;\n      /**\n       * Name of the global expire callback\n       */\n\n      _this10.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n      /**\n       * Name of the global error callback\n       */\n\n      _this10.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n      /**\n       * Theme\n       */\n\n      _this10.theme = 'light';\n      /**\n       * Size\n       */\n\n      _this10.size = 'normal';\n      _this10.recaptchaType = ReCaptchaType.ReCaptcha2;\n      return _this10;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _createClass(ReCaptcha2Component, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"ngOnChanges\", this).call(this, changes);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        window[this.windowOnErrorCallbackProperty] = {};\n        window[this.windowOnExpireCallbackProperty] = {};\n      }\n      /**\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"captchaSpecificSetup\",\n      value: function captchaSpecificSetup() {\n        this.registerCallbacks();\n      }\n      /**\n       * Gets reCaptcha properties\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"getCaptchaProperties\",\n      value: function getCaptchaProperties() {\n        var _this11 = this;\n\n        return {\n          'sitekey': this.siteKey,\n          'callback':\n          /**\n          * @param {?} response\n          * @return {?}\n          */\n          function callback(response) {\n            return _this11.zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return _this11.handleCallback(response);\n            });\n          },\n          'expired-callback':\n          /**\n          * @return {?}\n          */\n          function expiredCallback() {\n            return _this11.zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return _this11.handleExpireCallback();\n            });\n          },\n          'error-callback':\n          /**\n          * @return {?}\n          */\n          function errorCallback() {\n            return _this11.zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return _this11.handleErrorCallback();\n            });\n          },\n          'theme': this.theme,\n          'type': this.type,\n          'size': this.size,\n          'tabindex': this.tabIndex\n        };\n      }\n      /**\n       * Registers global callbacks\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerCallbacks\",\n      value: function registerCallbacks() {\n        window[this.windowOnErrorCallbackProperty] = _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"handleErrorCallback\", this).bind(this);\n        window[this.windowOnExpireCallbackProperty] = _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"handleExpireCallback\", this).bind(this);\n      }\n    }]);\n\n    return ReCaptcha2Component;\n  }(BaseReCaptchaComponent);\n\n  ReCaptcha2Component.Éµfac = function ReCaptcha2Component_Factory(t) {\n    return new (t || ReCaptcha2Component)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Injector), Éµngcc0.ÉµÉµdirectiveInject(ScriptService));\n  };\n\n  ReCaptcha2Component.Éµcmp = /*@__PURE__*/Éµngcc0.ÉµÉµdefineComponent({\n    type: ReCaptcha2Component,\n    selectors: [[\"ngx-recaptcha2\"]],\n    inputs: {\n      theme: \"theme\",\n      size: \"size\",\n      hl: \"hl\"\n    },\n    features: [/*@__PURE__*/Éµngcc0.ÉµÉµProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: /*@__PURE__*/forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return ReCaptcha2Component;\n      }),\n      multi: true\n    }]), Éµngcc0.ÉµÉµInheritDefinitionFeature, Éµngcc0.ÉµÉµNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"captchaWrapperElem\", \"\"]],\n    template: function ReCaptcha2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµelement(0, \"div\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ReCaptcha2Component;\n}();\n\nvar ReCaptchaV3Service = /*@__PURE__*/function () {\n  var ReCaptchaV3Service = /*#__PURE__*/function () {\n    /**\n     * @param {?} scriptService\n     * @param {?} zone\n     */\n    function ReCaptchaV3Service(scriptService, zone) {\n      _classCallCheck(this, ReCaptchaV3Service);\n\n      this.scriptService = scriptService;\n      this.zone = zone;\n    }\n    /**\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\n     * this callback in your backend to get meaningful results.\n     *\n     * For more information see https://developers.google.com/recaptcha/docs/v3\n     *\n     * @param {?} siteKey Site key found in your google admin panel\n     * @param {?} action Action to log\n     * @param {?} callback\n     * @param {?=} config\n     * @return {?}\n     */\n\n\n    _createClass(ReCaptchaV3Service, [{\n      key: \"execute\",\n      value: function execute(siteKey, action, callback, config) {\n        var _this12 = this;\n\n        /** @type {?} */\n        var useGlobalDomain = config && config.useGlobalDomain ? true : false;\n        this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey,\n        /**\n        * @param {?} grecaptcha\n        * @return {?}\n        */\n        function (grecaptcha) {\n          _this12.zone.runOutsideAngular(\n          /**\n          * @return {?}\n          */\n          function () {\n            grecaptcha.execute(siteKey, {\n              action: action\n            }).then(\n            /**\n            * @param {?} token\n            * @return {?}\n            */\n            function (token) {\n              _this12.zone.run(\n              /**\n              * @return {?}\n              */\n              function () {\n                return callback(token);\n              });\n            });\n          });\n        });\n      }\n    }]);\n\n    return ReCaptchaV3Service;\n  }();\n\n  ReCaptchaV3Service.Éµfac = function ReCaptchaV3Service_Factory(t) {\n    return new (t || ReCaptchaV3Service)(Éµngcc0.ÉµÉµinject(ScriptService), Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone));\n  };\n\n  ReCaptchaV3Service.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n    token: ReCaptchaV3Service,\n    factory: ReCaptchaV3Service.Éµfac\n  });\n  return ReCaptchaV3Service;\n}();\n\nvar NgxCaptchaModule = /*@__PURE__*/function () {\n  var NgxCaptchaModule = function NgxCaptchaModule() {\n    _classCallCheck(this, NgxCaptchaModule);\n  };\n\n  NgxCaptchaModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: NgxCaptchaModule\n  });\n  NgxCaptchaModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n    factory: function NgxCaptchaModule_Factory(t) {\n      return new (t || NgxCaptchaModule)();\n    },\n    providers: [ScriptService, ReCaptchaV3Service],\n    imports: [[CommonModule]]\n  });\n  return NgxCaptchaModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxCaptchaModule, {\n    declarations: function declarations() {\n      return [ReCaptcha2Component, InvisibleReCaptchaComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [ReCaptcha2Component, InvisibleReCaptchaComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, ReCaptcha2Component, ReCaptchaType, ScriptService, ReCaptchaV3Service, NgxCaptchaModule };","map":null,"metadata":{},"sourceType":"module"}