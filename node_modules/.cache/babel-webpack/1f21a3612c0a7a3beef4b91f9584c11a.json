{"ast":null,"code":"import _get from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/DATOS/Trabajos/jullerosoft/cooperativa/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Input, Output, ViewChild, Injectable, NgZone, Component, forwardRef, Injector, Renderer2, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\nimport * as Éµngcc0 from '@angular/core';\nvar _c0 = [\"captchaWrapperElem\"];\nvar _c1 = [\"captchaScriptElem\"];\n\nvar BaseReCaptchaComponent = /*#__PURE__*/function () {\n  /**\n   * @protected\n   * @param {?} renderer\n   * @param {?} zone\n   * @param {?} injector\n   * @param {?} scriptService\n   */\n  function BaseReCaptchaComponent(renderer, zone, injector, scriptService) {\n    _classCallCheck(this, BaseReCaptchaComponent);\n\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\n     * Prefix of the captcha element\n     */\n\n    this.captchaElemPrefix = 'ngx_captcha_id_';\n    /**\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\n     */\n\n    this.useGlobalDomain = false;\n    /**\n     * Type\n     */\n\n    this.type = 'image';\n    /**\n     * Tab index\n     */\n\n    this.tabIndex = 0;\n    /**\n     * Called when captcha receives successful response.\n     * Captcha response token is passed to event.\n     */\n\n    this.success = new EventEmitter();\n    /**\n     * Called when captcha is loaded. Event receives id of the captcha\n     */\n\n    this.load = new EventEmitter();\n    /**\n     * Called when captcha is reset.\n     */\n\n    this.reset = new EventEmitter();\n    /**\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Error callback\n     */\n\n    this.error = new EventEmitter();\n    /**\n     * Expired callback\n     */\n\n    this.expire = new EventEmitter();\n    /**\n     * Indicates if captcha should be set on load\n     */\n\n    this.setupAfterLoad = false;\n    /**\n     * If enabled, captcha will reset after receiving success response. This is useful\n     * when invisible captcha need to be resolved multiple times on same page\n     */\n\n    this.resetCaptchaAfterSuccess = false;\n    /**\n     * Indicates if captcha is loaded\n     */\n\n    this.isLoaded = false;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BaseReCaptchaComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.control = this.injector.get(NgControl).control;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // cleanup scripts if language changed because they need to be reloaded\n      if (changes && changes.hl) {\n        // cleanup scripts when language changes\n        if (!changes.hl.firstChange && changes.hl.currentValue !== changes.hl.previousValue) {\n          this.scriptService.cleanup();\n        }\n      }\n\n      if (changes && changes.useGlobalDomain) {\n        // cleanup scripts when domain changes\n        if (!changes.useGlobalDomain.firstChange && changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue) {\n          this.scriptService.cleanup();\n        }\n      }\n\n      this.setupComponent();\n    }\n    /**\n     * Gets captcha response as per reCaptcha docs\n     * @return {?}\n     */\n\n  }, {\n    key: \"getResponse\",\n    value: function getResponse() {\n      return this.reCaptchaApi.getResponse(this.captchaId);\n    }\n    /**\n     * Gets Id of captcha widget\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCaptchaId\",\n    value: function getCaptchaId() {\n      return this.captchaId;\n    }\n    /**\n     * Resets captcha\n     * @return {?}\n     */\n\n  }, {\n    key: \"resetCaptcha\",\n    value: function resetCaptcha() {\n      var _this = this;\n\n      this.zone.run(\n      /**\n      * @return {?}\n      */\n      function () {\n        // reset captcha using Google js api\n        _this.reCaptchaApi.reset(); // required due to forms\n\n\n        _this.onChange(undefined);\n\n        _this.onTouched(undefined); // trigger reset event\n\n\n        _this.reset.next();\n      });\n    }\n    /**\n     * Gets last submitted captcha response\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCurrentResponse\",\n    value: function getCurrentResponse() {\n      return this.currentResponse;\n    }\n    /**\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\n     * @return {?}\n     */\n\n  }, {\n    key: \"reloadCaptcha\",\n    value: function reloadCaptcha() {\n      this.setupComponent();\n    }\n    /**\n     * @protected\n     * @param {?} captchaElemId\n     * @return {?}\n     */\n\n  }, {\n    key: \"ensureCaptchaElem\",\n    value: function ensureCaptchaElem(captchaElemId) {\n      /** @type {?} */\n      var captchaElem = document.getElementById(captchaElemId);\n\n      if (!captchaElem) {\n        throw Error(\"Captcha element with id '\".concat(captchaElemId, \"' was not found\"));\n      } // assign captcha alem\n\n\n      this.captchaElem = captchaElem;\n    }\n    /**\n     * Responsible for instantiating captcha element\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"renderReCaptcha\",\n    value: function renderReCaptcha() {\n      var _this2 = this;\n\n      // run outside angular zone due to timeout issues when testing\n      // details: https://github.com/Enngage/ngx-captcha/issues/26\n      this.zone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this2.captchaId = _this2.reCaptchaApi.render(_this2.captchaElemId, _this2.getCaptchaProperties());\n\n        _this2.ready.next();\n      });\n    }\n    /**\n     * Called when captcha receives response\n     * @protected\n     * @param {?} callback Callback\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCallback\",\n    value: function handleCallback(callback) {\n      var _this3 = this;\n\n      this.currentResponse = callback;\n      this.success.next(callback);\n      this.zone.run(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this3.onChange(callback);\n\n        _this3.onTouched(callback);\n      });\n\n      if (this.resetCaptchaAfterSuccess) {\n        this.resetCaptcha();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getPseudoUniqueNumber\",\n    value: function getPseudoUniqueNumber() {\n      return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupComponent\",\n    value: function setupComponent() {\n      var _this4 = this;\n\n      // captcha specific setup\n      this.captchaSpecificSetup(); // create captcha wrapper\n\n      this.createAndSetCaptchaElem();\n      this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit',\n      /**\n      * @param {?} grecaptcha\n      * @return {?}\n      */\n      function (grecaptcha) {\n        _this4.onloadCallback(grecaptcha);\n      }, this.hl);\n    }\n    /**\n     * Called when google's recaptcha script is ready\n     * @private\n     * @param {?} grecapcha\n     * @return {?}\n     */\n\n  }, {\n    key: \"onloadCallback\",\n    value: function onloadCallback(grecapcha) {\n      // assign reference to reCaptcha Api once its loaded\n      this.reCaptchaApi = grecapcha;\n\n      if (!this.reCaptchaApi) {\n        throw Error(\"ReCaptcha Api was not initialized correctly\");\n      } // loaded flag\n\n\n      this.isLoaded = true; // fire load event\n\n      this.load.next(); // render captcha\n\n      this.renderReCaptcha(); // setup component if it was flagged as such\n\n      if (this.setupAfterLoad) {\n        this.setupAfterLoad = false;\n        this.setupComponent();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"generateNewElemId\",\n    value: function generateNewElemId() {\n      return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"createAndSetCaptchaElem\",\n    value: function createAndSetCaptchaElem() {\n      // generate new captcha id\n      this.captchaElemId = this.generateNewElemId();\n\n      if (!this.captchaElemId) {\n        throw Error(\"Captcha elem Id is not set\");\n      } // remove old html\n\n\n      this.captchaWrapperElem.nativeElement.innerHTML = ''; // create new wrapper for captcha\n\n      /** @type {?} */\n\n      var newElem = this.renderer.createElement('div');\n      newElem.id = this.captchaElemId;\n      this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem); // update captcha elem\n\n      this.ensureCaptchaElem(this.captchaElemId);\n    }\n    /**\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\n     * @param {?} obj\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(obj) {}\n    /**\n     * This method helps us tie together recaptcha and our formControl values\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * At some point we might be interested whether the user has touched our component\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Handles error callback\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleErrorCallback\",\n    value: function handleErrorCallback() {\n      var _this5 = this;\n\n      this.zone.run(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this5.onChange(undefined);\n\n        _this5.onTouched(undefined);\n      });\n      this.error.next();\n    }\n    /**\n     * Handles expired callback\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleExpireCallback\",\n    value: function handleExpireCallback() {\n      this.expire.next(); // reset captcha on expire callback\n\n      this.resetCaptcha();\n    }\n  }]);\n\n  return BaseReCaptchaComponent;\n}();\n\nBaseReCaptchaComponent.Éµfac = function BaseReCaptchaComponent_Factory(t) {\n  Éµngcc0.ÉµÉµinvalidFactory();\n};\n\nBaseReCaptchaComponent.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: BaseReCaptchaComponent,\n  viewQuery: function BaseReCaptchaComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n      Éµngcc0.ÉµÉµviewQuery(_c1, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.captchaScriptElem = _t.first);\n    }\n  },\n  inputs: {\n    useGlobalDomain: \"useGlobalDomain\",\n    type: \"type\",\n    tabIndex: \"tabIndex\",\n    siteKey: \"siteKey\",\n    hl: \"hl\"\n  },\n  outputs: {\n    success: \"success\",\n    load: \"load\",\n    reset: \"reset\",\n    ready: \"ready\",\n    error: \"error\",\n    expire: \"expire\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\nBaseReCaptchaComponent.propDecorators = {\n  siteKey: [{\n    type: Input\n  }],\n  useGlobalDomain: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  hl: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  success: [{\n    type: Output\n  }],\n  load: [{\n    type: Output\n  }],\n  reset: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  error: [{\n    type: Output\n  }],\n  expire: [{\n    type: Output\n  }],\n  captchaWrapperElem: [{\n    type: ViewChild,\n    args: ['captchaWrapperElem']\n  }],\n  captchaScriptElem: [{\n    type: ViewChild,\n    args: ['captchaScriptElem']\n  }]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\n\nvar ReCaptchaType = {\n  InvisibleReCaptcha: 0,\n  ReCaptcha2: 1\n};\nReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';\nReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar ScriptService = /*#__PURE__*/function () {\n  /**\n   * @param {?} zone\n   */\n  function ScriptService(zone) {\n    _classCallCheck(this, ScriptService);\n\n    this.zone = zone;\n    /**\n     * Name of the global google recaptcha script\n     */\n\n    this.windowGrecaptcha = 'grecaptcha';\n    /**\n     * Name of the global callback\n     */\n\n    this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\n    this.globalDomain = 'recaptcha.net';\n    this.defaultDomain = 'google.com';\n  }\n  /**\n   * @param {?} useGlobalDomain\n   * @param {?} render\n   * @param {?} onLoad\n   * @param {?=} language\n   * @return {?}\n   */\n\n\n  _createClass(ScriptService, [{\n    key: \"registerCaptchaScript\",\n    value: function registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\n      var _this6 = this;\n\n      if (this.grecaptchaScriptLoaded()) {\n        // recaptcha script is already loaded\n        // just call the callback\n        this.zone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          onLoad(window[_this6.windowGrecaptcha]);\n        });\n        return;\n      } // we need to patch the callback through global variable, otherwise callback is not accessible\n      // note: https://github.com/Enngage/ngx-captcha/issues/2\n\n\n      window[this.windowOnLoadCallbackProperty] =\n      /** @type {?} */\n\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this6.zone.run(onLoad.bind(_this6, window[_this6.windowGrecaptcha]));\n      }; // prepare script elem\n\n      /** @type {?} */\n\n\n      var scriptElem = document.createElement('script');\n      scriptElem.innerHTML = '';\n      scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\n      scriptElem.async = true;\n      scriptElem.defer = true; // add script to header\n\n      document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      window[this.windowOnLoadCallbackProperty] = undefined;\n      window[this.windowGrecaptcha] = undefined;\n    }\n    /**\n     * Indicates if google recaptcha script is available and ready to be used\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"grecaptchaScriptLoaded\",\n    value: function grecaptchaScriptLoaded() {\n      if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Gets language param used in script url\n     * @private\n     * @param {?=} hl\n     * @return {?}\n     */\n\n  }, {\n    key: \"getLanguageParam\",\n    value: function getLanguageParam(hl) {\n      if (!hl) {\n        return '';\n      }\n\n      return \"&hl=\".concat(hl);\n    }\n    /**\n     * Url to google api script\n     * @private\n     * @param {?} useGlobalDomain\n     * @param {?} render\n     * @param {?=} language\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCaptchaScriptUrl\",\n    value: function getCaptchaScriptUrl(useGlobalDomain, render, language) {\n      /** @type {?} */\n      var domain = useGlobalDomain ? this.globalDomain : this.defaultDomain; // tslint:disable-next-line:max-line-length\n\n      return \"https://www.\".concat(domain, \"/recaptcha/api.js?onload=\").concat(this.windowOnLoadCallbackProperty, \"&render=\").concat(render).concat(this.getLanguageParam(language));\n    }\n  }]);\n\n  return ScriptService;\n}();\n\nScriptService.Éµfac = function ScriptService_Factory(t) {\n  return new (t || ScriptService)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone));\n};\n\nScriptService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: ScriptService,\n  factory: ScriptService.Éµfac\n});\n/** @nocollapse */\n\nScriptService.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(ScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Éµngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar InvisibleReCaptchaComponent = /*#__PURE__*/function (_BaseReCaptchaCompone) {\n  _inherits(InvisibleReCaptchaComponent, _BaseReCaptchaCompone);\n\n  var _super = _createSuper(InvisibleReCaptchaComponent);\n\n  /**\n   * @param {?} renderer\n   * @param {?} zone\n   * @param {?} injector\n   * @param {?} scriptService\n   */\n  function InvisibleReCaptchaComponent(renderer, zone, injector, scriptService) {\n    var _this7;\n\n    _classCallCheck(this, InvisibleReCaptchaComponent);\n\n    _this7 = _super.call(this, renderer, zone, injector, scriptService);\n    _this7.renderer = renderer;\n    _this7.zone = zone;\n    _this7.injector = injector;\n    _this7.scriptService = scriptService;\n    /**\n     * This size representing invisible captcha\n     */\n\n    _this7.size = 'invisible';\n    /**\n     * Theme\n     */\n\n    _this7.theme = 'light';\n    /**\n     * Badge\n     */\n\n    _this7.badge = 'bottomright';\n    _this7.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\n    return _this7;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(InvisibleReCaptchaComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(InvisibleReCaptchaComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n    /**\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var _this8 = this;\n\n      // execute captcha\n      this.zone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this8.reCaptchaApi.execute(_this8.captchaId);\n      });\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"captchaSpecificSetup\",\n    value: function captchaSpecificSetup() {}\n    /**\n     * Gets reCaptcha properties\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCaptchaProperties\",\n    value: function getCaptchaProperties() {\n      var _this9 = this;\n\n      return {\n        'sitekey': this.siteKey,\n        'callback':\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function callback(response) {\n          return _this9.zone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this9.handleCallback(response);\n          });\n        },\n        'expired-callback':\n        /**\n        * @return {?}\n        */\n        function expiredCallback() {\n          return _this9.zone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this9.handleExpireCallback();\n          });\n        },\n        'error-callback':\n        /**\n        * @return {?}\n        */\n        function errorCallback() {\n          return _this9.zone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this9.handleErrorCallback();\n          });\n        },\n        'badge': this.badge,\n        'type': this.type,\n        'tabindex': this.tabIndex,\n        'size': this.size,\n        'theme': this.theme\n      };\n    }\n  }]);\n\n  return InvisibleReCaptchaComponent;\n}(BaseReCaptchaComponent);\n\nInvisibleReCaptchaComponent.Éµfac = function InvisibleReCaptchaComponent_Factory(t) {\n  return new (t || InvisibleReCaptchaComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Injector), Éµngcc0.ÉµÉµdirectiveInject(ScriptService));\n};\n\nInvisibleReCaptchaComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: InvisibleReCaptchaComponent,\n  selectors: [[\"ngx-invisible-recaptcha\"]],\n  inputs: {\n    theme: \"theme\",\n    badge: \"badge\",\n    hl: \"hl\"\n  },\n  features: [Éµngcc0.ÉµÉµProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return InvisibleReCaptchaComponent;\n    }),\n    multi: true\n  }]), Éµngcc0.ÉµÉµInheritDefinitionFeature, Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"captchaWrapperElem\", \"\"]],\n  template: function InvisibleReCaptchaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nInvisibleReCaptchaComponent.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: NgZone\n  }, {\n    type: Injector\n  }, {\n    type: ScriptService\n  }];\n};\n\nInvisibleReCaptchaComponent.propDecorators = {\n  theme: [{\n    type: Input\n  }],\n  badge: [{\n    type: Input\n  }],\n  hl: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(InvisibleReCaptchaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-invisible-recaptcha',\n      template: \"\\n  <div #captchaWrapperElem></div>\",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(\n        /**\n        * @return {?}\n        */\n        function () {\n          return InvisibleReCaptchaComponent;\n        }),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.Renderer2\n    }, {\n      type: Éµngcc0.NgZone\n    }, {\n      type: Éµngcc0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    theme: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    hl: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ReCaptcha2Component = /*#__PURE__*/function (_BaseReCaptchaCompone2) {\n  _inherits(ReCaptcha2Component, _BaseReCaptchaCompone2);\n\n  var _super2 = _createSuper(ReCaptcha2Component);\n\n  /**\n   * @param {?} renderer\n   * @param {?} zone\n   * @param {?} injector\n   * @param {?} scriptService\n   */\n  function ReCaptcha2Component(renderer, zone, injector, scriptService) {\n    var _this10;\n\n    _classCallCheck(this, ReCaptcha2Component);\n\n    _this10 = _super2.call(this, renderer, zone, injector, scriptService);\n    _this10.renderer = renderer;\n    _this10.zone = zone;\n    _this10.injector = injector;\n    _this10.scriptService = scriptService;\n    /**\n     * Name of the global expire callback\n     */\n\n    _this10.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n    /**\n     * Name of the global error callback\n     */\n\n    _this10.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n    /**\n     * Theme\n     */\n\n    _this10.theme = 'light';\n    /**\n     * Size\n     */\n\n    _this10.size = 'normal';\n    _this10.recaptchaType = ReCaptchaType.ReCaptcha2;\n    return _this10;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(ReCaptcha2Component, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      window[this.windowOnErrorCallbackProperty] = {};\n      window[this.windowOnExpireCallbackProperty] = {};\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"captchaSpecificSetup\",\n    value: function captchaSpecificSetup() {\n      this.registerCallbacks();\n    }\n    /**\n     * Gets reCaptcha properties\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCaptchaProperties\",\n    value: function getCaptchaProperties() {\n      var _this11 = this;\n\n      return {\n        'sitekey': this.siteKey,\n        'callback':\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function callback(response) {\n          return _this11.zone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this11.handleCallback(response);\n          });\n        },\n        'expired-callback':\n        /**\n        * @return {?}\n        */\n        function expiredCallback() {\n          return _this11.zone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this11.handleExpireCallback();\n          });\n        },\n        'error-callback':\n        /**\n        * @return {?}\n        */\n        function errorCallback() {\n          return _this11.zone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this11.handleErrorCallback();\n          });\n        },\n        'theme': this.theme,\n        'type': this.type,\n        'size': this.size,\n        'tabindex': this.tabIndex\n      };\n    }\n    /**\n     * Registers global callbacks\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerCallbacks\",\n    value: function registerCallbacks() {\n      window[this.windowOnErrorCallbackProperty] = _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"handleErrorCallback\", this).bind(this);\n      window[this.windowOnExpireCallbackProperty] = _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"handleExpireCallback\", this).bind(this);\n    }\n  }]);\n\n  return ReCaptcha2Component;\n}(BaseReCaptchaComponent);\n\nReCaptcha2Component.Éµfac = function ReCaptcha2Component_Factory(t) {\n  return new (t || ReCaptcha2Component)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Injector), Éµngcc0.ÉµÉµdirectiveInject(ScriptService));\n};\n\nReCaptcha2Component.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: ReCaptcha2Component,\n  selectors: [[\"ngx-recaptcha2\"]],\n  inputs: {\n    theme: \"theme\",\n    size: \"size\",\n    hl: \"hl\"\n  },\n  features: [Éµngcc0.ÉµÉµProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return ReCaptcha2Component;\n    }),\n    multi: true\n  }]), Éµngcc0.ÉµÉµInheritDefinitionFeature, Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"captchaWrapperElem\", \"\"]],\n  template: function ReCaptcha2Component_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nReCaptcha2Component.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: NgZone\n  }, {\n    type: Injector\n  }, {\n    type: ScriptService\n  }];\n};\n\nReCaptcha2Component.propDecorators = {\n  theme: [{\n    type: Input\n  }],\n  size: [{\n    type: Input\n  }],\n  hl: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(ReCaptcha2Component, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-recaptcha2',\n      template: \"\\n  <div #captchaWrapperElem></div>\",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(\n        /**\n        * @return {?}\n        */\n        function () {\n          return ReCaptcha2Component;\n        }),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.Renderer2\n    }, {\n      type: Éµngcc0.NgZone\n    }, {\n      type: Éµngcc0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    theme: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    hl: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ReCaptchaV3Service = /*#__PURE__*/function () {\n  /**\n   * @param {?} scriptService\n   * @param {?} zone\n   */\n  function ReCaptchaV3Service(scriptService, zone) {\n    _classCallCheck(this, ReCaptchaV3Service);\n\n    this.scriptService = scriptService;\n    this.zone = zone;\n  }\n  /**\n   * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\n   * this callback in your backend to get meaningful results.\n   *\n   * For more information see https://developers.google.com/recaptcha/docs/v3\n   *\n   * @param {?} siteKey Site key found in your google admin panel\n   * @param {?} action Action to log\n   * @param {?} callback\n   * @param {?=} config\n   * @return {?}\n   */\n\n\n  _createClass(ReCaptchaV3Service, [{\n    key: \"execute\",\n    value: function execute(siteKey, action, callback, config) {\n      var _this12 = this;\n\n      /** @type {?} */\n      var useGlobalDomain = config && config.useGlobalDomain ? true : false;\n      this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey,\n      /**\n      * @param {?} grecaptcha\n      * @return {?}\n      */\n      function (grecaptcha) {\n        _this12.zone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        function () {\n          grecaptcha.execute(siteKey, {\n            action: action\n          }).then(\n          /**\n          * @param {?} token\n          * @return {?}\n          */\n          function (token) {\n            _this12.zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return callback(token);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return ReCaptchaV3Service;\n}();\n\nReCaptchaV3Service.Éµfac = function ReCaptchaV3Service_Factory(t) {\n  return new (t || ReCaptchaV3Service)(Éµngcc0.ÉµÉµinject(ScriptService), Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone));\n};\n\nReCaptchaV3Service.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: ReCaptchaV3Service,\n  factory: ReCaptchaV3Service.Éµfac\n});\n/** @nocollapse */\n\nReCaptchaV3Service.ctorParameters = function () {\n  return [{\n    type: ScriptService\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScriptService\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxCaptchaModule = function NgxCaptchaModule() {\n  _classCallCheck(this, NgxCaptchaModule);\n};\n\nNgxCaptchaModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: NgxCaptchaModule\n});\nNgxCaptchaModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function NgxCaptchaModule_Factory(t) {\n    return new (t || NgxCaptchaModule)();\n  },\n  providers: [ScriptService, ReCaptchaV3Service],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxCaptchaModule, {\n    declarations: function declarations() {\n      return [ReCaptcha2Component, InvisibleReCaptchaComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [ReCaptcha2Component, InvisibleReCaptchaComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(NgxCaptchaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ReCaptcha2Component, InvisibleReCaptchaComponent],\n      providers: [ScriptService, ReCaptchaV3Service],\n      exports: [ReCaptcha2Component, InvisibleReCaptchaComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, ReCaptcha2Component, ReCaptchaType, ScriptService, ReCaptchaV3Service, NgxCaptchaModule };","map":{"version":3,"sources":["ng:/ngx-captcha/lib/components/base-recaptcha.component.ts","ng:/ngx-captcha/lib/models/recaptcha-type.enum.ts","ng:/ngx-captcha/lib/services/script.service.ts","ng:/ngx-captcha/lib/components/invisible-recaptcha.component.ts","ng:/ngx-captcha/lib/components/recaptcha-2.component.ts","ng:/ngx-captcha/lib/services/recaptcha_v3.service.ts","ng:/ngx-captcha/lib/ngx-captcha.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    AfterViewInit,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Injector,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\n\r\nexport abstract class BaseReCaptchaComponent implements OnChanges, ControlValueAccessor, AfterViewInit {\r\n\r\n    /**\r\n    * Prefix of the captcha element\r\n    */\r\n    protected readonly captchaElemPrefix = 'ngx_captcha_id_';\r\n\r\n    /**\r\n    * Google's site key.\r\n    * You can find this under https://www.google.com/recaptcha\r\n    */\r\n    @Input() siteKey: string;\r\n\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\r\n    @Input() useGlobalDomain: boolean = false;\r\n\r\n    /**\r\n    * Type\r\n    */\r\n    @Input() type: 'audio' | 'image' = 'image';\r\n\r\n    /**\r\n    * Language code. Auto-detects the user's language if unspecified.\r\n    */\r\n    @Input() hl: string;\r\n\r\n    /**\r\n    * Tab index\r\n    */\r\n    @Input() tabIndex = 0;\r\n\r\n    /**\r\n    * Called when captcha receives successful response.\r\n    * Captcha response token is passed to event.\r\n    */\r\n    @Output() success = new EventEmitter<string>();\r\n\r\n    /**\r\n    * Called when captcha is loaded. Event receives id of the captcha\r\n    */\r\n    @Output() load = new EventEmitter<number>();\r\n\r\n    /**\r\n    * Called when captcha is reset.\r\n    */\r\n    @Output() reset = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n    */\r\n    @Output() ready = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Error callback\r\n    */\r\n    @Output() error = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Expired callback\r\n    */\r\n    @Output() expire = new EventEmitter<void>();\r\n\r\n    @ViewChild('captchaWrapperElem') captchaWrapperElem: ElementRef;\r\n    @ViewChild('captchaScriptElem') captchaScriptElem: ElementRef;\r\n\r\n    /**\r\n    * Indicates if captcha should be set on load\r\n    */\r\n    private setupAfterLoad = false;\r\n\r\n    /**\r\n    * Captcha element\r\n    */\r\n    protected captchaElem?: HTMLElement;\r\n\r\n    /**\r\n    * Id of the captcha elem\r\n    */\r\n    protected captchaId?: number;\r\n\r\n    /**\r\n    * Holds last response value\r\n    */\r\n    protected currentResponse?: string;\r\n\r\n    /**\r\n    * If enabled, captcha will reset after receiving success response. This is useful\r\n    * when invisible captcha need to be resolved multiple times on same page\r\n    */\r\n    protected resetCaptchaAfterSuccess = false;\r\n\r\n    /**\r\n    * Captcha type\r\n    */\r\n    protected abstract recaptchaType: ReCaptchaType;\r\n\r\n    /**\r\n    * Required by ControlValueAccessor\r\n    */\r\n    protected onChange: (value: string | undefined) => void;\r\n    protected onTouched: (value: string | undefined) => void;\r\n\r\n    /**\r\n    * Indicates if captcha is loaded\r\n    */\r\n    public isLoaded = false;\r\n\r\n    /**\r\n    * Reference to global reCaptcha API\r\n    */\r\n    public reCaptchaApi?: any;\r\n\r\n    /**\r\n    * Id of the DOM element wrapping captcha\r\n    */\r\n    public captchaElemId?: string;\r\n\r\n    /**\r\n    * Form Control to be enable usage in reactive forms\r\n    */\r\n    public control?: FormControl;\r\n\r\n    protected constructor(\r\n        protected renderer: Renderer2,\r\n        protected zone: NgZone,\r\n        protected injector: Injector,\r\n        protected scriptService: ScriptService,\r\n    ) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl).control;\r\n    }\r\n\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    protected abstract getCaptchaProperties(): any;\r\n\r\n    /**\r\n    * Used for captcha specific setup\r\n    */\r\n    protected abstract captchaSpecificSetup(): void;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        this.setupComponent();\r\n    }\r\n\r\n    /**\r\n    * Gets captcha response as per reCaptcha docs\r\n    */\r\n    getResponse(): string {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n\r\n    /**\r\n    * Gets Id of captcha widget\r\n    */\r\n    getCaptchaId(): number | undefined {\r\n        return this.captchaId;\r\n    }\r\n\r\n    /**\r\n    * Resets captcha\r\n    */\r\n    resetCaptcha(): void {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n\r\n\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Gets last submitted captcha response\r\n    */\r\n    getCurrentResponse(): string | undefined {\r\n        return this.currentResponse;\r\n    }\r\n\r\n    /**\r\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n    */\r\n    reloadCaptcha(): void {\r\n        this.setupComponent();\r\n    }\r\n\r\n    protected ensureCaptchaElem(captchaElemId: string): void {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n\r\n    /**\r\n    * Responsible for instantiating captcha element\r\n    */\r\n    protected renderReCaptcha(): void {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Called when captcha receives response\r\n    * @param callback Callback\r\n    */\r\n    protected handleCallback(callback: any): void {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n\r\n    private setupComponent(): void {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n\r\n    /**\r\n    * Called when google's recaptcha script is ready\r\n    */\r\n    private onloadCallback(grecapcha: any): void {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n\r\n        // fire load event\r\n        this.load.next();\r\n\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n\r\n    private generateNewElemId(): string {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n\r\n    private createAndSetCaptchaElem(): void {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n\r\n        // update captcha elem\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n    }\r\n\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    public writeValue(obj: any): void { }\r\n\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    public registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    /**\r\n    * At some point we might be interested whether the user has touched our component\r\n    */\r\n    public registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    /**\r\n    * Handles error callback\r\n    */\r\n    protected handleErrorCallback(): void {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n\r\n        this.error.next();\r\n    }\r\n\r\n    /**\r\n    * Handles expired callback\r\n    */\r\n    protected handleExpireCallback(): void {\r\n        this.expire.next();\r\n\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\n\r\n","export enum ReCaptchaType {\r\n\r\n    InvisibleReCaptcha,\r\n    ReCaptcha2\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\ndeclare var document: any;\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\r\n    protected readonly windowGrecaptcha = 'grecaptcha';\r\n\r\n    /**\r\n    * Name of the global callback\r\n    */\r\n    protected readonly windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n\r\n    protected readonly globalDomain: string = 'recaptcha.net';\r\n\r\n    protected readonly defaultDomain: string = 'google.com';\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerCaptchaScript(useGlobalDomain: boolean, render: string, onLoad: (grecaptcha: any) => void, language?: string): void {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run(() => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = <any>(() => this.zone.run(\r\n            onLoad.bind(this, window[this.windowGrecaptcha])\r\n        ));\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(): void {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    private grecaptchaScriptLoaded(): boolean {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    private getLanguageParam(hl?: string): string {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n\r\n        return `&hl=${hl}`;\r\n    }\r\n\r\n    /**\r\n    * Url to google api script\r\n    */\r\n    private getCaptchaScriptUrl(useGlobalDomain: boolean, render: string, language?: string): string {\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n\r\n}\r\n","import { Component, forwardRef, Injector, Input, NgZone, OnChanges, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\r\n\r\n  /**\r\n   * This size representing invisible captcha\r\n   */\r\n  protected readonly size = 'invisible';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n   * Badge\r\n   */\r\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\r\n  execute(): void {\r\n    // execute captcha\r\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n  }\r\n\r\n  /**\r\n  * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'badge': this.badge,\r\n      'type': this.type,\r\n      'tabindex': this.tabIndex,\r\n      'size': this.size,\r\n      'theme': this.theme\r\n    };\r\n  }\r\n\r\n\r\n}\r\n\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha2',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ReCaptcha2Component),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n  * Name of the global expire callback\r\n  */\r\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n\r\n  /**\r\n  * Name of the global error callback\r\n  */\r\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n  * Size\r\n  */\r\n  @Input() size: 'compact' | 'normal' = 'normal';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService,\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    window[this.windowOnErrorCallbackProperty] = {};\r\n    window[this.windowOnExpireCallbackProperty] = {};\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n    this.registerCallbacks();\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'theme': this.theme,\r\n      'type': this.type,\r\n      'size': this.size,\r\n      'tabindex': this.tabIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers global callbacks\r\n  */\r\n  private registerCallbacks(): void {\r\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n  }\r\n}\r\n\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class ReCaptchaV3Service {\r\n\r\n    constructor(\r\n        protected scriptService: ScriptService,\r\n        protected zone: NgZone\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     */\r\n    execute(siteKey: string, action: string, callback: (token: string) => void, config?: {\r\n        useGlobalDomain: boolean\r\n    }): void {\r\n\r\n        const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n\r\n        this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, (grecaptcha) => {\r\n            this.zone.runOutsideAngular(() => {\r\n                grecaptcha.execute(siteKey, {\r\n                    action: action\r\n                }).then((token) => {\r\n                    this.zone.run(() => callback(token));\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\r\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\r\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\r\nimport { ScriptService } from './services/script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    ReCaptchaV3Service\r\n  ],\r\n  exports: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ]\r\n})\r\nexport class NgxCaptchaModule {\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}