/**
 * @fileoverview added by tsickle
 * Generated from: lib/tooltip.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input, ComponentFactoryResolver, ApplicationRef, Injector, Output, EventEmitter, Inject, Optional } from '@angular/core';
import { TooltipComponent } from './tooltip.component';
import { TooltipOptionsService } from './tooltip-options.service';
import { defaultOptions, backwardCompatibilityOptions } from './options';
/**
 * @record
 */
import * as Éµngcc0 from '@angular/core';
export function AdComponent() { }
if (false) {
    /** @type {?} */
    AdComponent.prototype.data;
    /** @type {?} */
    AdComponent.prototype.show;
    /** @type {?} */
    AdComponent.prototype.close;
    /** @type {?} */
    AdComponent.prototype.events;
}
var TooltipDirective = /** @class */ (function () {
    function TooltipDirective(initOptions, elementRef, componentFactoryResolver, appRef, injector) {
        this.initOptions = initOptions;
        this.elementRef = elementRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this._showDelay = 0;
        this._hideDelay = 300;
        this._options = {};
        this.events = new EventEmitter();
    }
    Object.defineProperty(TooltipDirective.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && defaultOptions) {
                this._options = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "isTooltipDestroyed", {
        get: /**
         * @return {?}
         */
        function () {
            return this.componentRef && this.componentRef.hostView.destroyed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "destroyDelay", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._destroyDelay) {
                return this._destroyDelay;
            }
            else {
                return Number(this.getHideDelay()) + Number(this.options['animationDuration']);
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._destroyDelay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "tooltipPosition", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.options['position']) {
                return this.options['position'];
            }
            else {
                return this.elementPosition;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        if (this.isDisplayOnHover == false) {
            return;
        }
        this.show();
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        if (this.options['trigger'] === 'hover') {
            this.destroyTooltip();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isDisplayOnClick == false) {
            return;
        }
        this.show();
        this.hideAfterClickTimeoutId = window.setTimeout((/**
         * @return {?}
         */
        function () {
            _this.destroyTooltip();
        }), this.options['hideDelayAfterClick']);
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TooltipDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.initOptions = this.renameProperties(this.initOptions);
        /** @type {?} */
        var changedOptions = this.getProperties(changes);
        changedOptions = this.renameProperties(changedOptions);
        this.applyOptionsDefault(defaultOptions, changedOptions);
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyTooltip({
            fast: true
        });
        if (this.componentSubscribe) {
            this.componentSubscribe.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.getShowDelay = /**
     * @return {?}
     */
    function () {
        return this.options['showDelay'];
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.getHideDelay = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hideDelay = this.options['hideDelay'];
        /** @type {?} */
        var hideDelayTouchscreen = this.options['hideDelayTouchscreen'];
        return this.isTouchScreen ? hideDelayTouchscreen : hideDelay;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TooltipDirective.prototype.getProperties = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var properties = {};
        for (var prop in changes) {
            if (prop !== 'options' && prop !== 'tooltipValue') {
                properties[prop] = changes[prop].currentValue;
            }
            if (prop === 'options') {
                properties = changes[prop].currentValue;
            }
        }
        return properties;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    TooltipDirective.prototype.renameProperties = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        for (var prop in options) {
            if (backwardCompatibilityOptions[prop]) {
                options[backwardCompatibilityOptions[prop]] = options[prop];
                delete options[prop];
            }
        }
        return options;
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.getElementPosition = /**
     * @return {?}
     */
    function () {
        this.elementPosition = this.elementRef.nativeElement.getBoundingClientRect();
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.createTooltip = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.clearTimeouts();
        this.getElementPosition();
        this.createTimeoutId = window.setTimeout((/**
         * @return {?}
         */
        function () {
            _this.appendComponentToBody(TooltipComponent);
        }), this.getShowDelay());
        this.showTimeoutId = window.setTimeout((/**
         * @return {?}
         */
        function () {
            _this.showTooltipElem();
        }), this.getShowDelay());
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    TooltipDirective.prototype.destroyTooltip = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {
            fast: false
        }; }
        this.clearTimeouts();
        if (this.isTooltipDestroyed == false) {
            this.hideTimeoutId = window.setTimeout((/**
             * @return {?}
             */
            function () {
                _this.hideTooltip();
            }), options.fast ? 0 : this.getHideDelay());
            this.destroyTimeoutId = window.setTimeout((/**
             * @return {?}
             */
            function () {
                if (!_this.componentRef || _this.isTooltipDestroyed) {
                    return;
                }
                _this.appRef.detachView(_this.componentRef.hostView);
                _this.componentRef.destroy();
                _this.events.emit({
                    type: 'hidden',
                    position: _this.tooltipPosition
                });
            }), options.fast ? 0 : this.destroyDelay);
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.showTooltipElem = /**
     * @return {?}
     */
    function () {
        this.clearTimeouts();
        ((/** @type {?} */ (this.componentRef.instance))).show = true;
        this.events.emit({
            type: 'show',
            position: this.tooltipPosition
        });
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.hideTooltip = /**
     * @return {?}
     */
    function () {
        if (!this.componentRef || this.isTooltipDestroyed) {
            return;
        }
        ((/** @type {?} */ (this.componentRef.instance))).show = false;
        this.events.emit({
            type: 'hide',
            position: this.tooltipPosition
        });
    };
    /**
     * @param {?} component
     * @param {?=} data
     * @return {?}
     */
    TooltipDirective.prototype.appendComponentToBody = /**
     * @param {?} component
     * @param {?=} data
     * @return {?}
     */
    function (component, data) {
        var _this = this;
        if (data === void 0) { data = {}; }
        this.componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        ((/** @type {?} */ (this.componentRef.instance))).data = {
            value: this.tooltipValue,
            element: this.elementRef.nativeElement,
            elementPosition: this.tooltipPosition,
            options: this.options
        };
        this.appRef.attachView(this.componentRef.hostView);
        /** @type {?} */
        var domElem = (/** @type {?} */ (((/** @type {?} */ (this.componentRef.hostView))).rootNodes[0]));
        document.body.appendChild(domElem);
        this.componentSubscribe = ((/** @type {?} */ (this.componentRef.instance))).events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.handleEvents(event);
        }));
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.clearTimeouts = /**
     * @return {?}
     */
    function () {
        if (this.createTimeoutId) {
            clearTimeout(this.createTimeoutId);
        }
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
        }
        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
        }
        if (this.destroyTimeoutId) {
            clearTimeout(this.destroyTimeoutId);
        }
    };
    Object.defineProperty(TooltipDirective.prototype, "isDisplayOnHover", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.options['display'] == false) {
                return false;
            }
            if (this.options['displayTouchscreen'] == false && this.isTouchScreen) {
                return false;
            }
            if (this.options['trigger'] !== 'hover') {
                return false;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "isDisplayOnClick", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.options['display'] == false) {
                return false;
            }
            if (this.options['displayTouchscreen'] == false && this.isTouchScreen) {
                return false;
            }
            if (this.options['trigger'] != 'click') {
                return false;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "isTouchScreen", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
            /** @type {?} */
            var mq = (/**
             * @param {?} query
             * @return {?}
             */
            function (query) {
                return window.matchMedia(query).matches;
            });
            if (('ontouchstart' in window)) {
                return true;
            }
            // include the 'heartz' as a way to have a non matching MQ to help terminate the join
            // https://git.io/vznFH
            /** @type {?} */
            var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');
            return mq(query);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} defaultOptions
     * @param {?} options
     * @return {?}
     */
    TooltipDirective.prototype.applyOptionsDefault = /**
     * @param {?} defaultOptions
     * @param {?} options
     * @return {?}
     */
    function (defaultOptions, options) {
        this.options = Object.assign({}, defaultOptions, this.initOptions || {}, options);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TooltipDirective.prototype.handleEvents = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.type === 'shown') {
            this.events.emit({
                type: 'shown',
                position: this.tooltipPosition
            });
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.show = /**
     * @return {?}
     */
    function () {
        if (!this.componentRef || this.isTooltipDestroyed) {
            this.createTooltip();
        }
        else if (!this.isTooltipDestroyed) {
            this.showTooltipElem();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.destroyTooltip();
    };
    /** @nocollapse */
    TooltipDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TooltipOptionsService,] }] },
        { type: ElementRef },
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    TooltipDirective.propDecorators = {
        options: [{ type: Input, args: ['options',] }],
        tooltipValue: [{ type: Input, args: ['tooltip',] }],
        placement: [{ type: Input, args: ['placement',] }],
        autoPlacement: [{ type: Input, args: ['autoPlacement',] }],
        contentType: [{ type: Input, args: ['content-type',] }],
        hideDelayMobile: [{ type: Input, args: ['hide-delay-mobile',] }],
        hideDelayTouchscreen: [{ type: Input, args: ['hideDelayTouchscreen',] }],
        zIndex: [{ type: Input, args: ['z-index',] }],
        animationDuration: [{ type: Input, args: ['animation-duration',] }],
        trigger: [{ type: Input, args: ['trigger',] }],
        tooltipClass: [{ type: Input, args: ['tooltip-class',] }],
        display: [{ type: Input, args: ['display',] }],
        displayMobile: [{ type: Input, args: ['display-mobile',] }],
        displayTouchscreen: [{ type: Input, args: ['displayTouchscreen',] }],
        shadow: [{ type: Input, args: ['shadow',] }],
        theme: [{ type: Input, args: ['theme',] }],
        offset: [{ type: Input, args: ['offset',] }],
        width: [{ type: Input, args: ['width',] }],
        maxWidth: [{ type: Input, args: ['max-width',] }],
        id: [{ type: Input, args: ['id',] }],
        showDelay: [{ type: Input, args: ['show-delay',] }],
        hideDelay: [{ type: Input, args: ['hide-delay',] }],
        hideDelayAfterClick: [{ type: Input, args: ['hideDelayAfterClick',] }],
        pointerEvents: [{ type: Input, args: ['pointerEvents',] }],
        position: [{ type: Input, args: ['position',] }],
        events: [{ type: Output }],
        onMouseEnter: [{ type: HostListener, args: ['focusin',] }, { type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['focusout',] }, { type: HostListener, args: ['mouseleave',] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
TooltipDirective.Éµfac = function TooltipDirective_Factory(t) { return new (t || TooltipDirective)(Éµngcc0.ÉµÉµdirectiveInject(TooltipOptionsService, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ApplicationRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Injector)); };
TooltipDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: TooltipDirective, selectors: [["", "tooltip", ""]], hostBindings: function TooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµlistener("focusin", function TooltipDirective_focusin_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseenter", function TooltipDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("focusout", function TooltipDirective_focusout_HostBindingHandler() { return ctx.onMouseLeave(); })("mouseleave", function TooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("click", function TooltipDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { options: "options", tooltipValue: ["tooltip", "tooltipValue"], placement: "placement", autoPlacement: "autoPlacement", contentType: ["content-type", "contentType"], hideDelayMobile: ["hide-delay-mobile", "hideDelayMobile"], hideDelayTouchscreen: "hideDelayTouchscreen", zIndex: ["z-index", "zIndex"], animationDuration: ["animation-duration", "animationDuration"], trigger: "trigger", tooltipClass: ["tooltip-class", "tooltipClass"], display: "display", displayMobile: ["display-mobile", "displayMobile"], displayTouchscreen: "displayTouchscreen", shadow: "shadow", theme: "theme", offset: "offset", width: "width", maxWidth: ["max-width", "maxWidth"], id: "id", showDelay: ["show-delay", "showDelay"], hideDelay: ["hide-delay", "hideDelay"], hideDelayAfterClick: "hideDelayAfterClick", pointerEvents: "pointerEvents", position: "position" }, outputs: { events: "events" }, exportAs: ["tooltip"], features: [Éµngcc0.ÉµÉµNgOnChangesFeature] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(TooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[tooltip]',
                exportAs: 'tooltip'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TooltipOptionsService]
            }] }, { type: Éµngcc0.ElementRef }, { type: Éµngcc0.ComponentFactoryResolver }, { type: Éµngcc0.ApplicationRef }, { type: Éµngcc0.Injector }]; }, { events: [{
            type: Output
        }], options: [{
            type: Input,
            args: ['options']
        }], onMouseEnter: [{
            type: HostListener,
            args: ['focusin']
        }, {
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['focusout']
        }, {
            type: HostListener,
            args: ['mouseleave']
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], tooltipValue: [{
            type: Input,
            args: ['tooltip']
        }], placement: [{
            type: Input,
            args: ['placement']
        }], autoPlacement: [{
            type: Input,
            args: ['autoPlacement']
        }], contentType: [{
            type: Input,
            args: ['content-type']
        }], hideDelayMobile: [{
            type: Input,
            args: ['hide-delay-mobile']
        }], hideDelayTouchscreen: [{
            type: Input,
            args: ['hideDelayTouchscreen']
        }], zIndex: [{
            type: Input,
            args: ['z-index']
        }], animationDuration: [{
            type: Input,
            args: ['animation-duration']
        }], trigger: [{
            type: Input,
            args: ['trigger']
        }], tooltipClass: [{
            type: Input,
            args: ['tooltip-class']
        }], display: [{
            type: Input,
            args: ['display']
        }], displayMobile: [{
            type: Input,
            args: ['display-mobile']
        }], displayTouchscreen: [{
            type: Input,
            args: ['displayTouchscreen']
        }], shadow: [{
            type: Input,
            args: ['shadow']
        }], theme: [{
            type: Input,
            args: ['theme']
        }], offset: [{
            type: Input,
            args: ['offset']
        }], width: [{
            type: Input,
            args: ['width']
        }], maxWidth: [{
            type: Input,
            args: ['max-width']
        }], id: [{
            type: Input,
            args: ['id']
        }], showDelay: [{
            type: Input,
            args: ['show-delay']
        }], hideDelay: [{
            type: Input,
            args: ['hide-delay']
        }], hideDelayAfterClick: [{
            type: Input,
            args: ['hideDelayAfterClick']
        }], pointerEvents: [{
            type: Input,
            args: ['pointerEvents']
        }], position: [{
            type: Input,
            args: ['position']
        }] }); })();
    return TooltipDirective;
}());
export { TooltipDirective };
if (false) {
    /** @type {?} */
    TooltipDirective.prototype.hideTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.destroyTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.hideAfterClickTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.createTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.showTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.componentRef;
    /** @type {?} */
    TooltipDirective.prototype.elementPosition;
    /** @type {?} */
    TooltipDirective.prototype._showDelay;
    /** @type {?} */
    TooltipDirective.prototype._hideDelay;
    /** @type {?} */
    TooltipDirective.prototype._id;
    /** @type {?} */
    TooltipDirective.prototype._options;
    /** @type {?} */
    TooltipDirective.prototype._defaultOptions;
    /** @type {?} */
    TooltipDirective.prototype._destroyDelay;
    /** @type {?} */
    TooltipDirective.prototype.componentSubscribe;
    /** @type {?} */
    TooltipDirective.prototype.tooltipValue;
    /** @type {?} */
    TooltipDirective.prototype.placement;
    /** @type {?} */
    TooltipDirective.prototype.autoPlacement;
    /** @type {?} */
    TooltipDirective.prototype.contentType;
    /** @type {?} */
    TooltipDirective.prototype.hideDelayMobile;
    /** @type {?} */
    TooltipDirective.prototype.hideDelayTouchscreen;
    /** @type {?} */
    TooltipDirective.prototype.zIndex;
    /** @type {?} */
    TooltipDirective.prototype.animationDuration;
    /** @type {?} */
    TooltipDirective.prototype.trigger;
    /** @type {?} */
    TooltipDirective.prototype.tooltipClass;
    /** @type {?} */
    TooltipDirective.prototype.display;
    /** @type {?} */
    TooltipDirective.prototype.displayMobile;
    /** @type {?} */
    TooltipDirective.prototype.displayTouchscreen;
    /** @type {?} */
    TooltipDirective.prototype.shadow;
    /** @type {?} */
    TooltipDirective.prototype.theme;
    /** @type {?} */
    TooltipDirective.prototype.offset;
    /** @type {?} */
    TooltipDirective.prototype.width;
    /** @type {?} */
    TooltipDirective.prototype.maxWidth;
    /** @type {?} */
    TooltipDirective.prototype.id;
    /** @type {?} */
    TooltipDirective.prototype.showDelay;
    /** @type {?} */
    TooltipDirective.prototype.hideDelay;
    /** @type {?} */
    TooltipDirective.prototype.hideDelayAfterClick;
    /** @type {?} */
    TooltipDirective.prototype.pointerEvents;
    /** @type {?} */
    TooltipDirective.prototype.position;
    /** @type {?} */
    TooltipDirective.prototype.events;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.initOptions;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.injector;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,