/**
 * @fileoverview added by tsickle
 * Generated from: lib/tooltip.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input, ComponentFactoryResolver, ApplicationRef, Injector, Output, EventEmitter, Inject, Optional } from '@angular/core';
import { TooltipComponent } from './tooltip.component';
import { TooltipOptionsService } from './tooltip-options.service';
import { defaultOptions, backwardCompatibilityOptions } from './options';
/**
 * @record
 */
import * as Éµngcc0 from '@angular/core';
export function AdComponent() { }
if (false) {
    /** @type {?} */
    AdComponent.prototype.data;
    /** @type {?} */
    AdComponent.prototype.show;
    /** @type {?} */
    AdComponent.prototype.close;
    /** @type {?} */
    AdComponent.prototype.events;
}
export class TooltipDirective {
    /**
     * @param {?} initOptions
     * @param {?} elementRef
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     */
    constructor(initOptions, elementRef, componentFactoryResolver, appRef, injector) {
        this.initOptions = initOptions;
        this.elementRef = elementRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this._showDelay = 0;
        this._hideDelay = 300;
        this._options = {};
        this.events = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        if (value && defaultOptions) {
            this._options = value;
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @return {?}
     */
    get isTooltipDestroyed() {
        return this.componentRef && this.componentRef.hostView.destroyed;
    }
    /**
     * @return {?}
     */
    get destroyDelay() {
        if (this._destroyDelay) {
            return this._destroyDelay;
        }
        else {
            return Number(this.getHideDelay()) + Number(this.options['animationDuration']);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set destroyDelay(value) {
        this._destroyDelay = value;
    }
    /**
     * @return {?}
     */
    get tooltipPosition() {
        if (this.options['position']) {
            return this.options['position'];
        }
        else {
            return this.elementPosition;
        }
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
        if (this.isDisplayOnHover == false) {
            return;
        }
        this.show();
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        if (this.options['trigger'] === 'hover') {
            this.destroyTooltip();
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.isDisplayOnClick == false) {
            return;
        }
        this.show();
        this.hideAfterClickTimeoutId = window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.destroyTooltip();
        }), this.options['hideDelayAfterClick']);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.initOptions = this.renameProperties(this.initOptions);
        /** @type {?} */
        let changedOptions = this.getProperties(changes);
        changedOptions = this.renameProperties(changedOptions);
        this.applyOptionsDefault(defaultOptions, changedOptions);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyTooltip({
            fast: true
        });
        if (this.componentSubscribe) {
            this.componentSubscribe.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    getShowDelay() {
        return this.options['showDelay'];
    }
    /**
     * @return {?}
     */
    getHideDelay() {
        /** @type {?} */
        const hideDelay = this.options['hideDelay'];
        /** @type {?} */
        const hideDelayTouchscreen = this.options['hideDelayTouchscreen'];
        return this.isTouchScreen ? hideDelayTouchscreen : hideDelay;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    getProperties(changes) {
        /** @type {?} */
        let properties = {};
        for (var prop in changes) {
            if (prop !== 'options' && prop !== 'tooltipValue') {
                properties[prop] = changes[prop].currentValue;
            }
            if (prop === 'options') {
                properties = changes[prop].currentValue;
            }
        }
        return properties;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    renameProperties(options) {
        for (var prop in options) {
            if (backwardCompatibilityOptions[prop]) {
                options[backwardCompatibilityOptions[prop]] = options[prop];
                delete options[prop];
            }
        }
        return options;
    }
    /**
     * @return {?}
     */
    getElementPosition() {
        this.elementPosition = this.elementRef.nativeElement.getBoundingClientRect();
    }
    /**
     * @return {?}
     */
    createTooltip() {
        this.clearTimeouts();
        this.getElementPosition();
        this.createTimeoutId = window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.appendComponentToBody(TooltipComponent);
        }), this.getShowDelay());
        this.showTimeoutId = window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.showTooltipElem();
        }), this.getShowDelay());
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    destroyTooltip(options = {
        fast: false
    }) {
        this.clearTimeouts();
        if (this.isTooltipDestroyed == false) {
            this.hideTimeoutId = window.setTimeout((/**
             * @return {?}
             */
            () => {
                this.hideTooltip();
            }), options.fast ? 0 : this.getHideDelay());
            this.destroyTimeoutId = window.setTimeout((/**
             * @return {?}
             */
            () => {
                if (!this.componentRef || this.isTooltipDestroyed) {
                    return;
                }
                this.appRef.detachView(this.componentRef.hostView);
                this.componentRef.destroy();
                this.events.emit({
                    type: 'hidden',
                    position: this.tooltipPosition
                });
            }), options.fast ? 0 : this.destroyDelay);
        }
    }
    /**
     * @return {?}
     */
    showTooltipElem() {
        this.clearTimeouts();
        ((/** @type {?} */ (this.componentRef.instance))).show = true;
        this.events.emit({
            type: 'show',
            position: this.tooltipPosition
        });
    }
    /**
     * @return {?}
     */
    hideTooltip() {
        if (!this.componentRef || this.isTooltipDestroyed) {
            return;
        }
        ((/** @type {?} */ (this.componentRef.instance))).show = false;
        this.events.emit({
            type: 'hide',
            position: this.tooltipPosition
        });
    }
    /**
     * @param {?} component
     * @param {?=} data
     * @return {?}
     */
    appendComponentToBody(component, data = {}) {
        this.componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        ((/** @type {?} */ (this.componentRef.instance))).data = {
            value: this.tooltipValue,
            element: this.elementRef.nativeElement,
            elementPosition: this.tooltipPosition,
            options: this.options
        };
        this.appRef.attachView(this.componentRef.hostView);
        /** @type {?} */
        const domElem = (/** @type {?} */ (((/** @type {?} */ (this.componentRef.hostView))).rootNodes[0]));
        document.body.appendChild(domElem);
        this.componentSubscribe = ((/** @type {?} */ (this.componentRef.instance))).events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.handleEvents(event);
        }));
    }
    /**
     * @return {?}
     */
    clearTimeouts() {
        if (this.createTimeoutId) {
            clearTimeout(this.createTimeoutId);
        }
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
        }
        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
        }
        if (this.destroyTimeoutId) {
            clearTimeout(this.destroyTimeoutId);
        }
    }
    /**
     * @return {?}
     */
    get isDisplayOnHover() {
        if (this.options['display'] == false) {
            return false;
        }
        if (this.options['displayTouchscreen'] == false && this.isTouchScreen) {
            return false;
        }
        if (this.options['trigger'] !== 'hover') {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    get isDisplayOnClick() {
        if (this.options['display'] == false) {
            return false;
        }
        if (this.options['displayTouchscreen'] == false && this.isTouchScreen) {
            return false;
        }
        if (this.options['trigger'] != 'click') {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    get isTouchScreen() {
        /** @type {?} */
        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
        /** @type {?} */
        var mq = (/**
         * @param {?} query
         * @return {?}
         */
        function (query) {
            return window.matchMedia(query).matches;
        });
        if (('ontouchstart' in window)) {
            return true;
        }
        // include the 'heartz' as a way to have a non matching MQ to help terminate the join
        // https://git.io/vznFH
        /** @type {?} */
        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');
        return mq(query);
    }
    /**
     * @param {?} defaultOptions
     * @param {?} options
     * @return {?}
     */
    applyOptionsDefault(defaultOptions, options) {
        this.options = Object.assign({}, defaultOptions, this.initOptions || {}, options);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleEvents(event) {
        if (event.type === 'shown') {
            this.events.emit({
                type: 'shown',
                position: this.tooltipPosition
            });
        }
    }
    /**
     * @return {?}
     */
    show() {
        if (!this.componentRef || this.isTooltipDestroyed) {
            this.createTooltip();
        }
        else if (!this.isTooltipDestroyed) {
            this.showTooltipElem();
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.destroyTooltip();
    }
}
TooltipDirective.Éµfac = function TooltipDirective_Factory(t) { return new (t || TooltipDirective)(Éµngcc0.ÉµÉµdirectiveInject(TooltipOptionsService, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ApplicationRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Injector)); };
TooltipDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: TooltipDirective, selectors: [["", "tooltip", ""]], hostBindings: function TooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµlistener("focusin", function TooltipDirective_focusin_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseenter", function TooltipDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("focusout", function TooltipDirective_focusout_HostBindingHandler() { return ctx.onMouseLeave(); })("mouseleave", function TooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("click", function TooltipDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { options: "options", tooltipValue: ["tooltip", "tooltipValue"], placement: "placement", autoPlacement: "autoPlacement", contentType: ["content-type", "contentType"], hideDelayMobile: ["hide-delay-mobile", "hideDelayMobile"], hideDelayTouchscreen: "hideDelayTouchscreen", zIndex: ["z-index", "zIndex"], animationDuration: ["animation-duration", "animationDuration"], trigger: "trigger", tooltipClass: ["tooltip-class", "tooltipClass"], display: "display", displayMobile: ["display-mobile", "displayMobile"], displayTouchscreen: "displayTouchscreen", shadow: "shadow", theme: "theme", offset: "offset", width: "width", maxWidth: ["max-width", "maxWidth"], id: "id", showDelay: ["show-delay", "showDelay"], hideDelay: ["hide-delay", "hideDelay"], hideDelayAfterClick: "hideDelayAfterClick", pointerEvents: "pointerEvents", position: "position" }, outputs: { events: "events" }, exportAs: ["tooltip"], features: [Éµngcc0.ÉµÉµNgOnChangesFeature] });
/** @nocollapse */
TooltipDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TooltipOptionsService,] }] },
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
TooltipDirective.propDecorators = {
    options: [{ type: Input, args: ['options',] }],
    tooltipValue: [{ type: Input, args: ['tooltip',] }],
    placement: [{ type: Input, args: ['placement',] }],
    autoPlacement: [{ type: Input, args: ['autoPlacement',] }],
    contentType: [{ type: Input, args: ['content-type',] }],
    hideDelayMobile: [{ type: Input, args: ['hide-delay-mobile',] }],
    hideDelayTouchscreen: [{ type: Input, args: ['hideDelayTouchscreen',] }],
    zIndex: [{ type: Input, args: ['z-index',] }],
    animationDuration: [{ type: Input, args: ['animation-duration',] }],
    trigger: [{ type: Input, args: ['trigger',] }],
    tooltipClass: [{ type: Input, args: ['tooltip-class',] }],
    display: [{ type: Input, args: ['display',] }],
    displayMobile: [{ type: Input, args: ['display-mobile',] }],
    displayTouchscreen: [{ type: Input, args: ['displayTouchscreen',] }],
    shadow: [{ type: Input, args: ['shadow',] }],
    theme: [{ type: Input, args: ['theme',] }],
    offset: [{ type: Input, args: ['offset',] }],
    width: [{ type: Input, args: ['width',] }],
    maxWidth: [{ type: Input, args: ['max-width',] }],
    id: [{ type: Input, args: ['id',] }],
    showDelay: [{ type: Input, args: ['show-delay',] }],
    hideDelay: [{ type: Input, args: ['hide-delay',] }],
    hideDelayAfterClick: [{ type: Input, args: ['hideDelayAfterClick',] }],
    pointerEvents: [{ type: Input, args: ['pointerEvents',] }],
    position: [{ type: Input, args: ['position',] }],
    events: [{ type: Output }],
    onMouseEnter: [{ type: HostListener, args: ['focusin',] }, { type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['focusout',] }, { type: HostListener, args: ['mouseleave',] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(TooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[tooltip]',
                exportAs: 'tooltip'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TooltipOptionsService]
            }] }, { type: Éµngcc0.ElementRef }, { type: Éµngcc0.ComponentFactoryResolver }, { type: Éµngcc0.ApplicationRef }, { type: Éµngcc0.Injector }]; }, { events: [{
            type: Output
        }], options: [{
            type: Input,
            args: ['options']
        }], onMouseEnter: [{
            type: HostListener,
            args: ['focusin']
        }, {
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['focusout']
        }, {
            type: HostListener,
            args: ['mouseleave']
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], tooltipValue: [{
            type: Input,
            args: ['tooltip']
        }], placement: [{
            type: Input,
            args: ['placement']
        }], autoPlacement: [{
            type: Input,
            args: ['autoPlacement']
        }], contentType: [{
            type: Input,
            args: ['content-type']
        }], hideDelayMobile: [{
            type: Input,
            args: ['hide-delay-mobile']
        }], hideDelayTouchscreen: [{
            type: Input,
            args: ['hideDelayTouchscreen']
        }], zIndex: [{
            type: Input,
            args: ['z-index']
        }], animationDuration: [{
            type: Input,
            args: ['animation-duration']
        }], trigger: [{
            type: Input,
            args: ['trigger']
        }], tooltipClass: [{
            type: Input,
            args: ['tooltip-class']
        }], display: [{
            type: Input,
            args: ['display']
        }], displayMobile: [{
            type: Input,
            args: ['display-mobile']
        }], displayTouchscreen: [{
            type: Input,
            args: ['displayTouchscreen']
        }], shadow: [{
            type: Input,
            args: ['shadow']
        }], theme: [{
            type: Input,
            args: ['theme']
        }], offset: [{
            type: Input,
            args: ['offset']
        }], width: [{
            type: Input,
            args: ['width']
        }], maxWidth: [{
            type: Input,
            args: ['max-width']
        }], id: [{
            type: Input,
            args: ['id']
        }], showDelay: [{
            type: Input,
            args: ['show-delay']
        }], hideDelay: [{
            type: Input,
            args: ['hide-delay']
        }], hideDelayAfterClick: [{
            type: Input,
            args: ['hideDelayAfterClick']
        }], pointerEvents: [{
            type: Input,
            args: ['pointerEvents']
        }], position: [{
            type: Input,
            args: ['position']
        }] }); })();
if (false) {
    /** @type {?} */
    TooltipDirective.prototype.hideTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.destroyTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.hideAfterClickTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.createTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.showTimeoutId;
    /** @type {?} */
    TooltipDirective.prototype.componentRef;
    /** @type {?} */
    TooltipDirective.prototype.elementPosition;
    /** @type {?} */
    TooltipDirective.prototype._showDelay;
    /** @type {?} */
    TooltipDirective.prototype._hideDelay;
    /** @type {?} */
    TooltipDirective.prototype._id;
    /** @type {?} */
    TooltipDirective.prototype._options;
    /** @type {?} */
    TooltipDirective.prototype._defaultOptions;
    /** @type {?} */
    TooltipDirective.prototype._destroyDelay;
    /** @type {?} */
    TooltipDirective.prototype.componentSubscribe;
    /** @type {?} */
    TooltipDirective.prototype.tooltipValue;
    /** @type {?} */
    TooltipDirective.prototype.placement;
    /** @type {?} */
    TooltipDirective.prototype.autoPlacement;
    /** @type {?} */
    TooltipDirective.prototype.contentType;
    /** @type {?} */
    TooltipDirective.prototype.hideDelayMobile;
    /** @type {?} */
    TooltipDirective.prototype.hideDelayTouchscreen;
    /** @type {?} */
    TooltipDirective.prototype.zIndex;
    /** @type {?} */
    TooltipDirective.prototype.animationDuration;
    /** @type {?} */
    TooltipDirective.prototype.trigger;
    /** @type {?} */
    TooltipDirective.prototype.tooltipClass;
    /** @type {?} */
    TooltipDirective.prototype.display;
    /** @type {?} */
    TooltipDirective.prototype.displayMobile;
    /** @type {?} */
    TooltipDirective.prototype.displayTouchscreen;
    /** @type {?} */
    TooltipDirective.prototype.shadow;
    /** @type {?} */
    TooltipDirective.prototype.theme;
    /** @type {?} */
    TooltipDirective.prototype.offset;
    /** @type {?} */
    TooltipDirective.prototype.width;
    /** @type {?} */
    TooltipDirective.prototype.maxWidth;
    /** @type {?} */
    TooltipDirective.prototype.id;
    /** @type {?} */
    TooltipDirective.prototype.showDelay;
    /** @type {?} */
    TooltipDirective.prototype.hideDelay;
    /** @type {?} */
    TooltipDirective.prototype.hideDelayAfterClick;
    /** @type {?} */
    TooltipDirective.prototype.pointerEvents;
    /** @type {?} */
    TooltipDirective.prototype.position;
    /** @type {?} */
    TooltipDirective.prototype.events;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.initOptions;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.injector;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZzItdG9vbHRpcC1kaXJlY3RpdmUvbGliL3Rvb2x0aXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSx3QkFBd0IsRUFBbUIsY0FBYyxFQUFFLFFBQVEsRUFBd0IsTUFBTSxFQUFFLFlBQVksRUFBYSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pOLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxjQUFjLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDekU7QUFBSTtBQUFXOztBQUVmLGlDQUtDO0FBQ0Q7QUFDWTtBQUNRLElBUGhCLDJCQUFVO0FBQ2Q7QUFDRSxJQURFLDJCQUFjO0FBQ2xCO0FBQ0MsSUFERyw0QkFBZTtBQUNuQjtBQUdDLElBSEcsNkJBQVk7QUFDaEI7QUFPQSxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCO0FBQ087QUFDRztBQUNEO0FBQ007QUFDSjtBQUNBO0FBQVEsSUFxRWYsWUFDdUQsV0FBVyxFQUN0RCxVQUFzQixFQUN0Qix3QkFBa0QsRUFDbEQsTUFBc0IsRUFDdEIsUUFBa0I7QUFBSSxRQUpxQixnQkFBVyxHQUFYLFdBQVcsQ0FBQTtBQUFDLFFBQ3ZELGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUN2Qiw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO0FBQUMsUUFDbkQsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7QUFBQyxRQUN2QixhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUF4RS9CLGVBQVUsR0FBUSxDQUFDLENBQUM7QUFDeEIsUUFBSSxlQUFVLEdBQVcsR0FBRyxD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K0I7QUFDbkM7QUFBcUIsSUFBakIsa0NBQWdDO0FBQ3BDO0FBQXFCLElBQWpCLGlDQUE4QjtBQUNsQztBQUFxQixJQUFqQixvQ0FBcUM7QUFDekM7QUFBcUIsSUFBakIsOEJBQXFCO0FBQ3pCO0FBQXFCLElBQWpCLHFDQUF1QztBQUMzQztBQUFxQixJQUFqQixxQ0FBdUM7QUFDM0M7QUFBcUIsSUFBakIsK0NBQTBEO0FBQzlEO0FBQXFCLElBQWpCLHlDQUF1RDtBQUMzRDtBQUFxQixJQUFqQixvQ0FBeUQ7QUFDN0Q7QUFDb0IsSUF1QmhCLGtDQUFxRTtBQUN6RTtBQUNPO0FBQ0E7QUFBZ0I7QUFBUSxJQUF2Qix1Q0FBOEQ7QUFBQztBQUNoRTtBQUFpQjtBQUN4QjtBQUFRLElBREEsc0NBQThCO0FBQUM7QUFDaEM7QUFBaUI7QUFBZ0I7QUFBUSxJQUF4QyxvREFBMEQ7QUFBQztBQUM1RDtBQUFpQjtBQUN4QjtBQUFRLElBREEsa0NBQThCO0FBQUM7QUFDaEM7QUFBaUI7QUFFeEI7QUFBUSxJQUZBLG9DQUEwQjtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRW1iZWRkZWRWaWV3UmVmLCBBcHBsaWNhdGlvblJlZiwgSW5qZWN0b3IsIENvbXBvbmVudFJlZiwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRvb2x0aXBDb21wb25lbnQgfSBmcm9tICcuL3Rvb2x0aXAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVG9vbHRpcE9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi90b29sdGlwLW9wdGlvbnMuc2VydmljZSc7XHJcbmltcG9ydCB7IGRlZmF1bHRPcHRpb25zLCBiYWNrd2FyZENvbXBhdGliaWxpdHlPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcclxuaW1wb3J0IHsgVG9vbHRpcE9wdGlvbnMgfSBmcm9tICcuL3Rvb2x0aXAtb3B0aW9ucy5pbnRlcmZhY2UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBZENvbXBvbmVudCB7XHJcbiAgICBkYXRhOiBhbnk7XHJcbiAgICBzaG93OiBib29sZWFuO1xyXG4gICAgY2xvc2U6IGJvb2xlYW47XHJcbiAgICBldmVudHM6IGFueTtcclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1t0b29sdGlwXScsXHJcbiAgICBleHBvcnRBczogJ3Rvb2x0aXAnLFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFRvb2x0aXBEaXJlY3RpdmUge1xyXG5cclxuICAgIGhpZGVUaW1lb3V0SWQ6IG51bWJlcjtcclxuICAgIGRlc3Ryb3lUaW1lb3V0SWQ6IG51bWJlcjtcclxuICAgIGhpZGVBZnRlckNsaWNrVGltZW91dElkOiBudW1iZXI7XHJcbiAgICBjcmVhdGVUaW1lb3V0SWQ6IG51bWJlcjtcclxuICAgIHNob3dUaW1lb3V0SWQ6IG51bWJlcjtcclxuICAgIGNvbXBvbmVudFJlZjogYW55O1xyXG4gICAgZWxlbWVudFBvc2l0aW9uOiBhbnk7XHJcbiAgICBfc2hvd0RlbGF5OiBhbnkgPSAwO1xyXG4gICAgX2hpZGVEZWxheTogbnVtYmVyID0gMzAwO1xyXG4gICAgX2lkOiBhbnk7XHJcbiAgICBfb3B0aW9uczogYW55ID0ge307XHJcbiAgICBfZGVmYXVsdE9wdGlvbnM6IGFueTtcclxuICAgIF9kZXN0cm95RGVsYXk6IG51bWJlcjtcclxuICAgIGNvbXBvbmVudFN1YnNjcmliZTogYW55O1xyXG5cclxuICAgIEBJbnB1dCgnb3B0aW9ucycpIHNldCBvcHRpb25zKHZhbHVlOiBUb29sdGlwT3B0aW9ucykge1xyXG4gICAgICAgIGlmICh2YWx1ZSAmJiBkZWZhdWx0T3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IG9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCd0b29sdGlwJykgdG9vbHRpcFZhbHVlOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ3BsYWNlbWVudCcpIHBsYWNlbWVudDogc3RyaW5nO1xyXG4gICAgQElucHV0KCdhdXRvUGxhY2VtZW50JykgYXV0b1BsYWNlbWVudDogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgnY29udGVudC10eXBlJykgY29udGVudFR5cGU6IHN0cmluZztcclxuICAgIEBJbnB1dCgnaGlkZS1kZWxheS1tb2JpbGUnKSBoaWRlRGVsYXlNb2JpbGU6IG51bWJlcjtcclxuICAgIEBJbnB1dCgnaGlkZURlbGF5VG91Y2hzY3JlZW4nKSBoaWRlRGVsYXlUb3VjaHNjcmVlbjogbnVtYmVyO1xyXG4gICAgQElucHV0KCd6LWluZGV4JykgekluZGV4OiBudW1iZXI7XHJcbiAgICBASW5wdXQoJ2FuaW1hdGlvbi1kdXJhdGlvbicpIGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXI7XHJcbiAgICBASW5wdXQoJ3RyaWdnZXInKSB0cmlnZ2VyOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ3Rvb2x0aXAtY2xhc3MnKSB0b29sdGlwQ2xhc3M6IHN0cmluZztcclxuICAgIEBJbnB1dCgnZGlzcGxheScpIGRpc3BsYXk6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoJ2Rpc3BsYXktbW9iaWxlJykgZGlzcGxheU1vYmlsZTogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgnZGlzcGxheVRvdWNoc2NyZWVuJykgZGlzcGxheVRvdWNoc2NyZWVuOiBib29sZWFuO1xyXG4gICAgQElucHV0KCdzaGFkb3cnKSBzaGFkb3c6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoJ3RoZW1lJykgdGhlbWU6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoJ29mZnNldCcpIG9mZnNldDogbnVtYmVyO1xyXG4gICAgQElucHV0KCd3aWR0aCcpIHdpZHRoOiBudW1iZXI7XHJcbiAgICBASW5wdXQoJ21heC13aWR0aCcpIG1heFdpZHRoOiBudW1iZXI7XHJcbiAgICBASW5wdXQoJ2lkJykgaWQ6IGFueTtcclxuICAgIEBJbnB1dCgnc2hvdy1kZWxheScpIHNob3dEZWxheTogbnVtYmVyO1xyXG4gICAgQElucHV0KCdoaWRlLWRlbGF5JykgaGlkZURlbGF5OiBudW1iZXI7XHJcbiAgICBASW5wdXQoJ2hpZGVEZWxheUFmdGVyQ2xpY2snKSBoaWRlRGVsYXlBZnRlckNsaWNrOiBudW1iZXI7XHJcbiAgICBASW5wdXQoJ3BvaW50ZXJFdmVudHMnKSBwb2ludGVyRXZlbnRzOiAnYXV0bycgfCAnbm9uZSc7XHJcbiAgICBASW5wdXQoJ3Bvc2l0aW9uJykgcG9zaXRpb246IHt0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyfTtcclxuXHJcbiAgICBnZXQgaXNUb29sdGlwRGVzdHJveWVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudFJlZiAmJiB0aGlzLmNvbXBvbmVudFJlZi5ob3N0Vmlldy5kZXN0cm95ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRlc3Ryb3lEZWxheSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVzdHJveURlbGF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZXN0cm95RGVsYXk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih0aGlzLmdldEhpZGVEZWxheSgpKSArIE51bWJlcih0aGlzLm9wdGlvbnNbJ2FuaW1hdGlvbkR1cmF0aW9uJ10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldCBkZXN0cm95RGVsYXkodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEZWxheSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0b29sdGlwUG9zaXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1sncG9zaXRpb24nXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zWydwb3NpdGlvbiddO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRQb3NpdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQE91dHB1dCgpIGV2ZW50czogRXZlbnRFbWl0dGVyIDwgYW55ID4gPSBuZXcgRXZlbnRFbWl0dGVyIDwgYW55ID4gKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChUb29sdGlwT3B0aW9uc1NlcnZpY2UpIHByaXZhdGUgaW5pdE9wdGlvbnMsXHJcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7fVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzaW4nKVxyXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicpXHJcbiAgICBvbk1vdXNlRW50ZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwbGF5T25Ib3ZlciA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNob3coKTtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdmb2N1c291dCcpXHJcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJylcclxuICAgIG9uTW91c2VMZWF2ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zWyd0cmlnZ2VyJ10gPT09ICdob3ZlcicpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95VG9vbHRpcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXHJcbiAgICBvbkNsaWNrKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGlzcGxheU9uQ2xpY2sgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgICAgdGhpcy5oaWRlQWZ0ZXJDbGlja1RpbWVvdXRJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95VG9vbHRpcCgpO1xyXG4gICAgICAgIH0sIHRoaXMub3B0aW9uc1snaGlkZURlbGF5QWZ0ZXJDbGljayddKVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXMpIHtcclxuICAgICAgICB0aGlzLmluaXRPcHRpb25zID0gdGhpcy5yZW5hbWVQcm9wZXJ0aWVzKHRoaXMuaW5pdE9wdGlvbnMpO1xyXG4gICAgICAgIGxldCBjaGFuZ2VkT3B0aW9ucyA9IHRoaXMuZ2V0UHJvcGVydGllcyhjaGFuZ2VzKTtcclxuICAgICAgICBjaGFuZ2VkT3B0aW9ucyA9IHRoaXMucmVuYW1lUHJvcGVydGllcyhjaGFuZ2VkT3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwbHlPcHRpb25zRGVmYXVsdChkZWZhdWx0T3B0aW9ucywgY2hhbmdlZE9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGVzdHJveVRvb2x0aXAoe1xyXG4gICAgICAgICAgICBmYXN0OiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFN1YnNjcmliZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFN1YnNjcmliZS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRTaG93RGVsYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1snc2hvd0RlbGF5J107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SGlkZURlbGF5KCkge1xyXG4gICAgICAgIGNvbnN0IGhpZGVEZWxheSA9IHRoaXMub3B0aW9uc1snaGlkZURlbGF5J107XHJcbiAgICAgICAgY29uc3QgaGlkZURlbGF5VG91Y2hzY3JlZW4gPSB0aGlzLm9wdGlvbnNbJ2hpZGVEZWxheVRvdWNoc2NyZWVuJ107XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmlzVG91Y2hTY3JlZW4gPyBoaWRlRGVsYXlUb3VjaHNjcmVlbiA6IGhpZGVEZWxheTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9wZXJ0aWVzKGNoYW5nZXMpe1xyXG4gICAgICAgIGxldCBwcm9wZXJ0aWVzID0ge307XHJcblxyXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAocHJvcCAhPT0gJ29wdGlvbnMnICYmIHByb3AgIT09ICd0b29sdGlwVmFsdWUnKXtcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXNbcHJvcF0gPSBjaGFuZ2VzW3Byb3BdLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29wdGlvbnMnKXtcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBjaGFuZ2VzW3Byb3BdLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvcGVydGllcztcclxuICAgIH1cclxuXHJcbiAgICByZW5hbWVQcm9wZXJ0aWVzKG9wdGlvbnM6IFRvb2x0aXBPcHRpb25zKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChiYWNrd2FyZENvbXBhdGliaWxpdHlPcHRpb25zW3Byb3BdKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zW2JhY2t3YXJkQ29tcGF0aWJpbGl0eU9wdGlvbnNbcHJvcF1dID0gb3B0aW9uc1twcm9wXTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zW3Byb3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbGVtZW50UG9zaXRpb24oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50UG9zaXRpb24gPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVUb29sdGlwKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0cygpO1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudFBvc2l0aW9uKCk7XHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRlVGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFwcGVuZENvbXBvbmVudFRvQm9keShUb29sdGlwQ29tcG9uZW50KTtcclxuICAgICAgICB9LCB0aGlzLmdldFNob3dEZWxheSgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5zaG93VGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dUb29sdGlwRWxlbSgpO1xyXG4gICAgICAgIH0sIHRoaXMuZ2V0U2hvd0RlbGF5KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3lUb29sdGlwKG9wdGlvbnMgPSB7XHJcbiAgICAgICAgZmFzdDogZmFsc2VcclxuICAgIH0pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNsZWFyVGltZW91dHMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNUb29sdGlwRGVzdHJveWVkID09IGZhbHNlKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhpZGVUaW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVUb29sdGlwKCk7XHJcbiAgICAgICAgICAgIH0sIG9wdGlvbnMuZmFzdCA/IDAgOiB0aGlzLmdldEhpZGVEZWxheSgpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveVRpbWVvdXRJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb21wb25lbnRSZWYgfHwgdGhpcy5pc1Rvb2x0aXBEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBSZWYuZGV0YWNoVmlldyh0aGlzLmNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGlkZGVuJywgXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHRoaXMudG9vbHRpcFBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgb3B0aW9ucy5mYXN0ID8gMCA6IHRoaXMuZGVzdHJveURlbGF5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd1Rvb2x0aXBFbGVtKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0cygpO1xyXG4gICAgICAgICggPCBBZENvbXBvbmVudCA+IHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlKS5zaG93ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Nob3cnLFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogdGhpcy50b29sdGlwUG9zaXRpb25cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlVG9vbHRpcCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuY29tcG9uZW50UmVmIHx8IHRoaXMuaXNUb29sdGlwRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgKCA8IEFkQ29tcG9uZW50ID4gdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UpLnNob3cgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KHtcclxuICAgICAgICAgICAgdHlwZTogJ2hpZGUnLFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogdGhpcy50b29sdGlwUG9zaXRpb25cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhcHBlbmRDb21wb25lbnRUb0JvZHkoY29tcG9uZW50OiBhbnksIGRhdGE6IGFueSA9IHt9KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxyXG4gICAgICAgICAgICAucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50KVxyXG4gICAgICAgICAgICAuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG5cclxuICAgICAgICAoIDwgQWRDb21wb25lbnQgPiB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZSkuZGF0YSA9IHtcclxuICAgICAgICAgICAgdmFsdWU6IHRoaXMudG9vbHRpcFZhbHVlLFxyXG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgZWxlbWVudFBvc2l0aW9uOiB0aGlzLnRvb2x0aXBQb3NpdGlvbixcclxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXBwUmVmLmF0dGFjaFZpZXcodGhpcy5jb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG4gICAgICAgIGNvbnN0IGRvbUVsZW0gPSAodGhpcy5jb21wb25lbnRSZWYuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmIDwgYW55ID4gKS5yb290Tm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb21FbGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRTdWJzY3JpYmUgPSAoIDwgQWRDb21wb25lbnQgPiB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZSkuZXZlbnRzLnN1YnNjcmliZSgoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUV2ZW50cyhldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJUaW1lb3V0cygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jcmVhdGVUaW1lb3V0SWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY3JlYXRlVGltZW91dElkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNob3dUaW1lb3V0SWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2hvd1RpbWVvdXRJZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5oaWRlVGltZW91dElkKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhpZGVUaW1lb3V0SWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGVzdHJveVRpbWVvdXRJZCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kZXN0cm95VGltZW91dElkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzRGlzcGxheU9uSG92ZXIoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1snZGlzcGxheSddID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNbJ2Rpc3BsYXlUb3VjaHNjcmVlbiddID09IGZhbHNlICYmIHRoaXMuaXNUb3VjaFNjcmVlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zWyd0cmlnZ2VyJ10gIT09ICdob3ZlcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzRGlzcGxheU9uQ2xpY2soKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1snZGlzcGxheSddID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNbJ2Rpc3BsYXlUb3VjaHNjcmVlbiddID09IGZhbHNlICYmIHRoaXMuaXNUb3VjaFNjcmVlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zWyd0cmlnZ2VyJ10gIT0gJ2NsaWNrJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNUb3VjaFNjcmVlbigpIHtcclxuICAgICAgICB2YXIgcHJlZml4ZXMgPSAnIC13ZWJraXQtIC1tb3otIC1vLSAtbXMtICcuc3BsaXQoJyAnKTtcclxuICAgICAgICB2YXIgbXEgPSBmdW5jdGlvbihxdWVyeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEocXVlcnkpLm1hdGNoZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpbmNsdWRlIHRoZSAnaGVhcnR6JyBhcyBhIHdheSB0byBoYXZlIGEgbm9uIG1hdGNoaW5nIE1RIHRvIGhlbHAgdGVybWluYXRlIHRoZSBqb2luXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXQuaW8vdnpuRkhcclxuICAgICAgICB2YXIgcXVlcnkgPSBbJygnLCBwcmVmaXhlcy5qb2luKCd0b3VjaC1lbmFibGVkKSwoJyksICdoZWFydHonLCAnKSddLmpvaW4oJycpO1xyXG4gICAgICAgIHJldHVybiBtcShxdWVyeSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlPcHRpb25zRGVmYXVsdChkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCB0aGlzLmluaXRPcHRpb25zIHx8IHt9LCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVFdmVudHMoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIGlmIChldmVudC50eXBlID09PSAnc2hvd24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3Nob3duJyxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnRvb2x0aXBQb3NpdGlvblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNob3coKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbXBvbmVudFJlZiB8fCB0aGlzLmlzVG9vbHRpcERlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVRvb2x0aXAoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzVG9vbHRpcERlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dUb29sdGlwRWxlbSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGlkZSgpIHtcclxuICAgICAgICB0aGlzLmRlc3Ryb3lUb29sdGlwKCk7XHJcbiAgICB9XHJcbn1cclxuIl19