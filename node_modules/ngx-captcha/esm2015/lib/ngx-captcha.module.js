/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';
import { ReCaptcha2Component } from './components/recaptcha-2.component';
import { ReCaptchaV3Service } from './services/recaptcha_v3.service';
import { ScriptService } from './services/script.service';
import * as ɵngcc0 from '@angular/core';
export class NgxCaptchaModule {
}
NgxCaptchaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCaptchaModule });
NgxCaptchaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCaptchaModule_Factory(t) { return new (t || NgxCaptchaModule)(); }, providers: [
        ScriptService,
        ReCaptchaV3Service
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCaptchaModule, { declarations: function () { return [ReCaptcha2Component,
        InvisibleReCaptchaComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ReCaptcha2Component,
        InvisibleReCaptchaComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCaptchaModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    ReCaptcha2Component,
                    InvisibleReCaptchaComponent
                ],
                providers: [
                    ScriptService,
                    ReCaptchaV3Service
                ],
                exports: [
                    ReCaptcha2Component,
                    InvisibleReCaptchaComponent
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNhcHRjaGEubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovbmd4LWNhcHRjaGEvbGliL25neC1jYXB0Y2hhLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDekYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDekUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDOztBQW1CMUQsTUFBTSxPQUFPLGdCQUFnQjtBQUM3Qjs0Q0FsQkMsUUFBUSxTQUFDO0VBQ1IsT0FBTyxFQUFFLHNCQUNQLFlBQVksa0JBQ2Isa0JBQ0QsWUFBWSxFQUFFLHNCQUNaLG1CQUFtQjtNQUNuQjtVQUEyQjtDQUM1QjtBQUNELFNBQVMsRUFBRTtRQUNUO01BQWEsc0JBQ2Isa0JBQWtCLGtCQUNuQixrQkFDRCxPQUFPLEVBQUUsc0JBQ1AsbUJBQW1CLHNCQUNuQjtZQUEyQixrQkFDNUIsY0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgSW52aXNpYmxlUmVDYXB0Y2hhQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2ludmlzaWJsZS1yZWNhcHRjaGEuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUmVDYXB0Y2hhMkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9yZWNhcHRjaGEtMi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBSZUNhcHRjaGFWM1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3JlY2FwdGNoYV92My5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2NyaXB0U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc2NyaXB0LnNlcnZpY2UnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGVcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgUmVDYXB0Y2hhMkNvbXBvbmVudCxcclxuICAgIEludmlzaWJsZVJlQ2FwdGNoYUNvbXBvbmVudFxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBTY3JpcHRTZXJ2aWNlLFxyXG4gICAgUmVDYXB0Y2hhVjNTZXJ2aWNlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBSZUNhcHRjaGEyQ29tcG9uZW50LFxyXG4gICAgSW52aXNpYmxlUmVDYXB0Y2hhQ29tcG9uZW50XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4Q2FwdGNoYU1vZHVsZSB7XHJcbn1cclxuXHJcblxyXG4iXX0=