/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ScriptService } from './script.service';
import * as ɵngcc0 from '@angular/core';
export class ReCaptchaV3Service {
    /**
     * @param {?} scriptService
     * @param {?} zone
     */
    constructor(scriptService, zone) {
        this.scriptService = scriptService;
        this.zone = zone;
    }
    /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?} callback
     * @param {?=} config
     * @return {?}
     */
    execute(siteKey, action, callback, config) {
        /** @type {?} */
        const useGlobalDomain = config && config.useGlobalDomain ? true : false;
        this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, (/**
         * @param {?} grecaptcha
         * @return {?}
         */
        (grecaptcha) => {
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                grecaptcha.execute(siteKey, {
                    action: action
                }).then((/**
                 * @param {?} token
                 * @return {?}
                 */
                (token) => {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => callback(token)));
                }));
            }));
        }));
    }
}
ReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) { return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(ScriptService), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
ReCaptchaV3Service.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ReCaptchaV3Service, factory: ReCaptchaV3Service.ɵfac });
/** @nocollapse */
ReCaptchaV3Service.ctorParameters = () => [
    { type: ScriptService },
    { type: NgZone }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReCaptchaV3Service, [{
        type: Injectable
    }], function () { return [{ type: ScriptService }, { type: ɵngcc0.NgZone }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ReCaptchaV3Service.prototype.scriptService;
    /**
     * @type {?}
     * @protected
     */
    ReCaptchaV3Service.prototype.zone;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhX3YzLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtY2FwdGNoYS9saWIvc2VydmljZXMvcmVjYXB0Y2hhX3YzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFHakQsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQjtBQUNPO0FBQ2U7QUFBdUI7QUFDeEMsSUFGRCxZQUNjLGFBQTRCLEVBQzVCLElBQVk7QUFDM0IsUUFGZSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtBQUFDLFFBQzdCLFNBQUksR0FBSixJQUFJLENBQVE7QUFDOUIsSUFDSSxDQUFDO0FBQ0w7QUFDTztBQUN5RjtBQUNqQztBQUN6RDtBQUN5RTtBQUN6RTtBQUVIO0FBQ0k7QUFDbUI7QUFBMEI7QUFBbUI7QUFBUSxJQUEzRSxPQUFPLENBQUMsT0FBZSxFQUFFLE1BQWMsRUFBRSxRQUFpQyxFQUFFLE1BRTNFO0FBQUk7QUFFUyxjQUFKLGVBQWUsR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO0FBQy9FLFFBQ1EsSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsT0FBTztBQUFPO0FBQzVEO0FBQXVCO0FBQ3BDLFFBRm9FLENBQUMsVUFBVSxFQUFFLEVBQUU7QUFDMUYsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtBQUFNO0FBQ3JCO0FBQWdCLFlBREEsR0FBRyxFQUFFO0FBQzdDLGdCQUFnQixVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUM1QyxvQkFBb0IsTUFBTSxFQUFFLE1BQU07QUFDbEMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJO0FBQU07QUFDRDtBQUMzQjtBQUNBLGdCQUh1QixDQUFDLEtBQUssRUFBRSxFQUFFO0FBQ2xDLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7QUFBTTtBQUN2QjtBQUVaLG9CQUg4QixHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztBQUN6RCxnQkFBZ0IsQ0FBQyxFQUFDLENBQUM7QUFDbkIsWUFBWSxDQUFDLEVBQUMsQ0FBQztBQUNmLFFBQVEsQ0FBQyxFQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTDs4Q0FsQ0MsVUFBVTtzSEFDVDtBQUFDO0FBQW1CO0FBR1IsWUFOTCxhQUFhO0FBQUksWUFGTCxNQUFNO0FBQUc7OztnR0FBRTtBQUFDO0FBQWE7QUFFN0M7QUFBaUI7QUFBa0I7QUFBUSxJQU1wQywyQ0FBc0M7QUFBQztBQUN4QztBQUFpQjtBQUVyQjtBQUVDLElBSkksa0NBQXNCO0FBQzlCO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFNjcmlwdFNlcnZpY2UgfSBmcm9tICcuL3NjcmlwdC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlQ2FwdGNoYVYzU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJvdGVjdGVkIHNjcmlwdFNlcnZpY2U6IFNjcmlwdFNlcnZpY2UsXHJcbiAgICAgICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlcyByZUNhcHRjaGEgdjMgd2l0aCBnaXZlbiBhY3Rpb24gYW5kIHBhc3NlcyB0b2tlbiB2aWEgY2FsbGJhY2suIFlvdSBuZWVkIHRvIHZlcmlmeVxyXG4gICAgICogdGhpcyBjYWxsYmFjayBpbiB5b3VyIGJhY2tlbmQgdG8gZ2V0IG1lYW5pbmdmdWwgcmVzdWx0cy5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcmVjYXB0Y2hhL2RvY3MvdjNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc2l0ZUtleSBTaXRlIGtleSBmb3VuZCBpbiB5b3VyIGdvb2dsZSBhZG1pbiBwYW5lbFxyXG4gICAgICogQHBhcmFtIGFjdGlvbiBBY3Rpb24gdG8gbG9nXHJcbiAgICAgKi9cclxuICAgIGV4ZWN1dGUoc2l0ZUtleTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgY2FsbGJhY2s6ICh0b2tlbjogc3RyaW5nKSA9PiB2b2lkLCBjb25maWc/OiB7XHJcbiAgICAgICAgdXNlR2xvYmFsRG9tYWluOiBib29sZWFuXHJcbiAgICB9KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZUdsb2JhbERvbWFpbiA9IGNvbmZpZyAmJiBjb25maWcudXNlR2xvYmFsRG9tYWluID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLnNjcmlwdFNlcnZpY2UucmVnaXN0ZXJDYXB0Y2hhU2NyaXB0KHVzZUdsb2JhbERvbWFpbiwgc2l0ZUtleSwgKGdyZWNhcHRjaGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGdyZWNhcHRjaGEuZXhlY3V0ZShzaXRlS2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBjYWxsYmFjayh0b2tlbikpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==