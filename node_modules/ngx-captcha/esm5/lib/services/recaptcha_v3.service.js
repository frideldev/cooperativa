/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ScriptService } from './script.service';
import * as ɵngcc0 from '@angular/core';
var ReCaptchaV3Service = /** @class */ (function () {
    function ReCaptchaV3Service(scriptService, zone) {
        this.scriptService = scriptService;
        this.zone = zone;
    }
    /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param siteKey Site key found in your google admin panel
     * @param action Action to log
     */
    /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?} callback
     * @param {?=} config
     * @return {?}
     */
    ReCaptchaV3Service.prototype.execute = /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?} callback
     * @param {?=} config
     * @return {?}
     */
    function (siteKey, action, callback, config) {
        var _this = this;
        /** @type {?} */
        var useGlobalDomain = config && config.useGlobalDomain ? true : false;
        this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, (/**
         * @param {?} grecaptcha
         * @return {?}
         */
        function (grecaptcha) {
            _this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                grecaptcha.execute(siteKey, {
                    action: action
                }).then((/**
                 * @param {?} token
                 * @return {?}
                 */
                function (token) {
                    _this.zone.run((/**
                     * @return {?}
                     */
                    function () { return callback(token); }));
                }));
            }));
        }));
    };
    /** @nocollapse */
    ReCaptchaV3Service.ctorParameters = function () { return [
        { type: ScriptService },
        { type: NgZone }
    ]; };
ReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) { return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(ScriptService), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
ReCaptchaV3Service.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ReCaptchaV3Service, factory: function (t) { return ReCaptchaV3Service.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReCaptchaV3Service, [{
        type: Injectable
    }], function () { return [{ type: ScriptService }, { type: ɵngcc0.NgZone }]; }, null); })();
    return ReCaptchaV3Service;
}());
export { ReCaptchaV3Service };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ReCaptchaV3Service.prototype.scriptService;
    /**
     * @type {?}
     * @protected
     */
    ReCaptchaV3Service.prototype.zone;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhX3YzLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtY2FwdGNoYS9saWIvc2VydmljZXMvcmVjYXB0Y2hhX3YzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFakQ7QUFHSyxJQUFELDRCQUNjLGFBQTRCLEVBQzVCLElBQVk7QUFDM0IsUUFGZSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtBQUFDLFFBQzdCLFNBQUksR0FBSixJQUFJLENBQVE7QUFDOUIsSUFDSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQVE7QUFDTTtBQUdlO0FBQU87QUFFRjtBQUFPO0FBQ3pCO0FBQ1Q7QUFBMkI7QUFDcEI7QUFBbUI7QUFDM0IsSUFWRixvQ0FBTztBQUFPO0FBQ007QUFHZTtBQUFPO0FBRUY7QUFBTztBQUN6QjtBQUNUO0FBQTJCO0FBQ3BCO0FBQ2hCO0FBQVEsSUFWWixVQUFRLE9BQWUsRUFBRSxNQUFjLEVBQUUsUUFBaUMsRUFBRSxNQUUzRTtBQUFJLFFBRkwsaUJBZUM7QUFDTDtBQUN1QixZQWJULGVBQWUsR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO0FBQy9FLFFBQ1EsSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsT0FBTztBQUFPO0FBQzVEO0FBQXVCO0FBQ3BDLFFBRm9FLFVBQUMsVUFBVTtBQUFJLFlBQzlFLEtBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCO0FBQU07QUFDckI7QUFBZ0IsWUFEQTtBQUNsQyxnQkFBVSxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUM1QyxvQkFBb0IsTUFBTSxFQUFFLE1BQU07QUFDbEMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJO0FBQU07QUFDRDtBQUMzQjtBQUNBLGdCQUh1QixVQUFDLEtBQUs7QUFBSSxvQkFDZCxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7QUFBTTtBQUN2QjtBQUVaLG9CQUg4QixjQUFNLE9BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFmLENBQWUsRUFBQyxDQUFDO0FBQ3pELGdCQUFnQixDQUFDLEVBQUMsQ0FBQztBQUNuQixZQUFZLENBQUMsRUFBQyxDQUFDO0FBQ2YsUUFBUSxDQUFDLEVBQUMsQ0FBQztBQUNYLElBQUksQ0FBQyxDQWhDQztBQUFDOytCQUROLFVBQVUsekNBQ21CO0FBR1csZ0JBTmhDLGFBQWE7QUFBSSxnQkFGTCxNQUFNO0FBQUc7Ozs7O2dHQUFTO0FBQUMsSUFzQ3hDLHlCQUFDO0FBQ0EsQ0FEQSxBQWxDRCxJQWtDQztBQUNELFNBbENhLGtCQUFrQjtBQUUvQjtBQUFhO0FBQ1Q7QUFBaUI7QUFBa0I7QUFBUSxJQUF2QywyQ0FBc0M7QUFBQztBQUN4QztBQUFpQjtBQUVyQjtBQUVDLElBSkksa0NBQXNCO0FBQzlCO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFNjcmlwdFNlcnZpY2UgfSBmcm9tICcuL3NjcmlwdC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlQ2FwdGNoYVYzU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJvdGVjdGVkIHNjcmlwdFNlcnZpY2U6IFNjcmlwdFNlcnZpY2UsXHJcbiAgICAgICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlcyByZUNhcHRjaGEgdjMgd2l0aCBnaXZlbiBhY3Rpb24gYW5kIHBhc3NlcyB0b2tlbiB2aWEgY2FsbGJhY2suIFlvdSBuZWVkIHRvIHZlcmlmeVxyXG4gICAgICogdGhpcyBjYWxsYmFjayBpbiB5b3VyIGJhY2tlbmQgdG8gZ2V0IG1lYW5pbmdmdWwgcmVzdWx0cy5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcmVjYXB0Y2hhL2RvY3MvdjNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc2l0ZUtleSBTaXRlIGtleSBmb3VuZCBpbiB5b3VyIGdvb2dsZSBhZG1pbiBwYW5lbFxyXG4gICAgICogQHBhcmFtIGFjdGlvbiBBY3Rpb24gdG8gbG9nXHJcbiAgICAgKi9cclxuICAgIGV4ZWN1dGUoc2l0ZUtleTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgY2FsbGJhY2s6ICh0b2tlbjogc3RyaW5nKSA9PiB2b2lkLCBjb25maWc/OiB7XHJcbiAgICAgICAgdXNlR2xvYmFsRG9tYWluOiBib29sZWFuXHJcbiAgICB9KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZUdsb2JhbERvbWFpbiA9IGNvbmZpZyAmJiBjb25maWcudXNlR2xvYmFsRG9tYWluID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLnNjcmlwdFNlcnZpY2UucmVnaXN0ZXJDYXB0Y2hhU2NyaXB0KHVzZUdsb2JhbERvbWFpbiwgc2l0ZUtleSwgKGdyZWNhcHRjaGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGdyZWNhcHRjaGEuZXhlY3V0ZShzaXRlS2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBjYWxsYmFjayh0b2tlbikpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==