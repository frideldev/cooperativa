/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var ScriptService = /** @class */ (function () {
    function ScriptService(zone) {
        this.zone = zone;
        /**
         * Name of the global google recaptcha script
         */
        this.windowGrecaptcha = 'grecaptcha';
        /**
         * Name of the global callback
         */
        this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';
        this.globalDomain = 'recaptcha.net';
        this.defaultDomain = 'google.com';
    }
    /**
     * @param {?} useGlobalDomain
     * @param {?} render
     * @param {?} onLoad
     * @param {?=} language
     * @return {?}
     */
    ScriptService.prototype.registerCaptchaScript = /**
     * @param {?} useGlobalDomain
     * @param {?} render
     * @param {?} onLoad
     * @param {?=} language
     * @return {?}
     */
    function (useGlobalDomain, render, onLoad, language) {
        var _this = this;
        if (this.grecaptchaScriptLoaded()) {
            // recaptcha script is already loaded
            // just call the callback
            this.zone.run((/**
             * @return {?}
             */
            function () {
                onLoad(window[_this.windowGrecaptcha]);
            }));
            return;
        }
        // we need to patch the callback through global variable, otherwise callback is not accessible
        // note: https://github.com/Enngage/ngx-captcha/issues/2
        window[this.windowOnLoadCallbackProperty] = (/** @type {?} */ (((/**
         * @return {?}
         */
        function () { return _this.zone.run(onLoad.bind(_this, window[_this.windowGrecaptcha])); }))));
        // prepare script elem
        /** @type {?} */
        var scriptElem = document.createElement('script');
        scriptElem.innerHTML = '';
        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);
        scriptElem.async = true;
        scriptElem.defer = true;
        // add script to header
        document.getElementsByTagName('head')[0].appendChild(scriptElem);
    };
    /**
     * @return {?}
     */
    ScriptService.prototype.cleanup = /**
     * @return {?}
     */
    function () {
        window[this.windowOnLoadCallbackProperty] = undefined;
        window[this.windowGrecaptcha] = undefined;
    };
    /**
     * Indicates if google recaptcha script is available and ready to be used
     */
    /**
     * Indicates if google recaptcha script is available and ready to be used
     * @private
     * @return {?}
     */
    ScriptService.prototype.grecaptchaScriptLoaded = /**
     * Indicates if google recaptcha script is available and ready to be used
     * @private
     * @return {?}
     */
    function () {
        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {
            return true;
        }
        return false;
    };
    /**
     * Gets language param used in script url
     */
    /**
     * Gets language param used in script url
     * @private
     * @param {?=} hl
     * @return {?}
     */
    ScriptService.prototype.getLanguageParam = /**
     * Gets language param used in script url
     * @private
     * @param {?=} hl
     * @return {?}
     */
    function (hl) {
        if (!hl) {
            return '';
        }
        return "&hl=" + hl;
    };
    /**
    * Url to google api script
    */
    /**
     * Url to google api script
     * @private
     * @param {?} useGlobalDomain
     * @param {?} render
     * @param {?=} language
     * @return {?}
     */
    ScriptService.prototype.getCaptchaScriptUrl = /**
     * Url to google api script
     * @private
     * @param {?} useGlobalDomain
     * @param {?} render
     * @param {?=} language
     * @return {?}
     */
    function (useGlobalDomain, render, language) {
        /** @type {?} */
        var domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;
        // tslint:disable-next-line:max-line-length
        return "https://www." + domain + "/recaptcha/api.js?onload=" + this.windowOnLoadCallbackProperty + "&render=" + render + this.getLanguageParam(language);
    };
    /** @nocollapse */
    ScriptService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
ScriptService.ɵfac = function ScriptService_Factory(t) { return new (t || ScriptService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
ScriptService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScriptService, factory: function (t) { return ScriptService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScriptService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();
    return ScriptService;
}());
export { ScriptService };
if (false) {
    /**
     * Name of the global google recaptcha script
     * @type {?}
     * @protected
     */
    ScriptService.prototype.windowGrecaptcha;
    /**
     * Name of the global callback
     * @type {?}
     * @protected
     */
    ScriptService.prototype.windowOnLoadCallbackProperty;
    /**
     * @type {?}
     * @protected
     */
    ScriptService.prototype.globalDomain;
    /**
     * @type {?}
     * @protected
     */
    ScriptService.prototype.defaultDomain;
    /**
     * @type {?}
     * @protected
     */
    ScriptService.prototype.zone;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtY2FwdGNoYS9saWIvc2VydmljZXMvc2NyaXB0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUluRDtBQUdLLElBY0QsdUJBQ2MsSUFBWTtBQUM1QixRQURnQixTQUFJLEdBQUosSUFBSSxDQUFRO0FBQUM7QUFFNUI7QUFFK0M7QUFBWSxRQWhCdkMscUJBQWdCLEdBQUcsWUFBWSxDQUFDO0FBQ3ZEO0FBRUc7QUFFRjtBQUFZLFFBQVUsaUNBQTRCLEdBQUcsNkJBQTZCLENBQUM7QUFDcEYsUUFDdUIsaUJBQVksR0FBVyxlQUFlLENBQUM7QUFDOUQsUUFDdUIsa0JBQWEsR0FBVyxZQUFZLENBQUM7QUFDNUQsSUFJSSxDQUFDO0FBQ0w7QUFDTztBQUFrQztBQUF5QjtBQUF5QjtBQUE0QjtBQUMvRztBQUFRLElBRFosNkNBQXFCO0FBQU87QUFBa0M7QUFBeUI7QUFBeUI7QUFDdEc7QUFBbUI7QUFBUSxJQURyQyxVQUFzQixlQUF3QixFQUFFLE1BQWMsRUFBRSxNQUFpQyxFQUFFLFFBQWlCO0FBQUksUUFBeEgsaUJBeUJDO0FBQ0wsUUF6QlEsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRTtBQUMzQyxZQUFZLHFDQUFxQztBQUNqRCxZQUFZLHlCQUF5QjtBQUNyQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztBQUFNO0FBQ1A7QUFBZ0IsWUFEZDtBQUNwQixnQkFBVSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDdEQsWUFBWSxDQUFDLEVBQUMsQ0FBQztBQUNmLFlBQVksT0FBTztBQUNuQixTQUFTO0FBQ1QsUUFDUSw4RkFBOEY7QUFDdEcsUUFBUSx3REFBd0Q7QUFDaEUsUUFBUSxNQUFNLENBQUMsSUFBSSxD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SztBQUFRO0FBRVI7QUFBaUI7QUFBa0I7QUFBUSxJQUE1Qyx5Q0FBbUQ7QUFDdkQ7QUFDTztBQUVQO0FBQ1U7QUFBa0I7QUFBUSxJQUFoQyxxREFBZ0Y7QUFDcEY7QUFDTztBQUFpQjtBQUFrQjtBQUFRLElBQTlDLHFDQUEwRDtBQUM5RDtBQUNPO0FBQWlCO0FBQWtCO0FBQVEsSUFBOUMsc0NBQXdEO0FBQzVEO0FBQ087QUFDQTtBQUFrQjtBQUN4QixJQURPLDZCQUFzQjtBQUFDO0FBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5kZWNsYXJlIHZhciBkb2N1bWVudDogYW55O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2NyaXB0U2VydmljZSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOYW1lIG9mIHRoZSBnbG9iYWwgZ29vZ2xlIHJlY2FwdGNoYSBzY3JpcHRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHdpbmRvd0dyZWNhcHRjaGEgPSAnZ3JlY2FwdGNoYSc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIE5hbWUgb2YgdGhlIGdsb2JhbCBjYWxsYmFja1xyXG4gICAgKi9cclxuICAgIHByb3RlY3RlZCByZWFkb25seSB3aW5kb3dPbkxvYWRDYWxsYmFja1Byb3BlcnR5ID0gJ25neF9jYXB0Y2hhX29ubG9hZF9jYWxsYmFjayc7XHJcblxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGdsb2JhbERvbWFpbjogc3RyaW5nID0gJ3JlY2FwdGNoYS5uZXQnO1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBkZWZhdWx0RG9tYWluOiBzdHJpbmcgPSAnZ29vZ2xlLmNvbSc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSxcclxuICAgICkge1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyQ2FwdGNoYVNjcmlwdCh1c2VHbG9iYWxEb21haW46IGJvb2xlYW4sIHJlbmRlcjogc3RyaW5nLCBvbkxvYWQ6IChncmVjYXB0Y2hhOiBhbnkpID0+IHZvaWQsIGxhbmd1YWdlPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JlY2FwdGNoYVNjcmlwdExvYWRlZCgpKSB7XHJcbiAgICAgICAgICAgIC8vIHJlY2FwdGNoYSBzY3JpcHQgaXMgYWxyZWFkeSBsb2FkZWRcclxuICAgICAgICAgICAgLy8ganVzdCBjYWxsIHRoZSBjYWxsYmFja1xyXG4gICAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIG9uTG9hZCh3aW5kb3dbdGhpcy53aW5kb3dHcmVjYXB0Y2hhXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHBhdGNoIHRoZSBjYWxsYmFjayB0aHJvdWdoIGdsb2JhbCB2YXJpYWJsZSwgb3RoZXJ3aXNlIGNhbGxiYWNrIGlzIG5vdCBhY2Nlc3NpYmxlXHJcbiAgICAgICAgLy8gbm90ZTogaHR0cHM6Ly9naXRodWIuY29tL0VubmdhZ2Uvbmd4LWNhcHRjaGEvaXNzdWVzLzJcclxuICAgICAgICB3aW5kb3dbdGhpcy53aW5kb3dPbkxvYWRDYWxsYmFja1Byb3BlcnR5XSA9IDxhbnk+KCgpID0+IHRoaXMuem9uZS5ydW4oXHJcbiAgICAgICAgICAgIG9uTG9hZC5iaW5kKHRoaXMsIHdpbmRvd1t0aGlzLndpbmRvd0dyZWNhcHRjaGFdKVxyXG4gICAgICAgICkpO1xyXG5cclxuICAgICAgICAvLyBwcmVwYXJlIHNjcmlwdCBlbGVtXHJcbiAgICAgICAgY29uc3Qgc2NyaXB0RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgIHNjcmlwdEVsZW0uaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgc2NyaXB0RWxlbS5zcmMgPSB0aGlzLmdldENhcHRjaGFTY3JpcHRVcmwodXNlR2xvYmFsRG9tYWluLCByZW5kZXIsIGxhbmd1YWdlKTtcclxuICAgICAgICBzY3JpcHRFbGVtLmFzeW5jID0gdHJ1ZTtcclxuICAgICAgICBzY3JpcHRFbGVtLmRlZmVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHNjcmlwdCB0byBoZWFkZXJcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHNjcmlwdEVsZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFudXAoKTogdm9pZCB7XHJcbiAgICAgICAgd2luZG93W3RoaXMud2luZG93T25Mb2FkQ2FsbGJhY2tQcm9wZXJ0eV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgd2luZG93W3RoaXMud2luZG93R3JlY2FwdGNoYV0gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgaWYgZ29vZ2xlIHJlY2FwdGNoYSBzY3JpcHQgaXMgYXZhaWxhYmxlIGFuZCByZWFkeSB0byBiZSB1c2VkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ3JlY2FwdGNoYVNjcmlwdExvYWRlZCgpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAod2luZG93W3RoaXMud2luZG93T25Mb2FkQ2FsbGJhY2tQcm9wZXJ0eV0gJiYgd2luZG93W3RoaXMud2luZG93R3JlY2FwdGNoYV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgbGFuZ3VhZ2UgcGFyYW0gdXNlZCBpbiBzY3JpcHQgdXJsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0TGFuZ3VhZ2VQYXJhbShobD86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCFobCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYCZobD0ke2hsfWA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFVybCB0byBnb29nbGUgYXBpIHNjcmlwdFxyXG4gICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Q2FwdGNoYVNjcmlwdFVybCh1c2VHbG9iYWxEb21haW46IGJvb2xlYW4sIHJlbmRlcjogc3RyaW5nLCBsYW5ndWFnZT86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgZG9tYWluID0gdXNlR2xvYmFsRG9tYWluID8gdGhpcy5nbG9iYWxEb21haW4gOiB0aGlzLmRlZmF1bHREb21haW47XHJcblxyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcclxuICAgICAgICByZXR1cm4gYGh0dHBzOi8vd3d3LiR7ZG9tYWlufS9yZWNhcHRjaGEvYXBpLmpzP29ubG9hZD0ke3RoaXMud2luZG93T25Mb2FkQ2FsbGJhY2tQcm9wZXJ0eX0mcmVuZGVyPSR7cmVuZGVyfSR7dGhpcy5nZXRMYW5ndWFnZVBhcmFtKGxhbmd1YWdlKX1gO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=