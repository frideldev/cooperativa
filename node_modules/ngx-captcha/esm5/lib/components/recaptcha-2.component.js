/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Injector, Input, NgZone, Renderer2, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ReCaptchaType } from '../models/recaptcha-type.enum';
import { ScriptService } from '../services/script.service';
import { BaseReCaptchaComponent } from './base-recaptcha.component';
import * as ɵngcc0 from '@angular/core';
var ReCaptcha2Component = /** @class */ (function (_super) {
    tslib_1.__extends(ReCaptcha2Component, _super);
    function ReCaptcha2Component(renderer, zone, injector, scriptService) {
        var _this = _super.call(this, renderer, zone, injector, scriptService) || this;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.injector = injector;
        _this.scriptService = scriptService;
        /**
         * Name of the global expire callback
         */
        _this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';
        /**
         * Name of the global error callback
         */
        _this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';
        /**
         * Theme
         */
        _this.theme = 'light';
        /**
         * Size
         */
        _this.size = 'normal';
        _this.recaptchaType = ReCaptchaType.ReCaptcha2;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ReCaptcha2Component.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
    };
    /**
     * @return {?}
     */
    ReCaptcha2Component.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        window[this.windowOnErrorCallbackProperty] = {};
        window[this.windowOnExpireCallbackProperty] = {};
    };
    /**
     * @protected
     * @return {?}
     */
    ReCaptcha2Component.prototype.captchaSpecificSetup = /**
     * @protected
     * @return {?}
     */
    function () {
        this.registerCallbacks();
    };
    /**
     * Gets reCaptcha properties
    */
    /**
     * Gets reCaptcha properties
     * @protected
     * @return {?}
     */
    ReCaptcha2Component.prototype.getCaptchaProperties = /**
     * Gets reCaptcha properties
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        return {
            'sitekey': this.siteKey,
            'callback': (/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return _this.handleCallback(response); })); }),
            'expired-callback': (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return _this.handleExpireCallback(); })); }),
            'error-callback': (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return _this.handleErrorCallback(); })); }),
            'theme': this.theme,
            'type': this.type,
            'size': this.size,
            'tabindex': this.tabIndex
        };
    };
    /**
     * Registers global callbacks
    */
    /**
     * Registers global callbacks
     * @private
     * @return {?}
     */
    ReCaptcha2Component.prototype.registerCallbacks = /**
     * Registers global callbacks
     * @private
     * @return {?}
     */
    function () {
        window[this.windowOnErrorCallbackProperty] = _super.prototype.handleErrorCallback.bind(this);
        window[this.windowOnExpireCallbackProperty] = _super.prototype.handleExpireCallback.bind(this);
    };
    /** @nocollapse */
    ReCaptcha2Component.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: NgZone },
        { type: Injector },
        { type: ScriptService }
    ]; };
    ReCaptcha2Component.propDecorators = {
        theme: [{ type: Input }],
        size: [{ type: Input }],
        hl: [{ type: Input }]
    };
ReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(t) { return new (t || ReCaptcha2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };
ReCaptcha2Component.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ReCaptcha2Component, selectors: [["ngx-recaptcha2"]], inputs: { theme: "theme", size: "size", hl: "hl" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(( /**
                 * @return {?}
                 */function () { return ReCaptcha2Component; })),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [["captchaWrapperElem", ""]], template: function ReCaptcha2Component_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReCaptcha2Component, [{
        type: Component,
        args: [{
                selector: 'ngx-recaptcha2',
                template: "\n  <div #captchaWrapperElem></div>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(( /**
                         * @return {?}
                         */function () { return ReCaptcha2Component; })),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { theme: [{
            type: Input
        }], size: [{
            type: Input
        }], hl: [{
            type: Input
        }] }); })();
    return ReCaptcha2Component;
}(BaseReCaptchaComponent));
export { ReCaptcha2Component };
if (false) {
    /**
     * Name of the global expire callback
     * @type {?}
     * @protected
     */
    ReCaptcha2Component.prototype.windowOnErrorCallbackProperty;
    /**
     * Name of the global error callback
     * @type {?}
     * @protected
     */
    ReCaptcha2Component.prototype.windowOnExpireCallbackProperty;
    /**
     * Theme
     * @type {?}
     */
    ReCaptcha2Component.prototype.theme;
    /**
     * Size
     * @type {?}
     */
    ReCaptcha2Component.prototype.size;
    /**
     * Language code. Auto-detects the user's language if unspecified.
     * @type {?}
     */
    ReCaptcha2Component.prototype.hl;
    /**
     * @type {?}
     * @protected
     */
    ReCaptcha2Component.prototype.recaptchaType;
    /**
     * @type {?}
     * @protected
     */
    ReCaptcha2Component.prototype.renderer;
    /**
     * @type {?}
     * @protected
     */
    ReCaptcha2Component.prototype.zone;
    /**
     * @type {?}
     * @protected
     */
    ReCaptcha2Component.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    ReCaptcha2Component.prototype.scriptService;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,