/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ReCaptchaType } from '../models/recaptcha-type.enum';
import { ScriptService } from '../services/script.service';
import { BaseReCaptchaComponent } from './base-recaptcha.component';
import * as ɵngcc0 from '@angular/core';
var InvisibleReCaptchaComponent = /** @class */ (function (_super) {
    tslib_1.__extends(InvisibleReCaptchaComponent, _super);
    function InvisibleReCaptchaComponent(renderer, zone, injector, scriptService) {
        var _this = _super.call(this, renderer, zone, injector, scriptService) || this;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.injector = injector;
        _this.scriptService = scriptService;
        /**
         * This size representing invisible captcha
         */
        _this.size = 'invisible';
        /**
         * Theme
         */
        _this.theme = 'light';
        /**
         * Badge
         */
        _this.badge = 'bottomright';
        _this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    InvisibleReCaptchaComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
    };
    /**
     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
     */
    /**
     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
     * @return {?}
     */
    InvisibleReCaptchaComponent.prototype.execute = /**
     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
     * @return {?}
     */
    function () {
        var _this = this;
        // execute captcha
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return _this.reCaptchaApi.execute(_this.captchaId); }));
    };
    /**
     * @protected
     * @return {?}
     */
    InvisibleReCaptchaComponent.prototype.captchaSpecificSetup = /**
     * @protected
     * @return {?}
     */
    function () {
    };
    /**
    * Gets reCaptcha properties
    */
    /**
     * Gets reCaptcha properties
     * @protected
     * @return {?}
     */
    InvisibleReCaptchaComponent.prototype.getCaptchaProperties = /**
     * Gets reCaptcha properties
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        return {
            'sitekey': this.siteKey,
            'callback': (/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return _this.handleCallback(response); })); }),
            'expired-callback': (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return _this.handleExpireCallback(); })); }),
            'error-callback': (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return _this.handleErrorCallback(); })); }),
            'badge': this.badge,
            'type': this.type,
            'tabindex': this.tabIndex,
            'size': this.size,
            'theme': this.theme
        };
    };
    /** @nocollapse */
    InvisibleReCaptchaComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: NgZone },
        { type: Injector },
        { type: ScriptService }
    ]; };
    InvisibleReCaptchaComponent.propDecorators = {
        theme: [{ type: Input }],
        badge: [{ type: Input }],
        hl: [{ type: Input }]
    };
InvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(t) { return new (t || InvisibleReCaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };
InvisibleReCaptchaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: InvisibleReCaptchaComponent, selectors: [["ngx-invisible-recaptcha"]], inputs: { theme: "theme", badge: "badge", hl: "hl" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(( /**
                 * @return {?}
                 */function () { return InvisibleReCaptchaComponent; })),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [["captchaWrapperElem", ""]], template: function InvisibleReCaptchaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InvisibleReCaptchaComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-invisible-recaptcha',
                template: "\n  <div #captchaWrapperElem></div>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(( /**
                         * @return {?}
                         */function () { return InvisibleReCaptchaComponent; })),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { theme: [{
            type: Input
        }], badge: [{
            type: Input
        }], hl: [{
            type: Input
        }] }); })();
    return InvisibleReCaptchaComponent;
}(BaseReCaptchaComponent));
export { InvisibleReCaptchaComponent };
if (false) {
    /**
     * This size representing invisible captcha
     * @type {?}
     * @protected
     */
    InvisibleReCaptchaComponent.prototype.size;
    /**
     * Theme
     * @type {?}
     */
    InvisibleReCaptchaComponent.prototype.theme;
    /**
     * Badge
     * @type {?}
     */
    InvisibleReCaptchaComponent.prototype.badge;
    /**
     * Language code. Auto-detects the user's language if unspecified.
     * @type {?}
     */
    InvisibleReCaptchaComponent.prototype.hl;
    /**
     * @type {?}
     * @protected
     */
    InvisibleReCaptchaComponent.prototype.recaptchaType;
    /**
     * @type {?}
     * @protected
     */
    InvisibleReCaptchaComponent.prototype.renderer;
    /**
     * @type {?}
     * @protected
     */
    InvisibleReCaptchaComponent.prototype.zone;
    /**
     * @type {?}
     * @protected
     */
    InvisibleReCaptchaComponent.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    InvisibleReCaptchaComponent.prototype.scriptService;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52aXNpYmxlLXJlY2FwdGNoYS5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtY2FwdGNoYS9saWIvY29tcG9uZW50cy9pbnZpc2libGUtcmVjYXB0Y2hhLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFhLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEgsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFFcEU7QUFHRyxJQVM4Qyx1REFBc0I7QUFBQyxJQXdCdEUscUNBQ1ksUUFBbUIsRUFDbkIsSUFBWSxFQUNaLFFBQWtCLEVBQ2xCLGFBQTRCO0FBQ3ZDLFFBTEQsWUFNRSxrQkFBTSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsU0FDL0M7QUFDSCxRQVBjLGNBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQUNwQixVQUFJLEdBQUosSUFBSSxDQUFRO0FBQUMsUUFDYixjQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFDbkIsbUJBQWEsR0FBYixhQUFhLENBQWU7QUFDMUM7QUFDTTtBQUdMO0FBQVksUUE1QlEsVUFBSSxHQUFHLFdBQVcsQ0FBQztBQUN4QztBQUVLO0FBRUE7QUFBWSxRQUFOLFdBQUssR0FBcUIsT0FBTyxDQUFDO0FBQzdDO0FBRUs7QUFFQTtBQUFZLFFBQU4sV0FBSyxHQUE0QyxhQUFhLENBQUM7QUFDMUUsUUFNWSxtQkFBYSxHQUFrQixhQUFhLENBQUMsa0JBQWtCLENBQUM7QUFDNUU7QUFFTSxJ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Ozs7Ozs7Ozs7Ozs7Ozs7O29CQXFCaUI7QUFBQyxJQThDbkIsa0NBQUM7QUFFRCxDQUZDLEFBOUVELENBWWlELHNCQUFzQixHQWtFdEU7QUFDRCxTQW5FYSwyQkFBMkI7QUFBSTtBQUFhO0FBQVE7QUFHdEQ7QUFBaUI7QUFDNUI7QUFDRSxJQUFBLDJDQUFzQztBQUN4QztBQUVDO0FBQ0U7QUFDVztBQUFRLElBQXBCLDRDQUEyQztBQUM3QztBQUVDO0FBQ0U7QUFDVztBQUFRLElBQXBCLDRDQUF3RTtBQUMxRTtBQUVDO0FBQ0U7QUFDVztBQUFRLElBQXBCLHlDQUFvQjtBQUN0QjtBQUNPO0FBQWlCO0FBQWtCO0FBQVEsSUFBaEQsb0RBQTBFO0FBQzVFO0FBQ087QUFDRTtBQUFrQjtBQUMzQixJQURJLCtDQUE2QjtBQUFDO0FBQzNCO0FBQWlCO0FBQ1Y7QUFBUSxJQURsQiwyQ0FBc0I7QUFBQztBQUNwQjtBQUFpQjtBQUNoQjtBQUFRLElBRFosK0NBQTRCO0FBQUM7QUFDMUI7QUFBaUI7QUFBa0I7QUFFekMsSUFGRyxvREFBc0M7QUFDMUM7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5qZWN0b3IsIElucHV0LCBOZ1pvbmUsIE9uQ2hhbmdlcywgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgUmVDYXB0Y2hhVHlwZSB9IGZyb20gJy4uL21vZGVscy9yZWNhcHRjaGEtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgU2NyaXB0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NjcmlwdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmFzZVJlQ2FwdGNoYUNvbXBvbmVudCB9IGZyb20gJy4vYmFzZS1yZWNhcHRjaGEuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LWludmlzaWJsZS1yZWNhcHRjaGEnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgPGRpdiAjY2FwdGNoYVdyYXBwZXJFbGVtPjwvZGl2PmAsXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBJbnZpc2libGVSZUNhcHRjaGFDb21wb25lbnQpLFxyXG4gICAgICBtdWx0aTogdHJ1ZSxcclxuICAgIH1cclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbnZpc2libGVSZUNhcHRjaGFDb21wb25lbnQgZXh0ZW5kcyBCYXNlUmVDYXB0Y2hhQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBzaXplIHJlcHJlc2VudGluZyBpbnZpc2libGUgY2FwdGNoYVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBzaXplID0gJ2ludmlzaWJsZSc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZW1lXHJcbiAgICovXHJcbiAgQElucHV0KCkgdGhlbWU6ICdkYXJrJyB8ICdsaWdodCcgPSAnbGlnaHQnO1xyXG5cclxuICAvKipcclxuICAgKiBCYWRnZVxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGJhZGdlOiAnYm90dG9tcmlnaHQnIHwgJ2JvdHRvbWxlZnQnIHwgJ2lubGluZScgPSAnYm90dG9tcmlnaHQnO1xyXG5cclxuICAvKipcclxuICAgKiBMYW5ndWFnZSBjb2RlLiBBdXRvLWRldGVjdHMgdGhlIHVzZXIncyBsYW5ndWFnZSBpZiB1bnNwZWNpZmllZC5cclxuICAgKi9cclxuICBASW5wdXQoKSBobDogc3RyaW5nO1xyXG5cclxuICBwcm90ZWN0ZWQgcmVjYXB0Y2hhVHlwZTogUmVDYXB0Y2hhVHlwZSA9IFJlQ2FwdGNoYVR5cGUuSW52aXNpYmxlUmVDYXB0Y2hhO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSxcclxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBwcm90ZWN0ZWQgc2NyaXB0U2VydmljZTogU2NyaXB0U2VydmljZVxyXG4gICkge1xyXG4gICAgc3VwZXIocmVuZGVyZXIsIHpvbmUsIGluamVjdG9yLCBzY3JpcHRTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvZ3JhbWF0aWNhbGx5IGludm9rZSB0aGUgcmVDQVBUQ0hBIGNoZWNrLiBVc2VkIGlmIHRoZSBpbnZpc2libGUgcmVDQVBUQ0hBIGlzIG9uIGEgZGl2IGluc3RlYWQgb2YgYSBidXR0b24uXHJcbiAgICovXHJcbiAgZXhlY3V0ZSgpOiB2b2lkIHtcclxuICAgIC8vIGV4ZWN1dGUgY2FwdGNoYVxyXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMucmVDYXB0Y2hhQXBpLmV4ZWN1dGUodGhpcy5jYXB0Y2hhSWQpKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBjYXB0Y2hhU3BlY2lmaWNTZXR1cCgpOiB2b2lkIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogR2V0cyByZUNhcHRjaGEgcHJvcGVydGllc1xyXG4gICovXHJcbiAgcHJvdGVjdGVkIGdldENhcHRjaGFQcm9wZXJ0aWVzKCk6IGFueSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAnc2l0ZWtleSc6IHRoaXMuc2l0ZUtleSxcclxuICAgICAgJ2NhbGxiYWNrJzogKHJlc3BvbnNlKSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IHRoaXMuaGFuZGxlQ2FsbGJhY2socmVzcG9uc2UpKSxcclxuICAgICAgJ2V4cGlyZWQtY2FsbGJhY2snOiAoKSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IHRoaXMuaGFuZGxlRXhwaXJlQ2FsbGJhY2soKSksXHJcbiAgICAgICdlcnJvci1jYWxsYmFjayc6ICgpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gdGhpcy5oYW5kbGVFcnJvckNhbGxiYWNrKCkpLFxyXG4gICAgICAnYmFkZ2UnOiB0aGlzLmJhZGdlLFxyXG4gICAgICAndHlwZSc6IHRoaXMudHlwZSxcclxuICAgICAgJ3RhYmluZGV4JzogdGhpcy50YWJJbmRleCxcclxuICAgICAgJ3NpemUnOiB0aGlzLnNpemUsXHJcbiAgICAgICd0aGVtZSc6IHRoaXMudGhlbWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuXHJcbiJdfQ==