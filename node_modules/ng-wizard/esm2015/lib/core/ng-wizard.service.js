/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { DEFAULT_CONFIG } from '../utils/constants';
import { NG_WIZARD_CONFIG_TOKEN } from './ng-wizard-config.token';
import { Subject } from 'rxjs';
import { merge } from '../utils/functions';
import * as i0 from "@angular/core";
import * as i1 from "./ng-wizard-config.token";
import * as ɵngcc0 from '@angular/core';
export class NgWizardService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.defaultConfig = Object.assign({}, DEFAULT_CONFIG);
        if (this.config) {
            this.defaultConfig = merge(this.defaultConfig, this.config);
        }
        // Observable sources
        this.resetWizard = new Subject();
        this.showNextStep = new Subject();
        this.showPreviousStep = new Subject();
        this.setTheme = new Subject();
        // Observable streams
        this.resetWizard$ = this.resetWizard.asObservable();
        this.showNextStep$ = this.showNextStep.asObservable();
        this.showPreviousStep$ = this.showPreviousStep.asObservable();
        this.setTheme$ = this.setTheme.asObservable();
    }
    /**
     * @return {?}
     */
    getDefaultConfig() {
        return Object.assign({}, this.defaultConfig);
    }
    /**
     * @return {?}
     */
    reset() {
        this.resetWizard.next();
    }
    /**
     * @return {?}
     */
    next() {
        this.showNextStep.next();
    }
    /**
     * @return {?}
     */
    previous() {
        this.showPreviousStep.next();
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    theme(theme) {
        this.setTheme.next(theme);
    }
}
NgWizardService.ɵfac = function NgWizardService_Factory(t) { return new (t || NgWizardService)(ɵngcc0.ɵɵinject(NG_WIZARD_CONFIG_TOKEN, 8)); };
NgWizardService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgWizardService, factory: NgWizardService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgWizardService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_WIZARD_CONFIG_TOKEN,] }] }
];
/** @nocollapse */ NgWizardService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgWizardService_Factory() { return new NgWizardService(i0.ɵɵinject(i1.NG_WIZARD_CONFIG_TOKEN, 8)); }, token: NgWizardService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_WIZARD_CONFIG_TOKEN]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    NgWizardService.prototype.resetWizard$;
    /** @type {?} */
    NgWizardService.prototype.showNextStep$;
    /** @type {?} */
    NgWizardService.prototype.showPreviousStep$;
    /** @type {?} */
    NgWizardService.prototype.setTheme$;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.resetWizard;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.showNextStep;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.showPreviousStep;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.setTheme;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.config;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy13aXphcmQvbGliL2NvcmUvbmctd2l6YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFbEUsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0M7QUFHQzs7QUFDRCxNQUFNLE9BQU8sZUFBZTtBQUM1QjtBQUFRO0FBQXlCO0FBQVEsSUFXdkMsWUFBZ0UsTUFBc0I7QUFDeEYsUUFEa0UsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7QUFBQyxRQUNyRixJQUFJLENBQUMsYUFBYSxxQkFBUSxjQUFjLENBQUUsQ0FBQztBQUMvQyxRQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNyQixZQUFNLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xFLFNBQUs7QUFDTCxRQUNJLHFCQUFxQjtBQUN6QixRQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztBQUMxQyxRQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztBQUMzQyxRQUFJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO0FBQy9DLFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUyxDQUFDO0FBQ3pDLFFBQ0kscUJBQXFCO0FBQ3pCLFFBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3hELFFBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzFELFFBQUksSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsRSxRQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQW1CO0FBQVEsSUFBaEMsZ0JBQWdCO0FBQUssUUFDbkIseUJBQVksSUFBSSxDQUFDLGFBQWEsRUFBRztBQUNyQyxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQ087QUFBUSxJQURwQixLQUFLO0FBQ1AsUUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFDUTtBQUFRLElBRHJCLElBQUk7QUFDTixRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNJO0FBQVEsSUFEakIsUUFBUTtBQUNWLFFBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pDLElBQUUsQ0FBQztBQUNIO0FBQ087QUFDQTtBQUFtQjtBQUN2QixJQUZELEtBQUssQ0FBQyxLQUFZO0FBQ3BCLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsSUFBRSxDQUFDO0FBQ0g7MkNBckRDLFVBQVUsU0FBQyxrQkFDVixVQUFVLEVBQUUsTUFBTSxjQUNuQjtpSUFDSTtBQUFDO0FBQW1CO0FBQ1UsNENBV3BCLFFBQVEsWUFBSSxNQUFNLFNBQUMsc0JBQXNCO0FBQVE7QUFBRzs7Ozs7Ozs7Ozs7a0NBUS9EO0FBQUM7QUFBYTtBQUFxQixJQW5CckMsdUNBQThCO0FBQUM7QUFBcUIsSUFDcEQsd0NBQStCO0FBQUM7QUFBcUIsSUFDckQsNENBQW1DO0FBQUM7QUFBcUIsSUFDekQsb0NBQTZCO0FBQUM7QUFBUTtBQUN4QztBQUNlO0FBQVEsSUFBckIsc0NBQWtDO0FBQ3BDO0FBQVE7QUFBaUI7QUFDdEI7QUFBUSxJQURULHVDQUFtQztBQUNyQztBQUFRO0FBQWlCO0FBQWdCO0FBQ2xDLElBREwsMkNBQXVDO0FBQ3pDO0FBQVE7QUFBaUI7QUFDcEI7QUFBUSxJQURYLG1DQUFpQztBQUNuQztBQUFRO0FBQWlCO0FBQ3pCO0FBQ08sSUFGTCx3Q0FBc0M7QUFDeEM7QUFDTztBQUFpQjtBQUFnQjtBQUFRLElBQWxDLGlDQUEwRTtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IERFRkFVTFRfQ09ORklHIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IE5HX1dJWkFSRF9DT05GSUdfVE9LRU4gfSBmcm9tICcuL25nLXdpemFyZC1jb25maWcudG9rZW4nO1xuaW1wb3J0IHsgTmdXaXphcmRDb25maWcgfSBmcm9tICcuLi91dGlscy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRIRU1FIH0gZnJvbSAnLi4vdXRpbHMvZW51bXMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICcuLi91dGlscy9mdW5jdGlvbnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ1dpemFyZFNlcnZpY2Uge1xuICByZXNldFdpemFyZCQ6IE9ic2VydmFibGU8YW55PjsgLy9Gb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gIHNob3dOZXh0U3RlcCQ6IE9ic2VydmFibGU8YW55PjsgLy9Gb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gIHNob3dQcmV2aW91c1N0ZXAkOiBPYnNlcnZhYmxlPGFueT47IC8vRm9yIGludGVybmFsIHVzZSBvbmx5LlxuICBzZXRUaGVtZSQ6IE9ic2VydmFibGU8VEhFTUU+OyAvL0ZvciBpbnRlcm5hbCB1c2Ugb25seS5cblxuICBwcml2YXRlIHJlc2V0V2l6YXJkOiBTdWJqZWN0PGFueT47XG4gIHByaXZhdGUgc2hvd05leHRTdGVwOiBTdWJqZWN0PGFueT47XG4gIHByaXZhdGUgc2hvd1ByZXZpb3VzU3RlcDogU3ViamVjdDxhbnk+O1xuICBwcml2YXRlIHNldFRoZW1lOiBTdWJqZWN0PFRIRU1FPjtcbiAgcHJpdmF0ZSBkZWZhdWx0Q29uZmlnOiBOZ1dpemFyZENvbmZpZztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1dJWkFSRF9DT05GSUdfVE9LRU4pIHByaXZhdGUgY29uZmlnOiBOZ1dpemFyZENvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IHsgLi4uREVGQVVMVF9DT05GSUcgfTtcbiAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IG1lcmdlKHRoaXMuZGVmYXVsdENvbmZpZywgdGhpcy5jb25maWcpO1xuICAgIH1cblxuICAgIC8vIE9ic2VydmFibGUgc291cmNlc1xuICAgIHRoaXMucmVzZXRXaXphcmQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgdGhpcy5zaG93TmV4dFN0ZXAgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgdGhpcy5zaG93UHJldmlvdXNTdGVwID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgIHRoaXMuc2V0VGhlbWUgPSBuZXcgU3ViamVjdDxUSEVNRT4oKTtcblxuICAgIC8vIE9ic2VydmFibGUgc3RyZWFtc1xuICAgIHRoaXMucmVzZXRXaXphcmQkID0gdGhpcy5yZXNldFdpemFyZC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLnNob3dOZXh0U3RlcCQgPSB0aGlzLnNob3dOZXh0U3RlcC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLnNob3dQcmV2aW91c1N0ZXAkID0gdGhpcy5zaG93UHJldmlvdXNTdGVwLmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuc2V0VGhlbWUkID0gdGhpcy5zZXRUaGVtZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGdldERlZmF1bHRDb25maWcoKTogTmdXaXphcmRDb25maWcge1xuICAgIHJldHVybiB7IC4uLnRoaXMuZGVmYXVsdENvbmZpZyB9O1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yZXNldFdpemFyZC5uZXh0KCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMuc2hvd05leHRTdGVwLm5leHQoKTtcbiAgfVxuXG4gIHByZXZpb3VzKCkge1xuICAgIHRoaXMuc2hvd1ByZXZpb3VzU3RlcC5uZXh0KCk7XG4gIH1cblxuICB0aGVtZSh0aGVtZTogVEhFTUUpIHtcbiAgICB0aGlzLnNldFRoZW1lLm5leHQodGhlbWUpO1xuICB9XG59XG4iXX0=