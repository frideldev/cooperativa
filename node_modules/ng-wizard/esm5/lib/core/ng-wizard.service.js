/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { DEFAULT_CONFIG } from '../utils/constants';
import { NG_WIZARD_CONFIG_TOKEN } from './ng-wizard-config.token';
import { Subject } from 'rxjs';
import { merge } from '../utils/functions';
import * as i0 from "@angular/core";
import * as i1 from "./ng-wizard-config.token";
import * as ɵngcc0 from '@angular/core';
var NgWizardService = /** @class */ (function () {
    function NgWizardService(config) {
        this.config = config;
        this.defaultConfig = tslib_1.__assign({}, DEFAULT_CONFIG);
        if (this.config) {
            this.defaultConfig = merge(this.defaultConfig, this.config);
        }
        // Observable sources
        this.resetWizard = new Subject();
        this.showNextStep = new Subject();
        this.showPreviousStep = new Subject();
        this.setTheme = new Subject();
        // Observable streams
        this.resetWizard$ = this.resetWizard.asObservable();
        this.showNextStep$ = this.showNextStep.asObservable();
        this.showPreviousStep$ = this.showPreviousStep.asObservable();
        this.setTheme$ = this.setTheme.asObservable();
    }
    /**
     * @return {?}
     */
    NgWizardService.prototype.getDefaultConfig = /**
     * @return {?}
     */
    function () {
        return tslib_1.__assign({}, this.defaultConfig);
    };
    /**
     * @return {?}
     */
    NgWizardService.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.resetWizard.next();
    };
    /**
     * @return {?}
     */
    NgWizardService.prototype.next = /**
     * @return {?}
     */
    function () {
        this.showNextStep.next();
    };
    /**
     * @return {?}
     */
    NgWizardService.prototype.previous = /**
     * @return {?}
     */
    function () {
        this.showPreviousStep.next();
    };
    /**
     * @param {?} theme
     * @return {?}
     */
    NgWizardService.prototype.theme = /**
     * @param {?} theme
     * @return {?}
     */
    function (theme) {
        this.setTheme.next(theme);
    };
    /** @nocollapse */
    NgWizardService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_WIZARD_CONFIG_TOKEN,] }] }
    ]; };
    /** @nocollapse */ NgWizardService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgWizardService_Factory() { return new NgWizardService(i0.ɵɵinject(i1.NG_WIZARD_CONFIG_TOKEN, 8)); }, token: NgWizardService, providedIn: "root" });
NgWizardService.ɵfac = function NgWizardService_Factory(t) { return new (t || NgWizardService)(ɵngcc0.ɵɵinject(NG_WIZARD_CONFIG_TOKEN, 8)); };
NgWizardService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgWizardService, factory: function (t) { return NgWizardService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_WIZARD_CONFIG_TOKEN]
            }] }]; }, null); })();
    return NgWizardService;
}());
export { NgWizardService };
if (false) {
    /** @type {?} */
    NgWizardService.prototype.resetWizard$;
    /** @type {?} */
    NgWizardService.prototype.showNextStep$;
    /** @type {?} */
    NgWizardService.prototype.showPreviousStep$;
    /** @type {?} */
    NgWizardService.prototype.setTheme$;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.resetWizard;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.showNextStep;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.showPreviousStep;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.setTheme;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.config;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy13aXphcmQvbGliL2NvcmUvbmctd2l6YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWxFLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNDO0FBR0M7O0FBRkQ7QUFHYSxJQVlYLHlCQUFnRSxNQUFzQjtBQUN4RixRQURrRSxXQUFNLEdBQU4sTUFBTSxDQUFnQjtBQUFDLFFBQ3JGLElBQUksQ0FBQyxhQUFhLHdCQUFRLGNBQWMsQ0FBRSxDQUFDO0FBQy9DLFFBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3JCLFlBQU0sSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEUsU0FBSztBQUNMLFFBQ0kscUJBQXFCO0FBQ3pCLFFBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO0FBQzFDLFFBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO0FBQzNDLFFBQUksSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7QUFDL0MsUUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxFQUFTLENBQUM7QUFDekMsUUFDSSxxQkFBcUI7QUFDekIsUUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDeEQsUUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDMUQsUUFBSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ2xFLFFBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ2xELElBQUUsQ0FBQztBQUNIO0FBQ087QUFBbUI7QUFBUSxJQUFoQywwQ0FBZ0I7QUFBTztBQUNwQjtBQUFRLElBRFg7QUFBYyxRQUNaLDRCQUFZLElBQUksQ0FBQyxhQUFhLEVBQUc7QUFDckMsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUNPO0FBQVEsSUFEckIsK0JBQUs7QUFDTDtBQUFtQjtBQUNyQixJQUZFO0FBQ0UsUUFBQSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFDUTtBQUFRLElBRHRCLDhCQUFJO0FBQ0o7QUFBbUI7QUFBUSxJQUQzQjtBQUNHLFFBQUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQ0k7QUFBUSxJQURsQixrQ0FBUTtBQUNSO0FBQW1CO0FBQVEsSUFEM0I7QUFDRCxRQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNqQyxJQUFFLENBQUM7QUFFSDtBQUFRO0FBQ0E7QUFBbUI7QUFFM0IsSUFIRSwrQkFBSztBQUFPO0FBQ0E7QUFDWjtBQUVFLElBSkYsVUFBTSxLQUFZO0FBQ3BCLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsSUFBRSxDQUFDLENBakRNO0FBQUM7NEJBSFQsVUFBVSxTQUFDLC9DQUlWO1NBSEEsVUFBVSxFQUFFLE1BQU0sa0JBQ25CLDdDQUdHLGdEQVVXLFFBQVEsWUFBSSxNQUFNLFNBQUMsc0JBQXNCO0FBQVE7QUFBVTs7Ozs7Ozs7Ozs7OztrQ0FRM0Q7QUFBQywwQkFoQ2hCO0FBQUUsQ0E4REQsQUFyREQsSUFxREM7QUFDRCxTQW5EYSxlQUFlO0FBQzNCO0FBQWE7QUFBcUIsSUFBakMsdUNBQThCO0FBQUM7QUFBcUIsSUFDcEQsd0NBQStCO0FBQUM7QUFBcUIsSUFDckQsNENBQW1DO0FBQUM7QUFBcUIsSUFDekQsb0NBQTZCO0FBQUM7QUFBUTtBQUN4QztBQUNlO0FBQVEsSUFBckIsc0NBQWtDO0FBQ3BDO0FBQVE7QUFBaUI7QUFDdEI7QUFBUSxJQURULHVDQUFtQztBQUNyQztBQUFRO0FBQWlCO0FBQWdCO0FBQ2xDLElBREwsMkNBQXVDO0FBQ3pDO0FBQVE7QUFBaUI7QUFDcEI7QUFBUSxJQURYLG1DQUFpQztBQUNuQztBQUFRO0FBQWlCO0FBQ3pCO0FBQ08sSUFGTCx3Q0FBc0M7QUFDeEM7QUFDTztBQUFpQjtBQUFnQjtBQUFRLElBQWxDLGlDQUEwRTtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IERFRkFVTFRfQ09ORklHIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IE5HX1dJWkFSRF9DT05GSUdfVE9LRU4gfSBmcm9tICcuL25nLXdpemFyZC1jb25maWcudG9rZW4nO1xuaW1wb3J0IHsgTmdXaXphcmRDb25maWcgfSBmcm9tICcuLi91dGlscy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRIRU1FIH0gZnJvbSAnLi4vdXRpbHMvZW51bXMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICcuLi91dGlscy9mdW5jdGlvbnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ1dpemFyZFNlcnZpY2Uge1xuICByZXNldFdpemFyZCQ6IE9ic2VydmFibGU8YW55PjsgLy9Gb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gIHNob3dOZXh0U3RlcCQ6IE9ic2VydmFibGU8YW55PjsgLy9Gb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gIHNob3dQcmV2aW91c1N0ZXAkOiBPYnNlcnZhYmxlPGFueT47IC8vRm9yIGludGVybmFsIHVzZSBvbmx5LlxuICBzZXRUaGVtZSQ6IE9ic2VydmFibGU8VEhFTUU+OyAvL0ZvciBpbnRlcm5hbCB1c2Ugb25seS5cblxuICBwcml2YXRlIHJlc2V0V2l6YXJkOiBTdWJqZWN0PGFueT47XG4gIHByaXZhdGUgc2hvd05leHRTdGVwOiBTdWJqZWN0PGFueT47XG4gIHByaXZhdGUgc2hvd1ByZXZpb3VzU3RlcDogU3ViamVjdDxhbnk+O1xuICBwcml2YXRlIHNldFRoZW1lOiBTdWJqZWN0PFRIRU1FPjtcbiAgcHJpdmF0ZSBkZWZhdWx0Q29uZmlnOiBOZ1dpemFyZENvbmZpZztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1dJWkFSRF9DT05GSUdfVE9LRU4pIHByaXZhdGUgY29uZmlnOiBOZ1dpemFyZENvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IHsgLi4uREVGQVVMVF9DT05GSUcgfTtcbiAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IG1lcmdlKHRoaXMuZGVmYXVsdENvbmZpZywgdGhpcy5jb25maWcpO1xuICAgIH1cblxuICAgIC8vIE9ic2VydmFibGUgc291cmNlc1xuICAgIHRoaXMucmVzZXRXaXphcmQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgdGhpcy5zaG93TmV4dFN0ZXAgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgdGhpcy5zaG93UHJldmlvdXNTdGVwID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgIHRoaXMuc2V0VGhlbWUgPSBuZXcgU3ViamVjdDxUSEVNRT4oKTtcblxuICAgIC8vIE9ic2VydmFibGUgc3RyZWFtc1xuICAgIHRoaXMucmVzZXRXaXphcmQkID0gdGhpcy5yZXNldFdpemFyZC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLnNob3dOZXh0U3RlcCQgPSB0aGlzLnNob3dOZXh0U3RlcC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLnNob3dQcmV2aW91c1N0ZXAkID0gdGhpcy5zaG93UHJldmlvdXNTdGVwLmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuc2V0VGhlbWUkID0gdGhpcy5zZXRUaGVtZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGdldERlZmF1bHRDb25maWcoKTogTmdXaXphcmRDb25maWcge1xuICAgIHJldHVybiB7IC4uLnRoaXMuZGVmYXVsdENvbmZpZyB9O1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yZXNldFdpemFyZC5uZXh0KCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMuc2hvd05leHRTdGVwLm5leHQoKTtcbiAgfVxuXG4gIHByZXZpb3VzKCkge1xuICAgIHRoaXMuc2hvd1ByZXZpb3VzU3RlcC5uZXh0KCk7XG4gIH1cblxuICB0aGVtZSh0aGVtZTogVEhFTUUpIHtcbiAgICB0aGlzLnNldFRoZW1lLm5leHQodGhlbWUpO1xuICB9XG59XG4iXX0=